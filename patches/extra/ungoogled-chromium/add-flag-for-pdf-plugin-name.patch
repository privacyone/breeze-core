--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -5818,7 +5818,7 @@ bool ChromeContentBrowserClient::ShouldA
     const url::Origin& embedder_origin,
     const content::PepperPluginInfo& plugin_info) {
 #if BUILDFLAG(ENABLE_PDF)
-  if (plugin_info.name == ChromeContentClient::kPDFInternalPluginName) {
+  if (plugin_info.name == ChromeContentClient::GetPDFInternalPluginName()) {
     return IsPdfInternalPluginAllowedOrigin(embedder_origin);
   }
 #endif  // BUILDFLAG(ENABLE_PDF)
--- a/chrome/browser/pdf/pdf_extension_util.cc
+++ b/chrome/browser/pdf/pdf_extension_util.cc
@@ -170,7 +170,7 @@ std::string GetManifest() {
   DCHECK(manifest_contents.find(kNameTag) != std::string::npos);
   base::ReplaceFirstSubstringAfterOffset(
       &manifest_contents, 0, kNameTag,
-      ChromeContentClient::kPDFExtensionPluginName);
+      ChromeContentClient::GetPDFExtensionPluginName());
 
   return manifest_contents;
 }
--- a/chrome/browser/plugins/pdf_iframe_navigation_throttle_unittest.cc
+++ b/chrome/browser/plugins/pdf_iframe_navigation_throttle_unittest.cc
@@ -65,7 +65,7 @@ class PDFIFrameNavigationThrottleTest :
     // Register a fake PDF Viewer plugin into our plugin service.
     content::WebPluginInfo info;
     info.name =
-        base::ASCIIToUTF16(ChromeContentClient::kPDFExtensionPluginName);
+        base::ASCIIToUTF16(ChromeContentClient::GetPDFExtensionPluginName());
     info.mime_types.push_back(content::WebPluginMimeType(
         kPDFMimeType, "pdf", "Fake PDF description"));
     plugin_service->RegisterInternalPlugin(info, true);
--- a/chrome/browser/plugins/plugin_prefs.cc
+++ b/chrome/browser/plugins/plugin_prefs.cc
@@ -37,9 +37,9 @@ namespace {
 
 bool IsPDFViewerPlugin(const std::u16string& plugin_name) {
   return (plugin_name ==
-          base::ASCIIToUTF16(ChromeContentClient::kPDFExtensionPluginName)) ||
+          base::ASCIIToUTF16(ChromeContentClient::GetPDFExtensionPluginName())) ||
          (plugin_name ==
-          base::ASCIIToUTF16(ChromeContentClient::kPDFInternalPluginName));
+          base::ASCIIToUTF16(ChromeContentClient::GetPDFInternalPluginName()));
 }
 
 }  // namespace
--- a/chrome/browser/plugins/plugin_prefs_unittest.cc
+++ b/chrome/browser/plugins/plugin_prefs_unittest.cc
@@ -24,11 +24,11 @@ class PluginPrefsTest : public ::testing
 TEST_F(PluginPrefsTest, AlwaysOpenPdfExternally) {
   EXPECT_EQ(PluginPrefs::NO_POLICY,
             plugin_prefs_->PolicyStatusForPlugin(base::ASCIIToUTF16(
-                ChromeContentClient::kPDFExtensionPluginName)));
+                ChromeContentClient::GetPDFExtensionPluginName())));
 
   SetAlwaysOpenPdfExternally(true);
 
   EXPECT_EQ(PluginPrefs::POLICY_DISABLED,
             plugin_prefs_->PolicyStatusForPlugin(base::ASCIIToUTF16(
-                ChromeContentClient::kPDFExtensionPluginName)));
+                ChromeContentClient::GetPDFExtensionPluginName())));
 }
--- a/chrome/browser/resources/plugin_metadata/plugins_chromeos.json
+++ b/chrome/browser/resources/plugin_metadata/plugins_chromeos.json
@@ -44,6 +44,19 @@
     "name": "Chrome PDF Viewer",
     "group_name_matcher": "*Chrome PDF Viewer*"
   },
+  "microsoft-edge-pdf": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Viewer",
+    "group_name_matcher": "*Microsoft Edge PDF Viewer*"
+  },
   "chromium-pdf": {
     "mime_types": [
     ],
@@ -70,6 +83,19 @@
     "name": "Chrome PDF Plugin",
     "group_name_matcher": "*Chrome PDF Plugin*"
   },
+  "microsoft-edge-pdf-plugin": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF Plugin has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Plugin",
+    "group_name_matcher": "*Microsoft Edge PDF Plugin*"
+  },
   "chromium-pdf-plugin": {
     "mime_types": [
     ],
--- a/chrome/browser/resources/plugin_metadata/plugins_linux.json
+++ b/chrome/browser/resources/plugin_metadata/plugins_linux.json
@@ -36,6 +36,19 @@
     "name": "Chrome PDF Viewer",
     "group_name_matcher": "*Chrome PDF Viewer*"
   },
+  "microsoft-edge-pdf": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Viewer",
+    "group_name_matcher": "*Microsoft Edge PDF Viewer*"
+  },
   "chromium-pdf": {
     "mime_types": [
     ],
@@ -62,6 +75,19 @@
     "name": "Chrome PDF Plugin",
     "group_name_matcher": "*Chrome PDF Plugin*"
   },
+  "microsoft-edge-pdf-plugin": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Google Chrome PDF Plugin has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Plugin",
+    "group_name_matcher": "*Microsoft Edge PDF Plugin*"
+  },
   "chromium-pdf-plugin": {
     "mime_types": [
     ],
--- a/chrome/browser/resources/plugin_metadata/plugins_mac.json
+++ b/chrome/browser/resources/plugin_metadata/plugins_mac.json
@@ -33,6 +33,19 @@
     "name": "Chrome PDF Viewer",
     "group_name_matcher": "*Chrome PDF Viewer*"
   },
+  "microsoft-edge-pdf": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF Viewer has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Viewer",
+    "group_name_matcher": "*Microsoft Edge PDF Viewer*"
+  },
   "chromium-pdf": {
     "mime_types": [
     ],
@@ -59,6 +72,19 @@
     "name": "Chrome PDF Plugin",
     "group_name_matcher": "*Chrome PDF Plugin*"
   },
+  "microsoft-edge-pdf-plugin": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF Plugin has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Plugin",
+    "group_name_matcher": "*Microsoft Edge PDF Plugin*"
+  },
   "chromium-pdf-plugin": {
     "mime_types": [
     ],
--- a/chrome/browser/resources/plugin_metadata/plugins_win.json
+++ b/chrome/browser/resources/plugin_metadata/plugins_win.json
@@ -33,6 +33,19 @@
     "name": "Chrome PDF Viewer",
     "group_name_matcher": "*Chrome PDF Viewer*"
   },
+  "microsoft-edge-pdf": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF Viewer has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Viewer",
+    "group_name_matcher": "*Microsoft Edge PDF Viewer*"
+  },
   "chromium-pdf": {
     "mime_types": [
     ],
@@ -59,6 +72,19 @@
     "name": "Chrome PDF Plugin",
     "group_name_matcher": "*Chrome PDF Plugin*"
   },
+  "microsoft-edge-pdf-plugin": {
+    "mime_types": [
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "fully_trusted",
+        "comment": "Microsoft Edge PDF Plugin has no version information."
+      }
+    ],
+    "name": "Microsoft Edge PDF Plugin",
+    "group_name_matcher": "*Microsoft Edge PDF Plugin*"
+  },
   "chromium-pdf-plugin": {
     "mime_types": [
     ],
--- a/chrome/browser/ungoogled_flag_choices.h
+++ b/chrome/browser/ungoogled_flag_choices.h
@@ -34,4 +34,9 @@ const FeatureEntry::Choice kScrollEventC
      "scroll-tabs",
      "never"}
 };
+const FeatureEntry::Choice kPDFPluginNameChoices[] = {
+    {"Chromium", "", ""},
+    {"Google Chrome", switches::kPDFPluginName, "chrome"},
+    {"Microsoft Edge", switches::kPDFPluginName, "edge"},
+};
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_CHOICES_H_
--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -40,4 +40,8 @@
      "Scroll switches tab",
      "Switch to the left/right tab if the wheel-scroll happens over the tabstrip, or the empty space beside the tabstrip.  ungoogled-chromium flag.",
      kOsDesktop, MULTI_VALUE_TYPE(kScrollEventChangesTab)},
+    {"pdf-plugin-name",
+     "Set internal PDF plugin name",
+     "Sets the internal PDF viewer plugin name. Useful for sites that probe JS API navigator.plugins.  ungoogled-chromium flag.",
+     kOsDesktop, MULTI_VALUE_TYPE(kPDFPluginNameChoices)},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -246,6 +246,7 @@ static_library("common") {
     "//components/no_state_prefetch/common",
     "//components/no_state_prefetch/common:mojo_bindings",
     "//components/page_load_metrics/common:common",
+    "//components/ungoogled:ungoogled_switches",
   ]
 
   if (enable_pdf) {
--- a/chrome/common/chrome_content_client.cc
+++ b/chrome/common/chrome_content_client.cc
@@ -122,7 +122,7 @@ void ComputeBuiltInPlugins(std::vector<c
   content::PepperPluginInfo pdf_info;
   pdf_info.is_internal = true;
   pdf_info.is_out_of_process = true;
-  pdf_info.name = ChromeContentClient::kPDFInternalPluginName;
+  pdf_info.name = ChromeContentClient::GetPDFInternalPluginName();
   pdf_info.description = kPDFPluginDescription;
   pdf_info.path = base::FilePath(ChromeContentClient::kPDFPluginPath);
   content::WebPluginMimeType pdf_mime_type(
--- a/chrome/common/chrome_content_client.h
+++ b/chrome/common/chrome_content_client.h
@@ -42,8 +42,8 @@ class ChromeContentClient : public conte
   static const base::FilePath::CharType kNaClPluginFileName[];
 #endif
 
-  static const char kPDFExtensionPluginName[];
-  static const char kPDFInternalPluginName[];
+  static const char *GetPDFExtensionPluginName();
+  static const char *GetPDFInternalPluginName();
   static const base::FilePath::CharType kPDFPluginPath[];
 
   ChromeContentClient();
--- a/chrome/common/chrome_content_client_constants.cc
+++ b/chrome/common/chrome_content_client_constants.cc
@@ -2,8 +2,12 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <string>
+
+#include "base/command_line.h"
 #include "build/branding_buildflags.h"
 #include "chrome/common/chrome_content_client.h"
+#include "components/ungoogled/ungoogled_switches.h"
 
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 const base::FilePath::CharType ChromeContentClient::kNotPresent[] =
@@ -15,15 +19,52 @@ const base::FilePath::CharType ChromeCon
     FILE_PATH_LITERAL("internal-nacl-plugin");
 #endif
 
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
-const char ChromeContentClient::kPDFExtensionPluginName[] = "Chrome PDF Viewer";
-const char ChromeContentClient::kPDFInternalPluginName[] = "Chrome PDF Plugin";
-#else
-const char ChromeContentClient::kPDFExtensionPluginName[] =
+namespace {
+
+const char kChromePDFExtensionPluginName[] =
+    "Chrome PDF Viewer";
+const char kChromePDFInternalPluginName[] =
+    "Chrome PDF Plugin";
+const char kEdgePDFExtensionPluginName[] =
+    "Microsoft Edge PDF Viewer";
+const char kEdgePDFInternalPluginName[] =
+    "Microsoft Edge PDF Plugin";
+const char kChromiumPDFExtensionPluginName[] =
     "Chromium PDF Viewer";
-const char ChromeContentClient::kPDFInternalPluginName[] =
+const char kChromiumPDFInternalPluginName[] =
     "Chromium PDF Plugin";
-#endif
+
+} // namespace
+
+// static
+const char *ChromeContentClient::GetPDFExtensionPluginName() {
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  if (command_line.HasSwitch(switches::kPDFPluginName)) {
+    std::string switch_value = command_line.GetSwitchValueASCII(switches::kPDFPluginName);
+    if (switch_value == "edge") {
+      return kEdgePDFExtensionPluginName;
+    } else if (switch_value == "chrome") {
+      return kChromePDFExtensionPluginName;
+    }
+  }
+  return kChromiumPDFExtensionPluginName;
+}
+
+// static
+const char *ChromeContentClient::GetPDFInternalPluginName() {
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  if (command_line.HasSwitch(switches::kPDFPluginName)) {
+    std::string switch_value = command_line.GetSwitchValueASCII(switches::kPDFPluginName);
+    if (switch_value == "edge") {
+      return kEdgePDFInternalPluginName;
+    } else if (switch_value == "chrome") {
+      return kChromePDFInternalPluginName;
+    }
+  }
+  return kChromiumPDFInternalPluginName;
+}
 
 const base::FilePath::CharType ChromeContentClient::kPDFPluginPath[] =
     FILE_PATH_LITERAL("internal-pdf-viewer");
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -1043,7 +1043,7 @@ WebPlugin* ChromeContentRendererClient::
             }
           }
         } else if (info.name ==
-                   ASCIIToUTF16(ChromeContentClient::kPDFExtensionPluginName)) {
+                   ASCIIToUTF16(ChromeContentClient::GetPDFExtensionPluginName())) {
           // Report PDF load metrics. Since the PDF plugin is comprised of an
           // extension that loads a second plugin, avoid double counting by
           // ignoring the creation of the second plugin.
@@ -1075,7 +1075,7 @@ WebPlugin* ChromeContentRendererClient::
 
 #if BUILDFLAG(ENABLE_PDF)
         if (info.name ==
-            ASCIIToUTF16(ChromeContentClient::kPDFInternalPluginName)) {
+            ASCIIToUTF16(ChromeContentClient::GetPDFInternalPluginName())) {
           return pdf::CreateInternalPlugin(
               info, std::move(params), render_frame,
               std::make_unique<ChromePdfInternalPluginDelegate>());
@@ -1088,7 +1088,7 @@ WebPlugin* ChromeContentRendererClient::
         PluginUMAReporter::GetInstance()->ReportPluginDisabled(orig_mime_type,
                                                                url);
         if (info.name ==
-            ASCIIToUTF16(ChromeContentClient::kPDFExtensionPluginName)) {
+            ASCIIToUTF16(ChromeContentClient::GetPDFExtensionPluginName())) {
           ReportPDFLoadStatus(
               PDFLoadStatus::kShowedDisabledPluginPlaceholderForEmbeddedPdf);
 
