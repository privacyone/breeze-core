# Remove unused Safe Browsing and Sign-in fields from Preferences file
# TODO: This patch should probably be split up and merged into
# disable-signin.patch and fix-building-without-safebrowsing.patch

--- a/android_webview/browser/aw_browser_context.cc
+++ b/android_webview/browser/aw_browser_context.cc
@@ -47,7 +47,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_service_factory.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/url_formatter/url_fixer.h"
 #include "components/user_prefs/user_prefs.h"
 #include "components/visitedlink/browser/visitedlink_writer.h"
@@ -452,8 +451,6 @@ void AwBrowserContext::RebuildTable(
 }
 
 void AwBrowserContext::SetExtendedReportingAllowed(bool allowed) {
-  user_pref_service_->SetBoolean(
-      ::prefs::kSafeBrowsingExtendedReportingOptInAllowed, allowed);
 }
 
 // TODO(amalova): Make sure NetworkContextParams is configured correctly when
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1370,72 +1370,9 @@
   <message name="IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_DESC_COOKIES_PAGE" desc="On the cookies page, the secondary text next to the checkbox that enables prediction of network actions.">
     Pre-fetches information from pages, including pages you have not yet visited. Information fetched may include cookies, if you allow cookies.
   </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION" desc="The section title of 'Protects you and your device from dangerous sites'">
-    Safe Browsing (protects you and your device from dangerous sites)
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC" desc="Checkbox label: should Chrome protect user and user's device from dangerous sites">
-    Sends URLs of some pages you visit to Google, when your security is at risk
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING" desc="The section title of the extended safe browsing checkbox to help improve safe browsing">
-    Help improve Chrome security
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC" desc="Description for extended safe browsing">
-    Sends URLs of some pages you visit, limited system information, and some page content to Google, to help discover new threats and protect everyone on the web.
-  </message>
   <message name="IDS_SETTINGS_SAFEBROWSING_SECTION_LABEL" desc="The section label of the safe browsing section grouping safe browsing settings">
     Safe Browsing
   </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED" desc="Label for safe browsing enhanced protection mode">
-    Enhanced protection
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_DESC" desc="Description of safe browsing enhanced protection mode">
-    Faster, proactive protection against dangerous websites, downloads, and extensions. Warns you about password breaches. Requires browsing data to be sent to Google.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_ONE" desc="First bullet point under the safe browsing enhanced protection mode">
-    Predicts and warns you about dangerous events before they happen
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_TWO" desc="Second bullet point under the safe browsing enhanced protection mode">
-    Keeps you safe on Chrome and may be used to improve your security in other Google apps when you are signed in
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_THREE" desc="Third bullet point under the safe browsing enhanced protection mode">
-    Improves security for you and everyone on the web
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FOUR" desc="Fourth bullet point under the safe browsing enhanced protection mode">
-    Warns you if passwords are exposed in a data breach
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FIVE" desc="Fourth bullet point under the safe browsing enhanced protection mode">
-    Sends URLs to Safe Browsing to check them. Also sends a small sample of pages, downloads, extension activity, and system information to help discover new threats. Temporarily links this data to your Google Account when you're signed in, to protect you across Google apps.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD" desc="Label for safe browsing standard protection mode">
-    Standard protection
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_DESC" desc="Description for safe browsing standard protection mode">
-    Standard protection against websites, downloads, and extensions that are known to be dangerous.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_ONE" desc="First bullet point under the safe browsing standard protection mode">
-    Detects and warns you about dangerous events when they happen
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_TWO" desc="First bullet point under the safe browsing standard protection mode">
-    Checks URLs with a list of unsafe sites stored in Chrome. If a site tries to steal your password, or when you download a harmful file, Chrome may also send URLs, including bits of page content, to Safe Browsing.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_HELP_IMPROVE" desc="The name of the toggle to enable reporting to help improve safe browsing">
-    Help improve security on the web for everyone
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_NONE" desc="Label for safe browsing no protection mode">
-    No protection (not recommended)
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_NONE_DESC" desc="Description for safe browsing no protection mode">
-    Does not protect you against dangerous websites, downloads, and extensions. Youâ€™ll still get Safe Browsing protection, where available, in other Google services, like Gmail and Search.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_TITLE" desc="Title for the confirmation dialog to turn off SafeBrowsing">
-    Turn off Safe Browsing?
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_DESC" desc="Description for the confirmation dialog to turn off SafeBrowsing">
-    Safe Browsing protects you against attackers who may trick you into doing something dangerous like installing malicious software or revealing personal information like passwords, phone numbers, or credit cards. If you turn it off, be careful when browsing unfamiliar or unreputable sites.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_CONFIRM" desc="Title for the confirmation dialog to turn off SafeBrowsing">
-    Turn off
-  </message>
   <message name="IDS_SETTINGS_ENABLE_DO_NOT_TRACK" desc="The label of the checkbox to enable/disable sending the 'Do Not track' header">
     Send a "Do Not Track" request with your browsing traffic
   </message>
--- a/chrome/browser/android/signin/signin_manager_android.cc
+++ b/chrome/browser/android/signin/signin_manager_android.cc
@@ -14,7 +14,6 @@
 #include "chrome/android/chrome_jni_headers/SigninManagerImpl_jni.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 
 #include "base/android/callback_android.h"
@@ -30,7 +29,6 @@
 #include "components/policy/core/browser/browser_policy_connector.h"
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_cookie_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/browser_context.h"
@@ -92,8 +90,6 @@ class ProfileDataRemover : public conten
       // All the Profile data has been wiped. Clear the last signed in username
       // as well, so that the next signin doesn't trigger the account
       // change dialog.
-      profile_->GetPrefs()->ClearPref(prefs::kGoogleServicesLastAccountId);
-      profile_->GetPrefs()->ClearPref(prefs::kGoogleServicesLastUsername);
     }
 
     origin_runner_->PostTask(FROM_HERE, std::move(callback_));
@@ -131,11 +127,6 @@ SigninManagerAndroid::SigninManagerAndro
   DCHECK(user_cloud_policy_manager_);
   DCHECK(user_policy_signin_service_);
 
-  signin_allowed_.Init(
-      prefs::kSigninAllowed, profile_->GetPrefs(),
-      base::BindRepeating(&SigninManagerAndroid::OnSigninAllowedPrefChanged,
-                          base::Unretained(this)));
-
   force_browser_signin_.Init(prefs::kForceBrowserSignin,
                              g_browser_process->local_state());
 
@@ -159,7 +150,7 @@ void SigninManagerAndroid::Shutdown() {
 }
 
 bool SigninManagerAndroid::IsSigninAllowed() const {
-  return signin_allowed_.GetValue();
+  return false;
 }
 
 jboolean SigninManagerAndroid::IsSigninAllowedByPolicy(JNIEnv* env) const {
--- a/chrome/browser/android/signin/signin_manager_android.h
+++ b/chrome/browser/android/signin/signin_manager_android.h
@@ -117,9 +117,6 @@ class SigninManagerAndroid : public Keye
 
   Profile* const profile_ = nullptr;
 
-  // Handler for prefs::kSigninAllowed set in user's profile.
-  BooleanPrefMember signin_allowed_;
-
   // Handler for prefs::kForceBrowserSignin. This preference is set in Local
   // State, not in user prefs.
   BooleanPrefMember force_browser_signin_;
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -267,7 +267,6 @@
 #include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
 #include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
 #include "components/safe_browsing/core/browser/url_checker_delegate.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/realtime/policy_engine.h"
@@ -277,7 +276,6 @@
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/content/ssl_error_handler.h"
 #include "components/security_interstitials/content/ssl_error_navigation_throttle.h"
-#include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/site_engagement/content/site_engagement_service.h"
 #include "components/site_isolation/pref_names.h"
 #include "components/site_isolation/preloaded_isolated_origins.h"
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -91,9 +91,7 @@ void MaybeCreateSafeBrowsingForRenderer(
   if (!render_process_host)
     return;
 
-  bool safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-      *Profile::FromBrowserContext(render_process_host->GetBrowserContext())
-           ->GetPrefs());
+  bool safe_browsing_enabled = false;
   content::GetIOThreadTaskRunner({})->PostTask(
       FROM_HERE,
       base::BindOnce(
--- a/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
+++ b/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "extensions/browser/extension_system.h"
 
 namespace lock_screen_apps {
@@ -93,8 +92,6 @@ void LockScreenProfileCreatorImpl::OnPro
     // SafeBrowsingService when the user has safe browsing disabled (reasoning
     // similar to http://crbug.com/461493).
     // TODO(tbarzic): Revisit this if webviews get enabled for lock screen apps.
-    profile->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-    profile->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
     return;
   }
 
--- a/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl_unittest.cc
+++ b/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl_unittest.cc
@@ -35,7 +35,6 @@
 #include "components/arc/session/arc_session.h"
 #include "components/crx_file/id_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_task_environment.h"
 #include "extensions/common/extension.h"
 #include "extensions/common/extension_builder.h"
--- a/chrome/browser/chromeos/login/signin/device_id_browsertest.cc
+++ b/chrome/browser/chromeos/login/signin/device_id_browsertest.cc
@@ -23,7 +23,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chromeos/constants/chromeos_switches.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/user_manager/known_user.h"
 #include "components/user_manager/user_manager.h"
 #include "content/public/test/browser_test.h"
@@ -250,15 +249,6 @@ IN_PROC_BROWSER_TEST_F(DeviceIDTest, PRE
   SignInOnline(FakeGaiaMixin::kFakeUserEmail, FakeGaiaMixin::kFakeUserPassword,
                kRefreshToken1, FakeGaiaMixin::kFakeUserGaiaId);
 
-  // Simulate user that has device ID saved only in preferences (pre-M44).
-  PrefService* prefs =
-      ProfileHelper::Get()
-          ->GetProfileByUser(user_manager::UserManager::Get()->GetActiveUser())
-          ->GetPrefs();
-  prefs->SetString(
-      prefs::kGoogleServicesSigninScopedDeviceId,
-      GetDeviceId(AccountId::FromUserEmail(FakeGaiaMixin::kFakeUserEmail)));
-
   // Can't use SetKnownUserDeviceId here, because it forbids changing a device
   // ID.
   user_manager::known_user::SetStringPref(
@@ -283,13 +273,6 @@ IN_PROC_BROWSER_TEST_F(DeviceIDTest, PRE
   SignInOnline(FakeGaiaMixin::kFakeUserEmail, FakeGaiaMixin::kFakeUserPassword,
                kRefreshToken1, FakeGaiaMixin::kFakeUserGaiaId);
 
-  PrefService* prefs =
-      ProfileHelper::Get()
-          ->GetProfileByUser(user_manager::UserManager::Get()->GetActiveUser())
-          ->GetPrefs();
-  EXPECT_TRUE(
-      prefs->GetString(prefs::kGoogleServicesSigninScopedDeviceId).empty());
-
   // Can't use SetKnownUserDeviceId here, because it forbids changing a device
   // ID.
   user_manager::known_user::SetStringPref(
--- a/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler.cc
+++ b/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler.cc
@@ -7,7 +7,6 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 
 namespace policy {
 
--- a/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler_unittest.cc
+++ b/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler_unittest.cc
@@ -13,7 +13,6 @@
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace policy {
--- a/chrome/browser/download/download_browsertest.cc
+++ b/chrome/browser/download/download_browsertest.cc
@@ -97,7 +97,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/reputation/core/safety_tip_test_utils.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/safe_browsing/core/proto/download_file_types.pb.h"
 #include "components/safe_browsing/core/safe_browsing_service_interface.h"
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -699,6 +699,7 @@ void DownloadItemModel::ExecuteCommand(D
       DownloadUIModel::ExecuteCommand(download_commands, command);
       break;
     case DownloadCommands::DEEP_SCAN:
+#if BUILDFLAG(FULL_SAFE_BROWSING)
       safe_browsing::SafeBrowsingService* sb_service =
           g_browser_process->safe_browsing_service();
       if (!sb_service)
@@ -724,6 +725,7 @@ void DownloadItemModel::ExecuteCommand(D
           safe_browsing::DeepScanningRequest::DeepScanTrigger::
               TRIGGER_APP_PROMPT,
           std::move(settings));
+#endif
       break;
   }
 }
--- a/chrome/browser/enterprise/connectors/connectors_manager.cc
+++ b/chrome/browser/enterprise/connectors/connectors_manager.cc
@@ -6,6 +6,7 @@
 
 #include <memory>
 
+#include "base/bind.h"
 #include "base/feature_list.h"
 #include "base/no_destructor.h"
 #include "base/values.h"
@@ -13,7 +14,6 @@
 #include "chrome/browser/enterprise/connectors/connectors_prefs.h"
 #include "components/policy/core/browser/url_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/url_matcher/url_matcher.h"
 #include "url/gurl.h"
 
--- a/chrome/browser/enterprise/connectors/connectors_service.cc
+++ b/chrome/browser/enterprise/connectors/connectors_service.cc
@@ -22,7 +22,6 @@
 #include "components/policy/core/common/cloud/machine_level_user_cloud_policy_manager.h"
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/policy/core/common/policy_types.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/user_prefs/user_prefs.h"
 #include "content/public/browser/browser_context.h"
 
@@ -187,20 +186,6 @@ bool ConnectorsService::DelayUntilVerdic
 
 base::Optional<std::string> ConnectorsService::GetDMTokenForRealTimeUrlCheck()
     const {
-  if (!ConnectorsEnabled())
-    return base::nullopt;
-
-  if (Profile::FromBrowserContext(context_)->GetPrefs()->GetInteger(
-          prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckMode) ==
-      safe_browsing::REAL_TIME_CHECK_DISABLED) {
-    return base::nullopt;
-  }
-
-  base::Optional<DmToken> dm_token =
-      GetDmToken(prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckScope);
-
-  if (dm_token.has_value())
-    return dm_token.value().value;
   return base::nullopt;
 }
 
--- a/chrome/browser/extensions/api/identity/identity_apitest.cc
+++ b/chrome/browser/extensions/api/identity/identity_apitest.cc
@@ -56,7 +56,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/account_reconcilor.h"
 #include "components/signin/public/base/list_accounts_test_utils.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
--- a/chrome/browser/extensions/api/identity/identity_get_auth_token_function.cc
+++ b/chrome/browser/extensions/api/identity/identity_get_auth_token_function.cc
@@ -29,7 +29,6 @@
 #include "chrome/common/channel_info.h"
 #include "chrome/common/extensions/api/identity.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "components/signin/public/identity_manager/access_token_info.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
@@ -70,7 +69,7 @@ const char* const kExtensionsIdentityAPI
     "extensions_identity_api";
 
 bool IsBrowserSigninAllowed(Profile* profile) {
-  return profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
+  return false;
 }
 
 std::string GetOAuth2MintTokenFlowVersion() {
--- a/chrome/browser/extensions/api/preference/preference_api.cc
+++ b/chrome/browser/extensions/api/preference/preference_api.cc
@@ -33,7 +33,6 @@
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 #include "extensions/browser/extension_pref_value_map.h"
@@ -105,11 +104,6 @@ const PrefMappingEntry kPrefMapping[] =
      APIPermission::kPrivacy},
     {"doNotTrackEnabled", prefs::kEnableDoNotTrack, APIPermission::kPrivacy,
      APIPermission::kPrivacy},
-    {"safeBrowsingEnabled", prefs::kSafeBrowsingEnabled,
-     APIPermission::kPrivacy, APIPermission::kPrivacy},
-    {"safeBrowsingExtendedReportingEnabled",
-     prefs::kSafeBrowsingScoutReportingEnabled, APIPermission::kPrivacy,
-     APIPermission::kPrivacy},
     {"searchSuggestEnabled", prefs::kSearchSuggestEnabled,
      APIPermission::kPrivacy, APIPermission::kPrivacy},
     {"spellingServiceEnabled", spellcheck::prefs::kSpellCheckUseSpellingService,
@@ -803,18 +797,6 @@ ExtensionFunction::ResponseAction SetPre
         base::Value(browser_pref_value->GetBool()));
   }
 
-  // Whenever an extension takes control of the |kSafeBrowsingEnabled|
-  // preference, it must also set |kSafeBrowsingEnhanced| to false.
-  // See crbug.com/1064722 for more background.
-  //
-  // TODO(crbug.com/1064722): Consider extending
-  // chrome.privacy.services.safeBrowsingEnabled to a three-state enum.
-  if (prefs::kSafeBrowsingEnabled == browser_pref) {
-    preference_api->SetExtensionControlledPref(extension_id(),
-                                               prefs::kSafeBrowsingEnhanced,
-                                               scope, base::Value(false));
-  }
-
   preference_api->SetExtensionControlledPref(
       extension_id(), browser_pref, scope,
       base::Value::FromUniquePtrValue(std::move(browser_pref_value)));
@@ -868,18 +850,6 @@ ExtensionFunction::ResponseAction ClearP
   PreferenceAPI::Get(browser_context())
       ->RemoveExtensionControlledPref(extension_id(), browser_pref, scope);
 
-  // Whenever an extension clears the |kSafeBrowsingEnabled| preference,
-  // it must also clear |kSafeBrowsingEnhanced|. See crbug.com/1064722 for
-  // more background.
-  //
-  // TODO(crbug.com/1064722): Consider extending
-  // chrome.privacy.services.safeBrowsingEnabled to a three-state enum.
-  if (prefs::kSafeBrowsingEnabled == browser_pref) {
-    PreferenceAPI::Get(browser_context())
-        ->RemoveExtensionControlledPref(extension_id(),
-                                        prefs::kSafeBrowsingEnhanced, scope);
-  }
-
   return RespondNow(NoArguments());
 }
 
--- a/chrome/browser/extensions/api/preference/preference_apitest.cc
+++ b/chrome/browser/extensions/api/preference/preference_apitest.cc
@@ -28,7 +28,6 @@
 #include "components/keep_alive_registry/scoped_keep_alive.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 #include "content/public/browser/notification_service.h"
 #include "content/public/test/browser_test.h"
@@ -73,7 +72,6 @@ class ExtensionPreferenceApiTest : publi
               prefs->GetInteger(prefs::kNetworkPredictionOptions));
     EXPECT_TRUE(
         prefs->GetBoolean(password_manager::prefs::kCredentialsEnableService));
-    EXPECT_TRUE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
     EXPECT_TRUE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
   }
 
@@ -99,7 +97,6 @@ class ExtensionPreferenceApiTest : publi
               prefs->GetInteger(prefs::kNetworkPredictionOptions));
     EXPECT_FALSE(
         prefs->GetBoolean(password_manager::prefs::kCredentialsEnableService));
-    EXPECT_FALSE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
     EXPECT_FALSE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
   }
 
@@ -163,7 +160,6 @@ IN_PROC_BROWSER_TEST_F(ExtensionPreferen
   prefs->SetInteger(prefs::kNetworkPredictionOptions,
                     chrome_browser_net::NETWORK_PREDICTION_NEVER);
   prefs->SetBoolean(password_manager::prefs::kCredentialsEnableService, false);
-  prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
   prefs->SetBoolean(prefs::kSearchSuggestEnabled, false);
   prefs->SetString(prefs::kWebRTCIPHandlingPolicy,
                    blink::kWebRTCIPHandlingDefaultPublicInterfaceOnly);
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
@@ -41,7 +41,6 @@
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/browser_context.h"
 #include "extensions/browser/event_router.h"
@@ -1024,18 +1023,6 @@ SafeBrowsingPrivateEventRouter::GetRepor
 void SafeBrowsingPrivateEventRouter::IfAuthorized(
     const std::string& dm_token,
     base::OnceCallback<void(bool)> cont) {
-  if (!binary_upload_service_ && g_browser_process) {
-    binary_upload_service_ =
-        safe_browsing::BinaryUploadServiceFactory::GetForProfile(
-            Profile::FromBrowserContext(context_));
-  }
-
-  // TODO(crbug/1069049): Use reporting URL.
-  if (binary_upload_service_)
-    binary_upload_service_->IsAuthorized(
-        GURL(), std::move(cont), dm_token,
-        enterprise_connectors::AnalysisConnector::
-            ANALYSIS_CONNECTOR_UNSPECIFIED);
 }
 
 void SafeBrowsingPrivateEventRouter::ReportRealtimeEvent(
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc
@@ -33,7 +33,6 @@
 #include "components/enterprise/common/proto/connectors.pb.h"
 #include "components/policy/core/common/cloud/mock_cloud_policy_client.h"
 #include "components/policy/core/common/cloud/realtime_reporting_job_configuration.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -38,7 +38,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/privacy_sandbox/privacy_sandbox_prefs.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_manager.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
@@ -273,18 +272,6 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
     (*s_allowlist)[::prefs::kPrivacySandboxApisEnabled] =
         settings_api::PrefType::PREF_TYPE_BOOLEAN;
 
-  // Security page
-  (*s_allowlist)[::kGeneratedPasswordLeakDetectionPref] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_allowlist)[::prefs::kSafeBrowsingEnabled] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_allowlist)[::prefs::kSafeBrowsingEnhanced] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_allowlist)[::prefs::kSafeBrowsingScoutReportingEnabled] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_allowlist)[::safe_browsing::kGeneratedSafeBrowsingPref] =
-      settings_api::PrefType::PREF_TYPE_NUMBER;
-
   // Sync and personalization page.
   (*s_allowlist)[::prefs::kSearchSuggestEnabled] =
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
@@ -636,9 +636,6 @@ IN_PROC_BROWSER_TEST_F(ExtensionWebstore
 IN_PROC_BROWSER_TEST_F(ExtensionWebstorePrivateGetReferrerChainApiTest,
                        GetReferrerChainForNonSafeBrowsingUser) {
   PrefService* pref_service = browser()->profile()->GetPrefs();
-  EXPECT_TRUE(pref_service->GetBoolean(prefs::kSafeBrowsingEnabled));
-  // Disable SafeBrowsing.
-  pref_service->SetBoolean(prefs::kSafeBrowsingEnabled, false);
 
   GURL page_url = GetTestServerURLWithReferrers("empty_referrer_chain.html");
   ASSERT_TRUE(RunPageTest(page_url.spec()));
--- a/chrome/browser/extensions/extension_allowlist.cc
+++ b/chrome/browser/extensions/extension_allowlist.cc
@@ -6,7 +6,6 @@
 
 #include "chrome/browser/extensions/extension_service.h"
 #include "chrome/browser/profiles/profile.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "extensions/browser/allowlist_state.h"
 #include "extensions/browser/extension_registry.h"
 #include "extensions/browser/extension_system.h"
@@ -28,10 +27,6 @@ void ExtensionAllowlist::Init() {
   // Register to Enhanced Safe Browsing setting changes for allowlist
   // enforcements.
   pref_change_registrar_.Init(profile_->GetPrefs());
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingEnhanced,
-      base::BindRepeating(&ExtensionAllowlist::OnSafeBrowsingEnhancedChanged,
-                          base::Unretained(this)));
 
   if (is_allowlist_enforced_) {
     ActivateAllowlistEnforcement();
@@ -93,10 +88,6 @@ bool ExtensionAllowlist::ShouldDisplayWa
 }
 
 void ExtensionAllowlist::SetAllowlistEnforcedField() {
-  is_allowlist_enforced_ =
-      base::FeatureList::IsEnabled(
-          extensions_features::kEnforceSafeBrowsingExtensionAllowlist) &&
-      safe_browsing::IsEnhancedProtectionEnabled(*profile_->GetPrefs());
 }
 
 void ExtensionAllowlist::ActivateAllowlistEnforcement() {
--- a/chrome/browser/extensions/installed_loader.cc
+++ b/chrome/browser/extensions/installed_loader.cc
@@ -703,12 +703,6 @@ void InstalledLoader::RecordExtensionsMe
                               enabled_not_allowlisted_count);
   base::UmaHistogramCounts100("Extensions.NotAllowlistedDisabled",
                               disabled_not_allowlisted_count);
-  if (safe_browsing::IsEnhancedProtectionEnabled(*profile->GetPrefs())) {
-    base::UmaHistogramCounts100("Extensions.NotAllowlistedEnabledAndEsbUser",
-                                enabled_not_allowlisted_count);
-    base::UmaHistogramCounts100("Extensions.NotAllowlistedDisabledAndEsbUser",
-                                disabled_not_allowlisted_count);
-  }
 }
 
 int InstalledLoader::GetCreationFlags(const ExtensionInfo* info) {
--- a/chrome/browser/net/profile_network_context_service.cc
+++ b/chrome/browser/net/profile_network_context_service.cc
@@ -43,7 +43,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/network_service_instance.h"
@@ -754,13 +753,6 @@ void ProfileNetworkContextService::Confi
   network_context_params->enable_certificate_reporting = true;
   network_context_params->enable_expect_ct_reporting = true;
 
-  // Initialize the network context to do SCT auditing only if the current
-  // profile is opted in to Safe Browsing Extended Reporting.
-  if (!profile_->IsOffTheRecord() &&
-      safe_browsing::IsExtendedReportingEnabled(*profile_->GetPrefs())) {
-    network_context_params->enable_sct_auditing = true;
-  }
-
   network_context_params->ct_policy = GetCTPolicy();
 
 #if BUILDFLAG(TRIAL_COMPARISON_CERT_VERIFIER_SUPPORTED)
--- a/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
@@ -12,7 +12,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/metrics/content/subprocess_metrics_provider.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_test.h"
 #include "net/base/features.h"
 #include "net/cert/trial_comparison_cert_verifier.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -20,7 +20,6 @@
 #include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/chrome_features.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -43,12 +42,6 @@ TrialComparisonCertVerifierController::T
     // enabled.
     return;
   }
-
-  pref_change_registrar_.Init(profile_->GetPrefs());
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingScoutReportingEnabled,
-      base::BindRepeating(&TrialComparisonCertVerifierController::RefreshState,
-                          base::Unretained(this)));
 }
 
 TrialComparisonCertVerifierController::
@@ -94,9 +87,7 @@ bool TrialComparisonCertVerifierControll
   if (!MaybeAllowedForProfile(profile_))
     return false;
 
-  const PrefService& prefs = *profile_->GetPrefs();
-
-  return safe_browsing::IsExtendedReportingEnabled(prefs);
+  return false;
 }
 
 void TrialComparisonCertVerifierController::SendTrialReport(
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.h
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.h
@@ -14,7 +14,6 @@
 #include "base/memory/ref_counted.h"
 #include "base/memory/weak_ptr.h"
 #include "base/threading/thread_checker.h"
-#include "components/prefs/pref_change_registrar.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/receiver_set.h"
@@ -70,7 +69,6 @@ class TrialComparisonCertVerifierControl
   void RefreshState();
 
   Profile* profile_;
-  PrefChangeRegistrar pref_change_registrar_;
 
   mojo::ReceiverSet<network::mojom::TrialComparisonCertVerifierReportClient>
       receiver_set_;
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_logger.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/browser/browser_task_traits.h"
--- a/chrome/browser/password_manager/generated_password_leak_detection_pref.cc
+++ b/chrome/browser/password_manager/generated_password_leak_detection_pref.cc
@@ -13,7 +13,6 @@
 #include "chrome/common/extensions/api/settings_private.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 
 namespace {
@@ -44,8 +43,7 @@ bool IsUserSignedInAndSyncing(Profile* p
 // Returns whether the effective value of the Safe Browsing preferences for
 // |profile| is standard protection.
 bool IsSafeBrowsingStandard(Profile* profile) {
-  return profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled) &&
-         !profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnhanced);
+  return false;
 }
 
 }  // namespace
@@ -64,16 +62,6 @@ GeneratedPasswordLeakDetectionPref::Gene
       base::BindRepeating(
           &GeneratedPasswordLeakDetectionPref::OnSourcePreferencesChanged,
           base::Unretained(this)));
-  user_prefs_registrar_.Add(
-      prefs::kSafeBrowsingEnabled,
-      base::BindRepeating(
-          &GeneratedPasswordLeakDetectionPref::OnSourcePreferencesChanged,
-          base::Unretained(this)));
-  user_prefs_registrar_.Add(
-      prefs::kSafeBrowsingEnhanced,
-      base::BindRepeating(
-          &GeneratedPasswordLeakDetectionPref::OnSourcePreferencesChanged,
-          base::Unretained(this)));
 
   if (auto* identity_manager = IdentityManagerFactory::GetForProfile(profile))
     identity_manager_observer_.Add(identity_manager);
--- a/chrome/browser/password_manager/password_store_factory.cc
+++ b/chrome/browser/password_manager/password_store_factory.cc
@@ -160,16 +160,6 @@ PasswordStoreFactory::BuildServiceInstan
       profile->GetPrefs(), base::TimeDelta::FromSeconds(60),
       network_context_getter);
 
-// TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
-// of lacros-chrome is complete.
-#if defined(OS_WIN) || defined(OS_MAC) || \
-    (defined(OS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS))
-  std::unique_ptr<password_manager::PasswordStoreSigninNotifier> notifier =
-      std::make_unique<password_manager::PasswordStoreSigninNotifierImpl>(
-          IdentityManagerFactory::GetForProfile(profile));
-  ps->SetPasswordStoreSigninNotifier(std::move(notifier));
-#endif
-
   return ps;
 }
 
--- a/chrome/browser/policy/browser_signin_policy_handler.cc
+++ b/chrome/browser/policy/browser_signin_policy_handler.cc
@@ -15,7 +15,6 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 
 namespace policy {
 BrowserSigninPolicyHandler::BrowserSigninPolicyHandler(Schema chrome_schema)
@@ -54,32 +53,9 @@ void BrowserSigninPolicyHandler::ApplyPo
       case BrowserSigninMode::kForced:
 #if !defined(OS_LINUX) && !defined(OS_CHROMEOS)
         prefs->SetValue(prefs::kForceBrowserSignin, base::Value(true));
-#endif
-        FALLTHROUGH;
-      case BrowserSigninMode::kEnabled:
-        prefs->SetValue(
-#if defined(OS_ANDROID)
-            // The new kSigninAllowedOnNextStartup pref is only used on Desktop.
-            // Keep the old kSigninAllowed pref for Android until the policy is
-            // fully deprecated in M71 and can be removed.
-            prefs::kSigninAllowed,
-#else
-            prefs::kSigninAllowedOnNextStartup,
-#endif
-            base::Value(true));
-        break;
-      case BrowserSigninMode::kDisabled:
-        prefs->SetValue(
-#if defined(OS_ANDROID)
-            // The new kSigninAllowedOnNextStartup pref is only used on Desktop.
-            // Keep the old kSigninAllowed pref for Android until the policy is
-            // fully deprecated in M71 and can be removed.
-            prefs::kSigninAllowed,
 #else
-            prefs::kSigninAllowedOnNextStartup,
+        ;
 #endif
-            base::Value(false));
-        break;
     }
   }
 }
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -78,12 +78,9 @@
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/policy/core/common/schema.h"
 #include "components/policy/policy_constants.h"
-#include "components/safe_browsing/core/common/safe_browsing_policy_handler.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_policy_handler.h"
 #include "components/search_engines/search_engines_pref_names.h"
 #include "components/security_interstitials/core/pref_names.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "components/sync/base/pref_names.h"
 #include "components/sync/driver/sync_policy_handler.h"
@@ -182,12 +179,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kQuicAllowed,
     prefs::kQuicAllowed,
     base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingEnabled,
-    prefs::kSafeBrowsingEnabled,
-    base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingForTrustedSourcesEnabled,
-    prefs::kSafeBrowsingForTrustedSourcesEnabled,
-    base::Value::Type::BOOLEAN },
   { key::kUrlKeyedAnonymizedDataCollectionEnabled,
     unified_consent::prefs::kUrlKeyedAnonymizedDataCollectionEnabled,
     base::Value::Type::BOOLEAN },
@@ -317,15 +308,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kGloballyScopeHTTPAuthCacheEnabled,
     prefs::kGloballyScopeHTTPAuthCacheEnabled,
     base::Value::Type::BOOLEAN },
-  { key::kPasswordProtectionWarningTrigger,
-    prefs::kPasswordProtectionWarningTrigger,
-    base::Value::Type::INTEGER },
-  { key::kPasswordProtectionLoginURLs,
-    prefs::kPasswordProtectionLoginURLs,
-    base::Value::Type::LIST },
-  { key::kPasswordProtectionChangePasswordURL,
-    prefs::kPasswordProtectionChangePasswordURL,
-    base::Value::Type::STRING },
   { key::kSafeSitesFilterBehavior,
     policy_prefs::kSafeSitesFilterBehavior,
     base::Value::Type::INTEGER },
@@ -440,18 +422,12 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kMaxConnectionsPerProxy,
     prefs::kMaxConnectionsPerProxy,
     base::Value::Type::INTEGER },
-  { key::kRestrictSigninToPattern,
-    prefs::kGoogleServicesUsernamePattern,
-    base::Value::Type::STRING },
   { key::kDefaultWebBluetoothGuardSetting,
     prefs::kManagedDefaultWebBluetoothGuardSetting,
     base::Value::Type::INTEGER },
   { key::kDefaultMediaStreamSetting,
     prefs::kManagedDefaultMediaStreamSetting,
     base::Value::Type::INTEGER },
-  { key::kDisableSafeBrowsingProceedAnyway,
-    prefs::kSafeBrowsingProceedAnywayDisabled,
-    base::Value::Type::BOOLEAN },
   { key::kSSLErrorOverrideAllowed,
     prefs::kSSLErrorOverrideAllowed,
     base::Value::Type::BOOLEAN },
@@ -605,9 +581,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kIntranetRedirectBehavior,
     omnibox::kIntranetRedirectBehavior,
     base::Value::Type::INTEGER },
-  { key::kAdvancedProtectionAllowed,
-    prefs::kAdvancedProtectionAllowed,
-    base::Value::Type::BOOLEAN },
   { key::kAccessibilityImageLabelsEnabled,
     prefs::kAccessibilityImageLabelsEnabled,
     base::Value::Type::BOOLEAN },
@@ -1437,8 +1410,6 @@ std::unique_ptr<ConfigurationPolicyHandl
   handlers->AddHandler(std::make_unique<JavascriptPolicyHandler>());
   handlers->AddHandler(std::make_unique<NetworkPredictionPolicyHandler>());
   handlers->AddHandler(std::make_unique<RestoreOnStartupPolicyHandler>());
-  handlers->AddHandler(
-      std::make_unique<safe_browsing::SafeBrowsingPolicyHandler>());
   handlers->AddHandler(std::make_unique<SimpleDeprecatingPolicyHandler>(
       std::make_unique<SimplePolicyHandler>(key::kAuthServerWhitelist,
                                             prefs::kAuthServerAllowlist,
@@ -1454,9 +1425,6 @@ std::unique_ptr<ConfigurationPolicyHandl
           key::kAuthNegotiateDelegateAllowlist,
           prefs::kAuthNegotiateDelegateAllowlist, base::Value::Type::STRING)));
 
-  handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
-      key::kSafeBrowsingAllowlistDomains, prefs::kSafeBrowsingWhitelistDomains,
-      base::Value::Type::LIST));
   handlers->AddHandler(std::make_unique<syncer::SyncPolicyHandler>());
   handlers->AddHandler(std::make_unique<BrowsingHistoryPolicyHandler>());
 
@@ -1465,12 +1433,6 @@ std::unique_ptr<ConfigurationPolicyHandl
   handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
       key::kURLAllowlist, policy_prefs::kUrlAllowlist,
       base::Value::Type::LIST));
-  handlers->AddHandler(std::make_unique<SimpleSchemaValidatingPolicyHandler>(
-      key::kSafeBrowsingExtendedReportingEnabled,
-      prefs::kSafeBrowsingScoutReportingEnabled, chrome_schema,
-      SCHEMA_ALLOW_UNKNOWN,
-      SimpleSchemaValidatingPolicyHandler::RECOMMENDED_ALLOWED,
-      SimpleSchemaValidatingPolicyHandler::MANDATORY_ALLOWED));
 
 #if defined(OS_ANDROID)
   handlers->AddHandler(
@@ -1540,12 +1502,6 @@ std::unique_ptr<ConfigurationPolicyHandl
           key::kOnSecurityEventEnterpriseConnector,
           enterprise_connectors::kOnSecurityEventPref,
           enterprise_connectors::kOnSecurityEventScopePref, chrome_schema));
-  handlers->AddHandler(
-      std::make_unique<
-          enterprise_connectors::EnterpriseConnectorsPolicyHandler>(
-          key::kEnterpriseRealTimeUrlCheckMode,
-          prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckMode,
-          prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckScope, chrome_schema));
 
   handlers->AddHandler(std::make_unique<SimpleSchemaValidatingPolicyHandler>(
       key::kBrowsingDataLifetime, browsing_data::prefs::kBrowsingDataLifetime,
@@ -1810,17 +1766,6 @@ std::unique_ptr<ConfigurationPolicyHandl
   signin_legacy_policies.push_back(std::make_unique<SimplePolicyHandler>(
       key::kForceBrowserSignin, prefs::kForceBrowserSignin,
       base::Value::Type::BOOLEAN));
-  signin_legacy_policies.push_back(std::make_unique<SimplePolicyHandler>(
-      key::kSigninAllowed,
-#if defined(OS_ANDROID)
-      // The new kSigninAllowedOnNextStartup pref is only used on Desktop.
-      // Keep the old kSigninAllowed pref for Android until the policy is
-      // fully deprecated in M71 and can be removed.
-      prefs::kSigninAllowed,
-#else   // defined(OS_ANDROID)
-      prefs::kSigninAllowedOnNextStartup,
-#endif  // defined(OS_ANDROID)
-      base::Value::Type::BOOLEAN));
   handlers->AddHandler(std::make_unique<LegacyPoliciesDeprecatingPolicyHandler>(
       std::move(signin_legacy_policies),
       std::make_unique<BrowserSigninPolicyHandler>(chrome_schema)));
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -137,7 +137,6 @@
 #include "components/privacy_sandbox/privacy_sandbox_prefs.h"
 #include "components/proxy_config/pref_proxy_config_tracker_impl.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/template_url_prepopulate_data.h"
 #include "components/security_interstitials/content/insecure_form_blocking_page.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
@@ -662,7 +661,6 @@ void RegisterLocalState(PrefRegistrySimp
   profiles::RegisterPrefs(registry);
   rappor::RapporServiceImpl::RegisterPrefs(registry);
   RegisterScreenshotPrefs(registry);
-  safe_browsing::RegisterLocalStatePrefs(registry);
   secure_origin_allowlist::RegisterPrefs(registry);
   sessions::SessionIdGenerator::RegisterPrefs(registry);
   SSLConfigServiceManager::RegisterPrefs(registry);
@@ -892,7 +890,6 @@ void RegisterProfilePrefs(user_prefs::Pr
   PushMessagingAppIdentifier::RegisterProfilePrefs(registry);
   QuietNotificationPermissionUiState::RegisterProfilePrefs(registry);
   RegisterBrowserUserPrefs(registry);
-  safe_browsing::RegisterProfilePrefs(registry);
   SearchPrefetchService::RegisterProfilePrefs(registry);
   blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
       registry);
--- a/chrome/browser/prefs/chrome_command_line_pref_store.cc
+++ b/chrome/browser/prefs/chrome_command_line_pref_store.cc
@@ -28,7 +28,6 @@
 #include "components/language/core/browser/pref_names.h"
 #include "components/proxy_config/proxy_config_dictionary.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_switches.h"
 #include "components/sync/base/pref_names.h"
 #include "content/public/common/content_switches.h"
@@ -74,8 +73,6 @@ const CommandLinePrefStore::BooleanSwitc
         {switches::kAllowCrossOriginAuthPrompt,
          prefs::kAllowCrossOriginAuthPrompt, true},
         {switches::kDisablePrintPreview, prefs::kPrintPreviewDisabled, true},
-        {safe_browsing::switches::kSbEnableEnhancedProtection,
-         prefs::kSafeBrowsingEnhanced, true},
 #if BUILDFLAG(IS_CHROMEOS_ASH)
         {chromeos::switches::kEnableTouchpadThreeFingerClick,
          prefs::kEnableTouchpadThreeFingerClick, true},
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -48,10 +48,8 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_store.h"
 #include "components/prefs/pref_value_store.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_manager.h"
 #include "components/search_engines/search_engines_pref_names.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync/base/model_type.h"
 #include "components/sync/base/pref_names.h"
 #include "components/sync_preferences/pref_model_associator.h"
@@ -121,8 +119,6 @@ const prefs::TrackedPreferenceMetadata k
     {5, extensions::pref_names::kExtensions, EnforcementLevel::NO_ENFORCEMENT,
      PrefTrackingStrategy::SPLIT, ValueType::IMPERSONAL},
 #endif
-    {6, prefs::kGoogleServicesLastUsername, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::PERSONAL},
     {7, prefs::kSearchProviderOverrides, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #if !defined(OS_ANDROID)
@@ -146,8 +142,6 @@ const prefs::TrackedPreferenceMetadata k
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
     // kSyncRemainingRollbackTries is deprecated and will be removed a few
     // releases after M50.
-    {18, prefs::kSafeBrowsingIncidentsSent, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #if defined(OS_WIN)
     {19, prefs::kSwReporterPromptVersion, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
@@ -156,10 +150,6 @@ const prefs::TrackedPreferenceMetadata k
     {22, prefs::kSwReporterPromptSeed, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #endif
-    {23, prefs::kGoogleServicesAccountId, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::PERSONAL},
-    {24, prefs::kGoogleServicesLastAccountId, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::PERSONAL},
 #if defined(OS_WIN)
     {25, prefs::kSettingsResetPromptPromptWave,
      EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::ATOMIC,
--- a/chrome/browser/prefs/pref_functional_browsertest.cc
+++ b/chrome/browser/prefs/pref_functional_browsertest.cc
@@ -24,7 +24,6 @@
 #include "components/content_settings/core/common/content_settings_types.h"
 #include "components/content_settings/core/common/pref_names.h"
 #include "components/embedder_support/pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/test/browser_test.h"
@@ -220,9 +219,6 @@ IN_PROC_BROWSER_TEST_F(PrefsFunctionalTe
   prefs->SetInteger(prefs::kNetworkPredictionOptions,
                     chrome_browser_net::NETWORK_PREDICTION_NEVER);
 
-  EXPECT_TRUE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
-  prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-
   EXPECT_TRUE(prefs->GetBoolean(embedder_support::kAlternateErrorPagesEnabled));
   prefs->SetBoolean(embedder_support::kAlternateErrorPagesEnabled, false);
 
@@ -236,7 +232,6 @@ IN_PROC_BROWSER_TEST_F(PrefsFunctionalTe
 
   EXPECT_EQ(chrome_browser_net::NETWORK_PREDICTION_NEVER,
             prefs->GetInteger(prefs::kNetworkPredictionOptions));
-  EXPECT_FALSE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
   EXPECT_FALSE(
       prefs->GetBoolean(embedder_support::kAlternateErrorPagesEnabled));
   EXPECT_FALSE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
--- a/chrome/browser/profiles/gaia_info_update_service.cc
+++ b/chrome/browser/profiles/gaia_info_update_service.cc
@@ -21,7 +21,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/avatar_icon_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/consent_level.h"
--- a/chrome/browser/profiles/gaia_info_update_service_unittest.cc
+++ b/chrome/browser/profiles/gaia_info_update_service_unittest.cc
@@ -29,7 +29,6 @@
 #include "chrome/test/base/testing_profile_manager.h"
 #include "components/prefs/pref_service.h"
 #include "components/profile_metrics/state.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "testing/gmock/include/gmock/gmock.h"
--- a/chrome/browser/profiles/profile_attributes_entry.cc
+++ b/chrome/browser/profiles/profile_attributes_entry.cc
@@ -27,7 +27,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/profile_metrics/state.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/gfx/canvas.h"
@@ -428,7 +427,7 @@ bool ProfileAttributesEntry::IsAuthError
 }
 
 bool ProfileAttributesEntry::IsSignedInWithCredentialProvider() const {
-  return GetBool(prefs::kSignedInWithCredentialProvider);
+  return false;
 }
 
 size_t ProfileAttributesEntry::GetAvatarIconIndex() const {
@@ -575,9 +574,6 @@ void ProfileAttributesEntry::SetIsSignin
 }
 
 void ProfileAttributesEntry::SetSignedInWithCredentialProvider(bool value) {
-  if (value != GetBool(prefs::kSignedInWithCredentialProvider)) {
-    SetBool(prefs::kSignedInWithCredentialProvider, value);
-  }
 }
 
 void ProfileAttributesEntry::LockForceSigninProfile(bool is_lock) {
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -137,7 +137,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/site_isolation/site_isolation_policy.h"
 #include "components/sync_preferences/pref_service_syncable.h"
--- a/chrome/browser/profiles/profile_manager.cc
+++ b/chrome/browser/profiles/profile_manager.cc
@@ -89,7 +89,6 @@
 #include "components/search_engines/default_search_manager.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/consent_level.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
@@ -1884,8 +1883,7 @@ void ProfileManager::AddProfileToStorage
       entry->SetAuthInfo(account_info.gaia, username,
                          is_consented_primary_account);
 
-      entry->SetSignedInWithCredentialProvider(profile->GetPrefs()->GetBoolean(
-          prefs::kSignedInWithCredentialProvider));
+      entry->SetSignedInWithCredentialProvider(false);
 
 #if !defined(OS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
       // Sign out if force-sign-in policy is enabled and profile is not signed
@@ -1947,14 +1945,11 @@ void ProfileManager::AddProfileToStorage
   if (IsEphemeral(profile))
     entry->SetIsEphemeral(true);
 
-  entry->SetSignedInWithCredentialProvider(
-      profile->GetPrefs()->GetBoolean(prefs::kSignedInWithCredentialProvider));
+  entry->SetSignedInWithCredentialProvider(false);
 }
 
 void ProfileManager::SetNonPersonalProfilePrefs(Profile* profile) {
   PrefService* prefs = profile->GetPrefs();
-  if (!profile->IsEphemeralGuestProfile())
-    prefs->SetBoolean(prefs::kSigninAllowed, false);
   prefs->SetBoolean(bookmarks::prefs::kEditBookmarksEnabled, false);
   prefs->SetBoolean(bookmarks::prefs::kShowBookmarkBar, false);
   prefs->ClearPref(DefaultSearchManager::kDefaultSearchProviderDataPrefName);
--- a/chrome/browser/profiles/profile_window.cc
+++ b/chrome/browser/profiles/profile_window.cc
@@ -40,7 +40,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/flags_ui/pref_service_flags_storage.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/browser_thread.h"
@@ -354,9 +353,7 @@ bool IsLockAvailable(Profile* profile) {
   base::Optional<AccountInfo> primary_account_info =
       identity_manager->FindExtendedAccountInfoForAccountWithRefreshToken(
           identity_manager->GetPrimaryAccountInfo());
-  std::string hosted_domain = primary_account_info.has_value()
-                                  ? primary_account_info.value().hosted_domain
-                                  : "";
+  std::string hosted_domain;
 
   // TODO(mlerman): Prohibit only users who authenticate using SAML. Until then,
   // prohibited users who use hosted domains (aside from 9oo91e.qjz9zk).
--- a/chrome/browser/profiles/profiles_state.cc
+++ b/chrome/browser/profiles/profiles_state.cc
@@ -42,7 +42,6 @@
 #include <algorithm>
 #include "chrome/browser/profiles/gaia_info_update_service.h"
 #include "chrome/browser/profiles/gaia_info_update_service_factory.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #endif
 
 #if BUILDFLAG(IS_CHROMEOS_LACROS)
--- a/chrome/browser/resources/settings/privacy_page/disable_safebrowsing_dialog.html
+++ b/chrome/browser/resources/settings/privacy_page/disable_safebrowsing_dialog.html
@@ -1,12 +1,9 @@
     <cr-dialog id="dialog" close-text="$i18n{close}">
-      <div slot="title">$i18n{safeBrowsingDisableDialog}</div>
-      <div slot="body">$i18n{safeBrowsingDisableDialogDesc}</div>
       <div slot="button-container">
         <cr-button class="cancel-button" on-click="onDialogCancel_">
           $i18n{cancel}
         </cr-button>
         <cr-button class="action-button" on-click="onDialogConfirm_">
-          $i18n{safeBrowsingDisableDialogConfirm}
         </cr-button>
       </div>
     </cr-dialog>
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.html
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.html
@@ -672,48 +672,6 @@
           </template>
         </settings-subpage>
       </template>
-      <template is="dom-if" if="[[enableSafeBrowsingSubresourceFilter_]]"
-          no-search>
-        <template is="dom-if" route-path="/content/ads" no-search>
-          <settings-subpage page-title="$i18n{siteSettingsAds}"
-              search-label="$i18n{siteSettingsAllSitesSearch}"
-              search-term="{{searchFilter_}}">
-            <template is="dom-if" if="[[enableContentSettingsRedesign_]]">
-              <div class="content-settings-header">
-                <h2>$i18n{siteSettingsAdsDescription}</h2>
-              </div>
-              <settings-category-default-radio-group
-                  category="[[ContentSettingsTypes.ADS]]"
-                  allow-option-label="$i18n{siteSettingsAdsAllowed}"
-                  allow-option-icon="settings:ads"
-                  block-option-label="$i18n{siteSettingsAdsBlocked}"
-                  block-option-icon="settings:block">
-              </settings-category-default-radio-group>
-              <category-setting-exceptions
-                  category="[[ContentSettingsTypes.ADS]]"
-                  read-only-list
-                  allow-header="$i18n{siteSettingsAdsAllowedExceptions}"
-                  block-header="$i18n{siteSettingsAdsBlockedExceptions}"
-                  search-filter="[[searchFilter_]]">
-              </category-setting-exceptions>
-            </template>
-            <template is="dom-if" if="[[!enableContentSettingsRedesign_]]">
-              <category-default-setting
-                  category="[[ContentSettingsTypes.ADS]]"
-                  toggle-off-label="$i18n{siteSettingsAdsBlockRecommended}"
-                  toggle-on-label="$i18n{siteSettingsAllowed}">
-              </category-default-setting>
-              <category-setting-exceptions
-                  category="[[ContentSettingsTypes.ADS]]"
-                  read-only-list
-                  block-header="$i18n{siteSettingsBlock}"
-                  allow-header="$i18n{siteSettingsAllow}"
-                  search-filter="[[searchFilter_]]">
-              </category-setting-exceptions>
-            </template>
-          </settings-subpage>
-       </template>
-     </template>
       <template is="dom-if" route-path="/content/midiDevices" no-search>
         <settings-subpage page-title="$i18n{siteSettingsMidiDevices}"
             search-label="$i18n{siteSettingsAllSitesSearch}"
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -80,7 +80,7 @@ Polymer({
     enableSafeBrowsingSubresourceFilter_: {
       type: Boolean,
       value() {
-        return loadTimeData.getBoolean('enableSafeBrowsingSubresourceFilter');
+        return false;
       }
     },
 
--- a/chrome/browser/resources/settings/privacy_page/security_page.html
+++ b/chrome/browser/resources/settings/privacy_page/security_page.html
@@ -49,101 +49,6 @@
       <img id="banner" alt=""
           src="breeze://settings/images/safe_browsing_banner.svg">
     </picture>
-    <div id="safeBrowsingSection">
-      <h2>$i18n{safeBrowsingSectionLabel}</h2>
-      <settings-radio-group id="safeBrowsingRadioGroup" no-set-pref
-          pref="{{prefs.generated.safe_browsing}}"
-          selectable-elements="cr-radio-button, settings-collapse-radio-button"
-          on-change="onSafeBrowsingRadioChange_">
-        <settings-collapse-radio-button id="safeBrowsingEnhanced"
-            name="[[safeBrowsingSettingEnum_.ENHANCED]]"
-            pref="[[prefs.generated.safe_browsing]]"
-            label="$i18n{safeBrowsingEnhanced}"
-            sub-label="$i18n{safeBrowsingEnhancedDesc}"
-            hidden="[[!safeBrowsingEnhancedEnabled_]]"
-            on-expand-clicked="onEnhancedProtectionExpandButtonClicked_"
-            no-automatic-collapse>
-          <div slot="collapse">
-            <div class="bullet-line">
-              <iron-icon icon="cr:security"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulOne}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings20:googleg"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulTwo}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings:public"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulThree}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings20:vpn-key"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulFour}
-              </div>
-            </div>
-            <div class="bullet-line last-collapse-item">
-              <iron-icon icon="settings20:data"></iron-icon>
-              <div class="secondary cr-padded-text">
-                $i18n{safeBrowsingEnhancedBulFive}
-              </div>
-            </div>
-          </div>
-        </settings-collapse-radio-button>
-        <settings-collapse-radio-button id="safeBrowsingStandard"
-            name="[[safeBrowsingSettingEnum_.STANDARD]]"
-            pref="[[prefs.generated.safe_browsing]]"
-            label="$i18n{safeBrowsingStandard}"
-            sub-label="$i18n{safeBrowsingStandardDesc}"
-            info-opened="{{infoOpened_}}"
-            on-expand-clicked="onStandardProtectionExpandButtonClicked_"
-            no-automatic-collapse>
-          <div slot="collapse">
-            <div class="bullet-line">
-              <iron-icon icon="cr:security"></iron-icon>
-              <div class="secondary">
-                  $i18n{safeBrowsingStandardBulOne}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings20:data"></iron-icon>
-              <div class="secondary cr-padded-text">
-                  $i18n{safeBrowsingStandardBulTwo}
-              </div>
-            </div>
-          </div>
-          <div slot="noSelectionCollapse">
-            <settings-toggle-button id="safeBrowsingReportingToggle"
-                pref="{{prefs.safebrowsing.scout_reporting_enabled}}"
-                label="$i18n{safeBrowsingStandardReportingLabel}"
-                sub-label="$i18n{safeBrowsingEnableExtendedReportingDesc}"
-                on-change="onSafeBrowsingExtendedReportingChange_"
-                disabled="[[getDisabledExtendedSafeBrowsing_(
-                              prefs.generated.safe_browsing.*)]]">
-            </settings-toggle-button>
-            <settings-toggle-button id="passwordsLeakToggle"
-                label="$i18n{passwordsLeakDetectionLabel}"
-                pref="{{prefs.generated.password_leak_detection}}"
-                sub-label="[[getPasswordsLeakToggleSubLabel_(
-                              prefs.profile.password_manager_leak_detection.*,
-                              prefs.generated.password_leak_detection.*)]]">
-            </settings-toggle-button>
-          </div>
-        </settings-collapse-radio-button>
-        <settings-collapse-radio-button id="safeBrowsingDisabled" no-collapse
-            name="[[safeBrowsingSettingEnum_.DISABLED]]"
-            pref="[[prefs.generated.safe_browsing]]"
-            label="$i18n{safeBrowsingNone}"
-            sub-label="$i18n{safeBrowsingNoneDesc}">
-        </settings-collapse-radio-button>
-      </settings-radio-group>
-    </div>
     <div class="cr-row first">
       <h2>$i18n{advancedPageTitle}</h2>
     </div>
@@ -178,8 +83,3 @@
         on-click="onAdvancedProtectionProgramLinkClick_"
         external>
     </cr-link-row>
-    <template is="dom-if" if="[[showDisableSafebrowsingDialog_]]" restamp>
-      <settings-disable-safebrowsing-dialog prefs="{{prefs}}"
-          on-close="onDisableSafebrowsingDialogClose_">
-      </settings-disable-safebrowsing-dialog>
-    </template>
--- a/chrome/browser/resources/settings/privacy_page/security_page.js
+++ b/chrome/browser/resources/settings/privacy_page/security_page.js
@@ -138,14 +138,6 @@ Polymer({
 
   /** @override */
   ready() {
-    // Expand initial pref value manually because automatic
-    // expanding is disabled.
-    const prefValue = this.getPref('generated.safe_browsing').value;
-    if (prefValue === SafeBrowsingSetting.ENHANCED) {
-      this.$.safeBrowsingEnhanced.expanded = true;
-    } else if (prefValue === SafeBrowsingSetting.STANDARD) {
-      this.$.safeBrowsingStandard.expanded = true;
-    }
     this.browserProxy_ = PrivacyPageBrowserProxyImpl.getInstance();
 
     this.metricsBrowserProxy_ = MetricsBrowserProxyImpl.getInstance();
@@ -207,8 +199,7 @@ Polymer({
    * @private
    */
   getDisabledExtendedSafeBrowsing_() {
-    return this.getPref('generated.safe_browsing').value !==
-        SafeBrowsingSetting.STANDARD;
+    return true;
   },
 
   /**
--- a/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
+++ b/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
@@ -217,8 +217,6 @@ const SiteSettingsBehaviorImpl = {
         ContentSettingsTypes.BLUETOOTH_SCANNING,
         'enableExperimentalWebPlatformFeatures');
     addOrRemoveSettingWithFlag(
-        ContentSettingsTypes.ADS, 'enableSafeBrowsingSubresourceFilter');
-    addOrRemoveSettingWithFlag(
         ContentSettingsTypes.PAYMENT_HANDLER,
         'enablePaymentHandlerContentSetting');
     addOrRemoveSettingWithFlag(
--- a/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
+++ b/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
@@ -51,8 +51,7 @@ function getCategoryItemMap() {
       icon: 'settings:ads',
       enabledLabel: 'siteSettingsAllowed',
       disabledLabel: 'siteSettingsAdsBlock',
-      shouldShow: () =>
-          loadTimeData.getBoolean('enableSafeBrowsingSubresourceFilter'),
+      shouldShow: () => false,
     },
     {
       route: routes.SITE_SETTINGS_AR,
--- a/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
+++ b/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
@@ -17,7 +17,6 @@
 #include "components/prefs/testing_pref_service.h"
 #include "components/safe_browsing/content/triggers/ad_redirect_trigger.h"
 #include "components/safe_browsing/content/triggers/mock_trigger_manager.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents.h"
--- a/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
+++ b/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/consent_level.h"
@@ -62,10 +61,7 @@ void AdvancedProtectionStatusManager::Ma
 
   is_under_advanced_protection_ = core_info.is_under_advanced_protection;
 
-  if (pref_service_->HasPrefPath(prefs::kAdvancedProtectionLastRefreshInUs)) {
-    last_refreshed_ = base::Time::FromDeltaSinceWindowsEpoch(
-        base::TimeDelta::FromMicroseconds(pref_service_->GetInt64(
-            prefs::kAdvancedProtectionLastRefreshInUs)));
+  if (false) {
     if (is_under_advanced_protection_)
       ScheduleNextRefresh();
   } else {
@@ -231,20 +227,10 @@ void AdvancedProtectionStatusManager::Ca
 
 void AdvancedProtectionStatusManager::UpdateLastRefreshTime() {
   last_refreshed_ = base::Time::Now();
-  pref_service_->SetInt64(
-      prefs::kAdvancedProtectionLastRefreshInUs,
-      last_refreshed_.ToDeltaSinceWindowsEpoch().InMicroseconds());
 }
 
 bool AdvancedProtectionStatusManager::IsUnderAdvancedProtection() const {
-  if (!pref_service_->GetBoolean(prefs::kAdvancedProtectionAllowed))
-    return false;
-
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          kForceTreatUserAsAdvancedProtection))
-    return true;
-
-  return is_under_advanced_protection_;
+  return false;
 }
 
 bool AdvancedProtectionStatusManager::IsUnconsentedPrimaryAccount(
--- a/chrome/browser/safe_browsing/advanced_protection_status_manager_unittest.cc
+++ b/chrome/browser/safe_browsing/advanced_protection_status_manager_unittest.cc
@@ -10,7 +10,6 @@
 #include "base/test/task_environment.h"
 #include "build/chromeos_buildflags.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/chrome/browser/safe_browsing/android/services_delegate_android.h
+++ b/chrome/browser/safe_browsing/android/services_delegate_android.h
@@ -7,7 +7,6 @@
 
 #include "base/macros.h"
 #include "chrome/browser/safe_browsing/services_delegate.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
 namespace safe_browsing {
 
--- a/chrome/browser/safe_browsing/certificate_reporting_service.cc
+++ b/chrome/browser/safe_browsing/certificate_reporting_service.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_thread.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
--- a/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
+++ b/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
@@ -25,7 +25,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "components/variations/variations_params_manager.h"
--- a/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
@@ -43,7 +43,6 @@
 #include "components/component_updater/component_updater_service.h"
 #include "components/component_updater/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "extensions/browser/extension_registry.h"
--- a/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
@@ -44,7 +44,6 @@
 #include "components/policy/core/common/mock_configuration_policy_provider.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_test.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/channel_info.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/version_info/version_info.h"
 
 namespace safe_browsing {
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.cc
@@ -50,7 +50,6 @@
 #include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
 #include "components/safe_browsing/content/password_protection/password_protection_request.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/db/database_manager.h"
@@ -1260,14 +1259,6 @@ bool ChromePasswordProtectionService::Ha
 }
 
 void ChromePasswordProtectionService::OnWarningTriggerChanged() {
-  const base::Value* pref_value = pref_change_registrar_->prefs()->Get(
-      prefs::kPasswordProtectionWarningTrigger);
-  // If password protection is not turned off, do nothing.
-  if (static_cast<PasswordProtectionTrigger>(pref_value->GetInt()) !=
-      PASSWORD_PROTECTION_OFF) {
-    return;
-  }
-
   // Clears captured enterprise password hashes or GSuite sync password hashes.
   scoped_refptr<password_manager::PasswordStore> password_store =
       GetProfilePasswordStore();
@@ -1426,7 +1417,7 @@ PrefService* ChromePasswordProtectionSer
 }
 
 bool ChromePasswordProtectionService::IsSafeBrowsingEnabled() {
-  return ::safe_browsing::IsSafeBrowsingEnabled(*GetPrefs());
+  return false;
 }
 
 bool ChromePasswordProtectionService::IsExtendedReporting() {
@@ -1455,37 +1446,7 @@ bool ChromePasswordProtectionService::Is
 bool ChromePasswordProtectionService::IsPingingEnabled(
     LoginReputationClientRequest::TriggerType trigger_type,
     ReusedPasswordAccountType password_type) {
-  if (!IsSafeBrowsingEnabled()) {
-    return false;
-  }
-  bool extended_reporting_enabled = IsExtendedReporting();
-  if (trigger_type == LoginReputationClientRequest::PASSWORD_REUSE_EVENT) {
-    if (password_type.account_type() ==
-        ReusedPasswordAccountType::SAVED_PASSWORD) {
-      return true;
-    }
-
-    // Only override policy if password protection is off for Gmail users.
-    if (GetPasswordProtectionWarningTriggerPref(password_type) ==
-        PASSWORD_PROTECTION_OFF) {
-      return false;
-    }
-    // If the account type is UNKNOWN (i.e. AccountInfo fields could not be
-    // retrieved from server), pings should be gated by SBER.
-    if (password_type.account_type() == ReusedPasswordAccountType::UNKNOWN) {
-      return extended_reporting_enabled;
-    }
-
-// Only saved password reuse warnings are shown on Android, so other types of
-// password reuse events should be gated by extended reporting.
-#if defined(OS_ANDROID)
-    return extended_reporting_enabled;
-#else
-    return true;
-#endif
-  }
-
-  return !IsIncognito() && extended_reporting_enabled;
+  return false;
 }
 
 RequestOutcome ChromePasswordProtectionService::GetPingNotSentReason(
@@ -1680,24 +1641,6 @@ MaybeCreateNavigationThrottle(content::N
                  : nullptr;
 }
 
-PasswordProtectionTrigger
-ChromePasswordProtectionService::GetPasswordProtectionWarningTriggerPref(
-    ReusedPasswordAccountType password_type) const {
-  if (password_type.account_type() == ReusedPasswordAccountType::GMAIL ||
-      (password_type.account_type() ==
-           ReusedPasswordAccountType::SAVED_PASSWORD &&
-       base::FeatureList::IsEnabled(
-           safe_browsing::kPasswordProtectionForSavedPasswords)))
-    return PHISHING_REUSE;
-
-  bool is_policy_managed = profile_->GetPrefs()->HasPrefPath(
-      prefs::kPasswordProtectionWarningTrigger);
-  PasswordProtectionTrigger trigger_level =
-      static_cast<PasswordProtectionTrigger>(profile_->GetPrefs()->GetInteger(
-          prefs::kPasswordProtectionWarningTrigger));
-  return is_policy_managed ? trigger_level : PHISHING_REUSE;
-}
-
 bool ChromePasswordProtectionService::IsURLWhitelistedForPasswordEntry(
     const GURL& url) const {
   if (!profile_)
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.h
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.h
@@ -212,13 +212,6 @@ class ChromePasswordProtectionService :
   bool UserClickedThroughSBInterstitial(
       PasswordProtectionRequest* request) override;
 
-  // If |prefs::kPasswordProtectionWarningTrigger| is not managed by enterprise
-  // policy, this function should always return PHISHING_REUSE. Otherwise,
-  // returns the specified pref value adjusted for the given username's account
-  // type.
-  PasswordProtectionTrigger GetPasswordProtectionWarningTriggerPref(
-      ReusedPasswordAccountType password_type) const override;
-
   // If |url| matches Safe Browsing whitelist domains, password protection
   // change password URL, or password protection login URLs in the enterprise
   // policy.
--- a/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
@@ -32,7 +32,6 @@
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/content/password_protection/password_protection_request.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/password_protection/metrics_util.h"
 #include "components/security_state/core/security_state.h"
--- a/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
@@ -28,9 +28,7 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/safe_browsing/content/password_protection/password_protection_request.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_state/core/security_state.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/sync/driver/sync_service.h"
--- a/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
+++ b/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
@@ -34,7 +34,6 @@
 #include "components/enterprise/common/strings.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
@@ -35,7 +35,6 @@
 #include "components/policy/core/browser/url_util.h"
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/file_type_policies.h"
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
@@ -21,7 +21,6 @@
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/file_type_policies.h"
--- a/chrome/browser/safe_browsing/download_protection/download_protection_service_unittest.cc
+++ b/chrome/browser/safe_browsing/download_protection/download_protection_service_unittest.cc
@@ -76,7 +76,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_switches.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/db/test_database_manager.h"
--- a/chrome/browser/safe_browsing/generated_safe_browsing_pref.cc
+++ b/chrome/browser/safe_browsing/generated_safe_browsing_pref.cc
@@ -7,7 +7,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/common/extensions/api/settings_private.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
 namespace settings_api = extensions::api::settings_private;
 
@@ -18,21 +17,6 @@ const char kGeneratedSafeBrowsingPref[]
 GeneratedSafeBrowsingPref::GeneratedSafeBrowsingPref(Profile* profile)
     : profile_(profile) {
   user_prefs_registrar_.Init(profile->GetPrefs());
-  user_prefs_registrar_.Add(
-      prefs::kSafeBrowsingEnabled,
-      base::BindRepeating(
-          &GeneratedSafeBrowsingPref::OnSafeBrowsingPreferencesChanged,
-          base::Unretained(this)));
-  user_prefs_registrar_.Add(
-      prefs::kSafeBrowsingEnhanced,
-      base::BindRepeating(
-          &GeneratedSafeBrowsingPref::OnSafeBrowsingPreferencesChanged,
-          base::Unretained(this)));
-  user_prefs_registrar_.Add(
-      prefs::kSafeBrowsingScoutReportingEnabled,
-      base::BindRepeating(
-          &GeneratedSafeBrowsingPref::OnSafeBrowsingPreferencesChanged,
-          base::Unretained(this)));
 }
 
 extensions::settings_private::SetPrefResult GeneratedSafeBrowsingPref::SetPref(
@@ -48,31 +32,14 @@ extensions::settings_private::SetPrefRes
     return extensions::settings_private::SetPrefResult::PREF_TYPE_MISMATCH;
 
   // If SBER is forcefully disabled, Enhanced cannot be selected by the user.
-  const PrefService::Preference* reporting_pref =
-      profile_->GetPrefs()->FindPreference(
-          prefs::kSafeBrowsingScoutReportingEnabled);
-  const bool reporting_on = reporting_pref->GetValue()->GetBool();
-  const bool reporting_enforced = !reporting_pref->IsUserModifiable();
+  const bool reporting_on = false;
+  const bool reporting_enforced = false;
 
   if (reporting_enforced && !reporting_on &&
       selection == SafeBrowsingSetting::ENHANCED) {
     return extensions::settings_private::SetPrefResult::PREF_NOT_MODIFIABLE;
   }
 
-  // kSafeBrowsingEnabled is considered the canonical source for Safe Browsing
-  // management.
-  const PrefService::Preference* enabled_pref =
-      profile_->GetPrefs()->FindPreference(prefs::kSafeBrowsingEnabled);
-  if (!enabled_pref->IsUserModifiable()) {
-    return extensions::settings_private::SetPrefResult::PREF_NOT_MODIFIABLE;
-  }
-
-  // Update both Safe Browsing preferences to match selection.
-  profile_->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnabled,
-                                   selection != SafeBrowsingSetting::DISABLED);
-  profile_->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnhanced,
-                                   selection == SafeBrowsingSetting::ENHANCED);
-
   return extensions::settings_private::SetPrefResult::SUCCESS;
 }
 
@@ -83,10 +50,8 @@ GeneratedSafeBrowsingPref::GetPrefObject
   pref_object->key = kGeneratedSafeBrowsingPref;
   pref_object->type = extensions::api::settings_private::PREF_TYPE_NUMBER;
 
-  auto safe_browsing_enabled =
-      profile_->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled);
-  auto safe_browsing_enhanced_enabled =
-      profile_->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnhanced);
+  auto safe_browsing_enabled = false;
+  auto safe_browsing_enhanced_enabled = false;
 
   if (safe_browsing_enhanced_enabled && safe_browsing_enabled) {
     pref_object->value = std::make_unique<base::Value>(
@@ -116,29 +81,18 @@ void GeneratedSafeBrowsingPref::ApplySaf
   // three different preferences. It is possible that these may be in
   // temporarily conflicting managed states. The enabled preference is always
   // taken as the canonical source of management.
-  const PrefService::Preference* enabled_pref =
-      profile->GetPrefs()->FindPreference(prefs::kSafeBrowsingEnabled);
-  const bool enabled_enforced = !enabled_pref->IsUserModifiable();
-  const bool enabled_recommended =
-      (enabled_pref && enabled_pref->GetRecommendedValue());
-  const bool enabled_recommended_on =
-      enabled_recommended && enabled_pref->GetRecommendedValue()->GetBool();
+  const bool enabled_enforced = false;
+  const bool enabled_recommended = false;
+  const bool enabled_recommended_on = false;
 
   // The enhanced preference may have a recommended setting. This only takes
   // effect if the enabled preference also has a recommended setting.
-  const PrefService::Preference* enhanced_pref =
-      profile->GetPrefs()->FindPreference(prefs::kSafeBrowsingEnhanced);
-  const bool enhanced_recommended_on =
-      enhanced_pref->GetRecommendedValue() &&
-      enhanced_pref->GetRecommendedValue()->GetBool();
+  const bool enhanced_recommended_on = false;
 
   // A forcefully disabled reporting preference will disallow enhanced from
   // being selected and thus it must also be considered.
-  const PrefService::Preference* reporting_pref =
-      profile->GetPrefs()->FindPreference(
-          prefs::kSafeBrowsingScoutReportingEnabled);
-  const bool reporting_on = reporting_pref->GetValue()->GetBool();
-  const bool reporting_enforced = !reporting_pref->IsUserModifiable();
+  const bool reporting_on = false;
+  const bool reporting_enforced = false;
 
   if (!enabled_enforced && !enabled_recommended && !reporting_enforced) {
     // No relevant policies are applied.
@@ -148,8 +102,6 @@ void GeneratedSafeBrowsingPref::ApplySaf
   if (enabled_enforced) {
     // Preference is fully controlled.
     pref_object->enforcement = settings_api::Enforcement::ENFORCEMENT_ENFORCED;
-    extensions::settings_private::GeneratedPref::ApplyControlledByFromPref(
-        pref_object, enabled_pref);
     return;
   }
 
@@ -174,8 +126,6 @@ void GeneratedSafeBrowsingPref::ApplySaf
     // Reporting has been forcefully disabled by policy. Enhanced protection is
     // thus also implicitly disabled by the same policy.
     pref_object->enforcement = settings_api::Enforcement::ENFORCEMENT_ENFORCED;
-    extensions::settings_private::GeneratedPref::ApplyControlledByFromPref(
-        pref_object, reporting_pref);
 
     pref_object->user_selectable_values =
         std::make_unique<std::vector<std::unique_ptr<base::Value>>>();
--- a/chrome/browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
@@ -39,7 +39,6 @@
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "content/public/browser/browser_thread.h"
--- a/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc
@@ -34,7 +34,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc
@@ -42,7 +42,6 @@
 #include "components/history/core/browser/history_constants.h"
 #include "components/history/core/browser/history_database_params.h"
 #include "components/history/core/browser/history_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/incident_reporting/state_store.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/state_store.cc
@@ -13,7 +13,6 @@
 #include "chrome/browser/safe_browsing/incident_reporting/incident.h"
 #include "chrome/browser/safe_browsing/incident_reporting/platform_state_store.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
 namespace safe_browsing {
 
--- a/chrome/browser/safe_browsing/incident_reporting/state_store_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/state_store_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "components/sync_preferences/pref_service_syncable_factory.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -22,7 +22,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/triggers/trigger_manager.h"
 #include "components/security_interstitials/content/content_metrics_helper.h"
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
@@ -63,7 +63,6 @@
 #include "components/safe_browsing/content/browser/threat_details.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "components/safe_browsing/content/renderer/threat_dom_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/db/test_database_manager.h"
 #include "components/safe_browsing/core/db/util.h"
--- a/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
@@ -253,10 +253,7 @@ GURL SafeBrowsingNavigationObserverManag
 // static
 bool SafeBrowsingNavigationObserverManager::IsEnabledAndReady(
     Profile* profile) {
-  return IsSafeBrowsingEnabled(*profile->GetPrefs()) &&
-         g_browser_process->safe_browsing_service() &&
-         g_browser_process->safe_browsing_service()
-             ->navigation_observer_manager();
+  return false;
 }
 
 // static
--- a/chrome/browser/safe_browsing/safe_browsing_service.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_service.cc
@@ -89,7 +89,6 @@ base::FilePath SafeBrowsingService::GetB
 
 SafeBrowsingService::SafeBrowsingService()
     : services_delegate_(ServicesDelegate::Create(this)),
-      estimated_extended_reporting_by_prefs_(SBER_LEVEL_OFF),
       shutdown_(false),
       enabled_(false),
       enabled_by_prefs_(false) {}
@@ -234,8 +233,6 @@ TriggerManager* SafeBrowsingService::tri
 
 PasswordProtectionService* SafeBrowsingService::GetPasswordProtectionService(
     Profile* profile) const {
-  if (IsSafeBrowsingEnabled(*profile->GetPrefs()))
-    return services_delegate_->GetPasswordProtectionService(profile);
   return nullptr;
 }
 
@@ -361,9 +358,6 @@ void SafeBrowsingService::OnProfileAdded
   std::unique_ptr<PrefChangeRegistrar> registrar =
       std::make_unique<PrefChangeRegistrar>();
   registrar->Init(pref_service);
-  registrar->Add(prefs::kSafeBrowsingEnabled,
-                 base::BindRepeating(&SafeBrowsingService::RefreshState,
-                                     base::Unretained(this)));
   // ClientSideDetectionService will need to be refresh the models
   // renderers have if extended-reporting changes.
   registrar->Add(prefs::kSafeBrowsingScoutReportingEnabled,
@@ -375,14 +369,6 @@ void SafeBrowsingService::OnProfileAdded
   prefs_map_[pref_service] = std::move(registrar);
   RefreshState();
 
-  // Record the current pref state for standard protection.
-  UMA_HISTOGRAM_BOOLEAN(kSafeBrowsingEnabledHistogramName,
-                        pref_service->GetBoolean(prefs::kSafeBrowsingEnabled));
-  // Record the current pref state for enhanced protection. Enhanced protection
-  // is a subset of the standard protection. Thus, |kSafeBrowsingEnabled| count
-  // should always be more than the count of enhanced protection.
-  UMA_HISTOGRAM_BOOLEAN("SafeBrowsing.Pref.Enhanced",
-                        pref_service->GetBoolean(prefs::kSafeBrowsingEnhanced));
   // Extended Reporting metrics are handled together elsewhere.
   RecordExtendedReportingMetrics(*pref_service);
 
@@ -424,18 +410,6 @@ void SafeBrowsingService::RefreshState()
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   // Check if any profile requires the service to be active.
   enabled_by_prefs_ = false;
-  estimated_extended_reporting_by_prefs_ = SBER_LEVEL_OFF;
-  for (const auto& pref : prefs_map_) {
-    if (IsSafeBrowsingEnabled(*pref.first)) {
-      enabled_by_prefs_ = true;
-
-      ExtendedReportingLevel erl =
-          safe_browsing::GetExtendedReportingLevel(*pref.first);
-      if (erl != SBER_LEVEL_OFF) {
-        estimated_extended_reporting_by_prefs_ = erl;
-      }
-    }
-  }
 
   if (enabled_by_prefs_)
     Start();
--- a/chrome/browser/safe_browsing/safe_browsing_service.h
+++ b/chrome/browser/safe_browsing/safe_browsing_service.h
@@ -26,7 +26,6 @@
 #include "chrome/browser/profiles/profile_observer.h"
 #include "chrome/browser/safe_browsing/services_delegate.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "components/safe_browsing/core/safe_browsing_service_interface.h"
 #include "content/public/browser/browser_thread.h"
@@ -94,15 +93,6 @@ class SafeBrowsingService : public SafeB
   // Called on the main thread to let us know that the io_thread is going away.
   void ShutDown();
 
-  // NOTE(vakh): This is not the most reliable way to find out if extended
-  // reporting has been enabled. That's why it starts with estimated_. It
-  // returns true if any of the profiles have extended reporting enabled. It may
-  // be called on any thread. That can lead to a race condition, but that's
-  // acceptable.
-  ExtendedReportingLevel estimated_extended_reporting_by_prefs() const {
-    return estimated_extended_reporting_by_prefs_;
-  }
-
   // Get current enabled status. Must be called on IO thread.
   bool enabled() const {
     DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
@@ -279,10 +269,6 @@ class SafeBrowsingService : public SafeB
   // Provides phishing and malware statistics. Accessed on UI thread.
   std::unique_ptr<PingManager> ping_manager_;
 
-  // Whether SafeBrowsing Extended Reporting is enabled by the current set of
-  // profiles. Updated on the UI thread.
-  ExtendedReportingLevel estimated_extended_reporting_by_prefs_;
-
   // Whether the service has been shutdown.
   bool shutdown_;
 
--- a/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
+++ b/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
@@ -21,7 +21,6 @@
 #include "components/keyed_service/core/service_access_type.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/ping_manager.h"
@@ -134,11 +133,9 @@ bool AndroidTelemetryService::CanSendPin
     return false;
   }
 
-  if (!IsSafeBrowsingEnabled(*GetPrefs())) {
-    RecordApkDownloadTelemetryOutcome(
-        ApkDownloadTelemetryOutcome::NOT_SENT_SAFE_BROWSING_NOT_ENABLED);
-    return false;
-  }
+  RecordApkDownloadTelemetryOutcome(
+      ApkDownloadTelemetryOutcome::NOT_SENT_SAFE_BROWSING_NOT_ENABLED);
+  return false;
 
   if (profile_->IsOffTheRecord()) {
     RecordApkDownloadTelemetryOutcome(
--- a/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc
+++ b/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc
@@ -16,7 +16,6 @@
 #include "chrome/test/base/testing_profile.h"
 #include "components/download/public/common/mock_download_item.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
--- a/chrome/browser/safe_browsing/ui_manager.cc
+++ b/chrome/browser/safe_browsing/ui_manager.cc
@@ -25,7 +25,6 @@
 #include "components/no_state_prefetch/browser/prerender_contents.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/ping_manager.h"
 #include "components/security_interstitials/content/security_interstitial_tab_helper.h"
--- a/chrome/browser/safe_browsing/ui_manager_unittest.cc
+++ b/chrome/browser/safe_browsing/ui_manager_unittest.cc
@@ -16,7 +16,6 @@
 #include "chrome/test/base/scoped_testing_local_state.h"
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "components/security_interstitials/content/unsafe_resource_util.h"
 #include "components/security_interstitials/core/base_safe_browsing_error_ui.h"
--- a/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
+++ b/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
@@ -18,7 +18,6 @@
 #include "components/no_state_prefetch/common/prerender_final_status.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/content/triggers/suspicious_site_trigger.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/core/features.h"
--- a/chrome/browser/signin/account_consistency_mode_manager.cc
+++ b/chrome/browser/signin/account_consistency_mode_manager.cc
@@ -19,7 +19,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/google_api_keys.h"
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
@@ -93,7 +92,6 @@ AccountConsistencyModeManager::AccountCo
   bool signin_allowed = CanEnableDiceForBuild() &&
                         IsBrowserSigninAllowedByCommandLine() &&
                         prefs->GetBoolean(prefs::kSigninAllowedOnNextStartup);
-  prefs->SetBoolean(prefs::kSigninAllowed, signin_allowed);
 
   UMA_HISTOGRAM_BOOLEAN("Signin.SigninAllowed", signin_allowed);
 #endif
@@ -210,7 +208,7 @@ AccountConsistencyModeManager::ComputeAc
   if (profile->IsLegacySupervised())
     return AccountConsistencyMethod::kDisabled;
 
-  if (!profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed)) {
+  if (true) {
     VLOG(1) << "Desktop Identity Consistency disabled as sign-in to Chrome"
                "is not allowed";
     return AccountConsistencyMethod::kDisabled;
--- a/chrome/browser/signin/account_consistency_mode_manager_unittest.cc
+++ b/chrome/browser/signin/account_consistency_mode_manager_unittest.cc
@@ -20,7 +20,6 @@
 #include "components/prefs/testing_pref_store.h"
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/chrome/browser/signin/chrome_device_id_helper.cc
+++ b/chrome/browser/signin/chrome_device_id_helper.cc
@@ -16,7 +16,6 @@
 #include "base/logging.h"
 #include "chrome/browser/chromeos/profiles/profile_helper.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "components/user_manager/known_user.h"
 #include "components/user_manager/user_manager.h"
@@ -67,21 +66,11 @@ void MigrateSigninScopedDeviceId(Profile
     return;
   const AccountId account_id = user->GetAccountId();
   if (user_manager::known_user::GetDeviceId(account_id).empty()) {
-    const std::string legacy_device_id = profile->GetPrefs()->GetString(
-        prefs::kGoogleServicesSigninScopedDeviceId);
-    if (!legacy_device_id.empty()) {
-      // Need to move device ID from the old location to the new one, if it has
-      // not been done yet.
-      user_manager::known_user::SetDeviceId(account_id, legacy_device_id);
-    } else {
-      user_manager::known_user::SetDeviceId(
-          account_id, GenerateSigninScopedDeviceId(
-                          user_manager::UserManager::Get()
-                              ->IsUserNonCryptohomeDataEphemeral(account_id)));
-    }
+    user_manager::known_user::SetDeviceId(
+        account_id, GenerateSigninScopedDeviceId(
+                        user_manager::UserManager::Get()
+                            ->IsUserNonCryptohomeDataEphemeral(account_id)));
   }
-  profile->GetPrefs()->SetString(prefs::kGoogleServicesSigninScopedDeviceId,
-                                 std::string());
 }
 
 #endif
--- a/chrome/browser/signin/chrome_signin_client.cc
+++ b/chrome/browser/signin/chrome_signin_client.cc
@@ -36,7 +36,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/cookie_settings_util.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/access_token_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/scope_set.h"
--- a/chrome/browser/signin/chromeos_mirror_account_consistency_browsertest.cc
+++ b/chrome/browser/signin/chromeos_mirror_account_consistency_browsertest.cc
@@ -21,7 +21,6 @@
 #include "components/network_session_configurator/common/network_switches.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/signin_header_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/user_manager/user.h"
 #include "components/user_manager/user_manager.h"
 #include "content/public/test/browser_test.h"
--- a/chrome/browser/signin/dice_browsertest.cc
+++ b/chrome/browser/signin/dice_browsertest.cc
@@ -61,7 +61,6 @@
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
--- a/chrome/browser/signin/header_modification_delegate_impl.cc
+++ b/chrome/browser/signin/header_modification_delegate_impl.cc
@@ -15,7 +15,6 @@
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/sync/base/pref_names.h"
 #include "components/sync/driver/sync_service.h"
@@ -98,7 +97,7 @@ void HeaderModificationDelegateImpl::Pro
 #endif
 #if BUILDFLAG(ENABLE_DICE_SUPPORT)
       sync_service && sync_service->IsSyncFeatureEnabled(),
-      prefs->GetString(prefs::kGoogleServicesSigninScopedDeviceId),
+      std::string(),
 #endif
       cookie_settings_.get());
 }
--- a/chrome/browser/signin/mirror_browsertest.cc
+++ b/chrome/browser/signin/mirror_browsertest.cc
@@ -31,7 +31,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/dice_header_helper.h"
 #include "components/signin/core/browser/signin_header_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/common/content_client.h"
 #include "content/public/test/browser_test.h"
 #include "google_apis/gaia/gaia_urls.h"
--- a/chrome/browser/signin/signin_promo_util.cc
+++ b/chrome/browser/signin/signin_promo_util.cc
@@ -8,7 +8,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "net/base/network_change_notifier.h"
@@ -36,7 +35,7 @@ bool ShouldShowPromo(Profile* profile) {
     return false;
 
   // Don't show if sign-in is not allowed.
-  if (!original_profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed))
+  if (true)
     return false;
 
   // Display the signin promo if the user is not signed in.
--- a/chrome/browser/signin/signin_ui_util.cc
+++ b/chrome/browser/signin/signin_ui_util.cc
@@ -32,7 +32,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/consent_level.h"
--- a/chrome/browser/signin/signin_util.cc
+++ b/chrome/browser/signin/signin_util.cc
@@ -27,7 +27,6 @@
 #include "components/google/core/common/google_util.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_utils.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
@@ -218,7 +217,7 @@ void EnsurePrimaryAccountAllowedForProfi
     return;
 
   CoreAccountInfo primary_account = identity_manager->GetPrimaryAccountInfo();
-  if (profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed) &&
+  if (false &&
       signin::IsUsernameAllowedByPatternFromPrefs(
           g_browser_process->local_state(), primary_account.email)) {
     return;
--- a/chrome/browser/signin/signin_util_win.cc
+++ b/chrome/browser/signin/signin_util_win.cc
@@ -32,7 +32,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/about_signin_internals.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 
@@ -134,9 +133,6 @@ void ImportCredentialsFromProvider(Profi
                                        account_id, nullptr));
     }
   }
-
-  // Mark this profile as having been signed in with the credential provider.
-  profile->GetPrefs()->SetBoolean(prefs::kSignedInWithCredentialProvider, true);
 }
 
 // Extracts preferences to consider while signing in through credential
@@ -355,8 +351,7 @@ bool ReauthWithCredentialProviderIfPossi
   //  - The profile is already signed in.
   //  - The profile is in an auth error state.
   auto* identity_manager = IdentityManagerFactory::GetForProfile(profile);
-  if (!(profile->GetPrefs()->GetBoolean(
-            prefs::kSignedInWithCredentialProvider) &&
+  if (!(false &&
         identity_manager->HasPrimaryAccount() &&
         identity_manager->HasAccountWithRefreshTokenInPersistentErrorState(
             identity_manager->GetPrimaryAccountId()))) {
--- a/chrome/browser/signin/signin_util_win_browsertest.cc
+++ b/chrome/browser/signin/signin_util_win_browsertest.cc
@@ -29,7 +29,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/testing_browser_process.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
--- a/chrome/browser/ssl/certificate_reporting_test_utils.cc
+++ b/chrome/browser/ssl/certificate_reporting_test_utils.cc
@@ -15,7 +15,6 @@
 #include "build/build_config.h"
 #include "chrome/browser/profiles/profile.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "components/variations/variations_associated_data.h"
--- a/chrome/browser/ssl/sct_reporting_service.cc
+++ b/chrome/browser/ssl/sct_reporting_service.cc
@@ -9,7 +9,6 @@
 #include "chrome/browser/net/system_network_context_manager.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/chrome_features.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/network_service_instance.h"
 #include "content/public/browser/storage_partition.h"
 #include "net/traffic_annotation/network_traffic_annotation.h"
@@ -120,8 +119,5 @@ void SCTReportingService::SetReportingEn
 }
 
 void SCTReportingService::OnPreferenceChanged() {
-  const bool enabled = safe_browsing_service_ &&
-                       safe_browsing_service_->enabled_by_prefs() &&
-                       safe_browsing::IsExtendedReportingEnabled(pref_service_);
-  SetReportingEnabled(enabled);
+  SetReportingEnabled(false);
 }
--- a/chrome/browser/ssl/ssl_browsertest.cc
+++ b/chrome/browser/ssl/ssl_browsertest.cc
@@ -91,7 +91,6 @@
 #include "components/policy/core/common/policy_types.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/security_interstitials/content/bad_clock_blocking_page.h"
 #include "components/security_interstitials/content/captive_portal_blocking_page.h"
--- a/chrome/browser/ssl/ssl_error_controller_client.cc
+++ b/chrome/browser/ssl/ssl_error_controller_client.cc
@@ -21,7 +21,6 @@
 #include "chrome/browser/ssl/stateful_ssl_host_state_delegate_factory.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/url_constants.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/content_metrics_helper.h"
 #include "components/security_interstitials/content/settings_page_helper.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
--- a/chrome/browser/supervised_user/supervised_user_pref_store.cc
+++ b/chrome/browser/supervised_user/supervised_user_pref_store.cc
@@ -22,7 +22,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/feed/core/shared_prefs/pref_names.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "extensions/buildflags/buildflags.h"
 
 namespace {
@@ -54,10 +53,6 @@ SupervisedUserSettingsPrefMappingEntry k
         prefs::kSupervisedUserSafeSites,
     },
     {
-        supervised_users::kSigninAllowed,
-        prefs::kSigninAllowed,
-    },
-    {
         supervised_users::kUserName,
         prefs::kProfileName,
     },
@@ -123,7 +118,6 @@ void SupervisedUserPrefStore::OnNewSetti
     prefs_->SetInteger(prefs::kForceYouTubeRestrict,
                        safe_search_util::YOUTUBE_RESTRICT_MODERATE);
     prefs_->SetBoolean(prefs::kHideWebStoreIcon, false);
-    prefs_->SetBoolean(prefs::kSigninAllowed, false);
     prefs_->SetBoolean(feed::prefs::kEnableSnippets, false);
 
     // Copy supervised user settings to prefs.
--- a/chrome/browser/ui/autofill/payments/save_card_bubble_controller_impl.cc
+++ b/chrome/browser/ui/autofill/payments/save_card_bubble_controller_impl.cc
@@ -38,7 +38,6 @@
 #include "components/autofill/core/common/autofill_prefs.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/sync/driver/sync_service.h"
--- a/chrome/browser/ui/browser_command_controller.cc
+++ b/chrome/browser/ui/browser_command_controller.cc
@@ -55,7 +55,6 @@
 #include "components/dom_distiller/core/dom_distiller_features.h"
 #include "components/prefs/pref_service.h"
 #include "components/sessions/core/tab_restore_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/native_web_keyboard_event.h"
 #include "content/public/browser/navigation_controller.h"
 #include "content/public/browser/navigation_entry.h"
@@ -183,10 +182,6 @@ BrowserCommandController::BrowserCommand
           &BrowserCommandController::UpdateCommandsForFullscreenMode,
           base::Unretained(this)));
 #endif
-  pref_signin_allowed_.Init(
-      prefs::kSigninAllowed, profile()->GetOriginalProfile()->GetPrefs(),
-      base::BindRepeating(&BrowserCommandController::OnSigninAllowedPrefChange,
-                          base::Unretained(this)));
 
   InitCommandState();
 
@@ -1490,7 +1485,7 @@ void BrowserCommandController::UpdateSho
     return;
 
   command_updater_.UpdateCommandEnabled(
-      IDC_SHOW_SIGNIN, show_main_ui && pref_signin_allowed_.GetValue());
+      IDC_SHOW_SIGNIN, false);
 }
 
 // static
--- a/chrome/browser/ui/browser_command_controller.h
+++ b/chrome/browser/ui/browser_command_controller.h
@@ -215,7 +215,6 @@ class BrowserCommandController : public
 
   PrefChangeRegistrar profile_pref_registrar_;
   PrefChangeRegistrar local_pref_registrar_;
-  BooleanPrefMember pref_signin_allowed_;
 
   // In locked fullscreen mode disallow enabling/disabling commands.
   bool is_locked_fullscreen_ = false;
--- a/chrome/browser/ui/browser_command_controller_unittest.cc
+++ b/chrome/browser/ui/browser_command_controller_unittest.cc
@@ -27,7 +27,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/native_web_keyboard_event.h"
 #include "ui/events/keycodes/dom/dom_code.h"
 #include "ui/events/keycodes/keyboard_codes.h"
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -74,7 +74,6 @@
 
 #if !defined(OS_ANDROID)
 #include "chrome/browser/signin/identity_manager_factory.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #endif
 
@@ -497,13 +496,7 @@ void ShowBrowserSignin(Browser* browser,
 
 void ShowBrowserSigninOrSettings(Browser* browser,
                                  signin_metrics::AccessPoint access_point) {
-  Profile* original_profile = browser->profile()->GetOriginalProfile();
-  DCHECK(original_profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed));
-  if (IdentityManagerFactory::GetForProfile(original_profile)
-          ->HasPrimaryAccount())
-    ShowSettings(browser);
-  else
-    ShowBrowserSignin(browser, access_point, signin::ConsentLevel::kSync);
+  ShowSettings(browser);
 }
 #endif
 
--- a/chrome/browser/ui/views/page_info/page_info_bubble_view_sync_browsertest.cc
+++ b/chrome/browser/ui/views/page_info/page_info_bubble_view_sync_browsertest.cc
@@ -17,7 +17,6 @@
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/safe_browsing/core/password_protection/metrics_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
--- a/chrome/browser/ui/views/profiles/profile_menu_view.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view.cc
@@ -50,7 +50,6 @@
 #include "chrome/grit/generated_resources.h"
 #include "chrome/grit/theme_resources.h"
 #include "components/signin/core/browser/signin_error_controller.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/consent_level.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "components/strings/grit/components_strings.h"
@@ -566,11 +565,6 @@ void ProfileMenuView::BuildAutofillButto
 
 void ProfileMenuView::BuildSyncInfo() {
   Profile* profile = browser()->profile();
-  // Only show the sync info if signin and sync are allowed.
-  if (!profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed) ||
-      !ProfileSyncServiceFactory::IsSyncAllowed(profile)) {
-    return;
-  }
 
   signin::IdentityManager* identity_manager =
       IdentityManagerFactory::GetForProfile(profile);
--- a/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
@@ -51,7 +51,6 @@
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/autofill/core/common/autofill_payments_features.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/consent_level.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/sync/driver/sync_service.h"
--- a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
+++ b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
@@ -116,7 +116,6 @@ PasswordReuseModalWarningDialog::Passwor
     OnWarningDone done_callback)
     : content::WebContentsObserver(web_contents),
       done_callback_(std::move(done_callback)),
-      service_(service),
       url_(web_contents->GetLastCommittedURL()),
       password_type_(password_type) {
   bool show_check_passwords = false;
@@ -156,31 +155,13 @@ PasswordReuseModalWarningDialog::Passwor
   SetCancelCallback(make_done_callback(WarningAction::IGNORE_WARNING));
   SetCloseCallback(make_done_callback(WarningAction::CLOSE));
 
-  // |service| maybe NULL in tests.
-  if (service_)
-    service_->AddObserver(this);
-
-  std::vector<size_t> placeholder_offsets;
-
-  if (password_type.account_type() ==
-      ReusedPasswordAccountType::SAVED_PASSWORD) {
-    const base::string16 message_body =
-        service_->GetWarningDetailText(password_type, &placeholder_offsets);
-
-    CreateSavedPasswordReuseModalWarningDialog(
-        message_body, service_->GetPlaceholdersForSavedPasswordWarningText(),
-        placeholder_offsets);
-  } else {
-    views::Label* message_body_label = CreateMessageBodyLabel(
-        l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
-    CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
-  }
+  views::Label* message_body_label = CreateMessageBodyLabel(
+      l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
+  CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
   modal_construction_start_time_ = base::TimeTicks::Now();
 }
 
 PasswordReuseModalWarningDialog::~PasswordReuseModalWarningDialog() {
-  if (service_)
-    service_->RemoveObserver(this);
   LogModalWarningDialogLifetime(modal_construction_start_time_);
 }
 
--- a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
+++ b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
@@ -58,7 +58,6 @@ class PasswordReuseModalWarningDialog
 
  private:
   OnWarningDone done_callback_;
-  ChromePasswordProtectionService* service_;
   const GURL url_;
   const ReusedPasswordAccountType password_type_;
 
--- a/chrome/browser/ui/views/sync/inline_login_ui_browsertest.cc
+++ b/chrome/browser/ui/views/sync/inline_login_ui_browsertest.cc
@@ -43,7 +43,6 @@
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_process_host.h"
--- a/chrome/browser/ui/webui/app_launcher_login_handler.cc
+++ b/chrome/browser/ui/webui/app_launcher_login_handler.cc
@@ -31,7 +31,6 @@
 #include "chrome/grit/generated_resources.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/consent_level.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/web_contents.h"
@@ -168,10 +167,7 @@ void AppLauncherLoginHandler::UpdateLogi
   } else {
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
     // Chromeos does not show this status header.
-    bool is_signin_allowed =
-        profile->GetOriginalProfile()->GetPrefs()->GetBoolean(
-            prefs::kSigninAllowed);
-    if (!profile->IsLegacySupervised() && is_signin_allowed) {
+    if (!profile->IsLegacySupervised() && false) {
       base::string16 signed_in_link = l10n_util::GetStringUTF16(
           IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_LINK);
       signed_in_link =
@@ -209,8 +205,6 @@ bool AppLauncherLoginHandler::ShouldShow
   // UI and the avatar menu don't exist on that platform.
   return false;
 #else
-  bool is_signin_allowed =
-      profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
-  return !profile->IsOffTheRecord() && is_signin_allowed;
+  return false;
 #endif
 }
--- a/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
@@ -37,7 +37,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/download/public/common/download_item.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/render_process_host.h"
--- a/chrome/browser/ui/webui/management/management_ui_handler.cc
+++ b/chrome/browser/ui/webui/management/management_ui_handler.cc
@@ -26,7 +26,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
--- a/chrome/browser/ui/webui/new_tab_page/promo_browser_command/promo_browser_command_handler.cc
+++ b/chrome/browser/ui/webui/new_tab_page/promo_browser_command/promo_browser_command_handler.cc
@@ -18,7 +18,6 @@
 #include "chrome/common/webui_url_constants.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
 #include "components/safe_browsing/core/common/safe_browsing_policy_handler.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "ui/base/page_transition_types.h"
 #include "ui/base/window_open_disposition.h"
 
@@ -47,24 +46,6 @@ void PromoBrowserCommandHandler::CanShow
     promo_browser_command::mojom::Command command_id,
     CanShowPromoWithCommandCallback callback) {
   bool can_show = false;
-  switch (static_cast<Command>(command_id)) {
-    case Command::kUnknownCommand:
-      // Nothing to do.
-      break;
-    case Command::kOpenSafetyCheck:
-      can_show = chrome::enterprise_util::HasBrowserPoliciesApplied(profile_);
-      break;
-    case Command::kOpenSafeBrowsingEnhancedProtectionSettings: {
-      bool managed = safe_browsing::SafeBrowsingPolicyHandler::
-          IsSafeBrowsingProtectionLevelSetByPolicy(profile_->GetPrefs());
-      bool already_enabled =
-          safe_browsing::IsEnhancedProtectionEnabled(*(profile_->GetPrefs()));
-      can_show = !managed && !already_enabled;
-    } break;
-    default:
-      NOTREACHED() << "Unspecified behavior for command " << command_id;
-      break;
-  }
   std::move(callback).Run(can_show);
 }
 
--- a/chrome/browser/ui/webui/profile_info_watcher.cc
+++ b/chrome/browser/ui/webui/profile_info_watcher.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 
 ProfileInfoWatcher::ProfileInfoWatcher(Profile* profile,
@@ -25,11 +24,6 @@ ProfileInfoWatcher::ProfileInfoWatcher(P
   // The profile_manager might be NULL in testing environments.
   if (profile_manager)
     profile_manager->GetProfileAttributesStorage().AddObserver(this);
-
-  signin_allowed_pref_.Init(
-      prefs::kSigninAllowed, profile_->GetPrefs(),
-      base::BindRepeating(&ProfileInfoWatcher::RunCallback,
-                          base::Unretained(this)));
 }
 
 ProfileInfoWatcher::~ProfileInfoWatcher() {
--- a/chrome/browser/ui/webui/profile_info_watcher.h
+++ b/chrome/browser/ui/webui/profile_info_watcher.h
@@ -45,8 +45,6 @@ class ProfileInfoWatcher : public Profil
   // Called when the authenticated username changes.
   base::RepeatingClosure callback_;
 
-  BooleanPrefMember signin_allowed_pref_;
-
   DISALLOW_COPY_AND_ASSIGN(ProfileInfoWatcher);
 };
 
--- a/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
+++ b/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
@@ -15,7 +15,6 @@
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/browser_resources.h"
 #include "components/safe_browsing/content/password_protection/password_protection_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/password_protection/metrics_util.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/strings/grit/components_strings.h"
--- a/chrome/browser/ui/webui/settings/people_handler.cc
+++ b/chrome/browser/ui/webui/settings/people_handler.cc
@@ -42,7 +42,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/signin_error_controller.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/consent_level.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
@@ -328,10 +327,6 @@ void PeopleHandler::RegisterMessages() {
 void PeopleHandler::OnJavascriptAllowed() {
   PrefService* prefs = profile_->GetPrefs();
   profile_pref_registrar_.Init(prefs);
-  profile_pref_registrar_.Add(
-      prefs::kSigninAllowed,
-      base::BindRepeating(&PeopleHandler::UpdateSyncStatus,
-                          base::Unretained(this)));
 
   signin::IdentityManager* identity_manager(
       IdentityManagerFactory::GetInstance()->GetForProfile(profile_));
--- a/chrome/browser/ui/webui/settings/safety_check_handler.cc
+++ b/chrome/browser/ui/webui/settings/safety_check_handler.cc
@@ -26,7 +26,6 @@
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/version_info/version_info.h"
 #include "content/public/browser/browser_context.h"
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -65,7 +65,6 @@
 #include "components/password_manager/core/browser/manage_passwords_referrer.h"
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/strings/grit/components_chromium_strings.h"
 #include "components/strings/grit/components_strings.h"
@@ -1322,42 +1321,6 @@ void AddPrivacyStrings(content::WebUIDat
       {"clearBrowsingData", IDS_SETTINGS_CLEAR_BROWSING_DATA},
       {"clearBrowsingDataDescription", IDS_SETTINGS_CLEAR_DATA_DESCRIPTION},
       {"titleAndCount", IDS_SETTINGS_TITLE_AND_COUNT},
-      {"safeBrowsingEnableExtendedReporting",
-       IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING},
-      {"safeBrowsingEnableExtendedReportingDesc",
-       IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC},
-      {"safeBrowsingEnhanced", IDS_SETTINGS_SAFEBROWSING_ENHANCED},
-      {"safeBrowsingEnhancedDesc", IDS_SETTINGS_SAFEBROWSING_ENHANCED_DESC},
-      {"safeBrowsingEnhancedBulOne",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_ONE},
-      {"safeBrowsingEnhancedBulTwo",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_TWO},
-      {"safeBrowsingEnhancedBulThree",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_THREE},
-      {"safeBrowsingEnhancedBulFour",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FOUR},
-      {"safeBrowsingEnhancedBulFive",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FIVE},
-      {"safeBrowsingStandard", IDS_SETTINGS_SAFEBROWSING_STANDARD},
-      {"safeBrowsingStandardDesc", IDS_SETTINGS_SAFEBROWSING_STANDARD_DESC},
-      {"safeBrowsingStandardBulOne",
-       IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_ONE},
-      {"safeBrowsingStandardBulTwo",
-       IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_TWO},
-      {"safeBrowsingStandardReportingLabel",
-       IDS_SETTINGS_SAFEBROWSING_STANDARD_HELP_IMPROVE},
-      {"safeBrowsingNone", IDS_SETTINGS_SAFEBROWSING_NONE},
-      {"safeBrowsingNoneDesc", IDS_SETTINGS_SAFEBROWSING_NONE_DESC},
-      {"safeBrowsingDisableDialog",
-       IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_TITLE},
-      {"safeBrowsingDisableDialogDesc",
-       IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_DESC},
-      {"safeBrowsingDisableDialogConfirm",
-       IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_CONFIRM},
-      {"safeBrowsingEnableProtection",
-       IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION},
-      {"safeBrowsingEnableProtectionDesc",
-       IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC},
       {"safeBrowsingSectionLabel", IDS_SETTINGS_SAFEBROWSING_SECTION_LABEL},
       {"syncAndGoogleServicesPrivacyDescription",
        IDS_SETTINGS_SYNC_AND_GOOGLE_SERVICES_PRIVACY_DESC_UNIFIED_CONSENT},
@@ -2238,11 +2201,6 @@ void AddSiteSettingsStrings(content::Web
   AddLocalizedStringsBulk(html_source, kSensorsLocalizedStrings);
 
   html_source->AddBoolean(
-      "enableSafeBrowsingSubresourceFilter",
-      base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter));
-
-  html_source->AddBoolean(
       "enableBlockAutoplayContentSetting",
       base::FeatureList::IsEnabled(media::kAutoplayDisableSettings));
 
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -70,7 +70,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/core/features.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/url_data_source.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_ui.h"
@@ -247,9 +246,7 @@ SettingsUI::SettingsUI(content::WebUI* w
         std::make_unique<IncompatibleApplicationsHandler>());
 #endif  // OS_WIN && BUILDFLAG(GOOGLE_CHROME_BRANDING)
 
-  html_source->AddBoolean("signinAllowed", !profile->IsGuestSession() &&
-                                               profile->GetPrefs()->GetBoolean(
-                                                   prefs::kSigninAllowed));
+  html_source->AddBoolean("signinAllowed", false);
 
   html_source->AddBoolean(
       "safeBrowsingEnhancedEnabled",
--- a/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
+++ b/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
@@ -44,7 +44,6 @@
 #include "components/policy/core/common/management/platform_management_service.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
@@ -250,8 +249,7 @@ DiceTurnSyncOnHelper::DiceTurnSyncOnHelp
   // last authenticated account of the current profile, then Chrome will show a
   // confirmation dialog before starting sync.
   // TODO(skym): Warn for high risk upgrade scenario (https://crbug.com/572754).
-  std::string last_email =
-      profile_->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername);
+  std::string last_email;
   delegate_->ShowMergeSyncDataConfirmation(
       last_email, account_info_.email,
       base::BindOnce(&DiceTurnSyncOnHelper::OnMergeAccountConfirmation,
--- a/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper_unittest.cc
+++ b/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper_unittest.cc
@@ -34,7 +34,6 @@
 #include "components/policy/core/common/management/scoped_management_service_override_for_testing.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync/driver/mock_sync_service.h"
--- a/chrome/browser/ui/webui/signin/inline_login_handler.cc
+++ b/chrome/browser/ui/webui/signin/inline_login_handler.cc
@@ -27,7 +27,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/metrics/metrics_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_ui.h"
@@ -124,8 +123,6 @@ void InlineLoginHandler::ContinueHandleI
   std::string default_email;
   if (reason == signin_metrics::Reason::REASON_SIGNIN_PRIMARY_ACCOUNT ||
       reason == signin_metrics::Reason::REASON_FORCED_SIGNIN_PRIMARY_ACCOUNT) {
-    default_email =
-        profile->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername);
   } else {
     if (!net::GetValueForKeyInQuery(current_url, "email", &default_email))
       default_email.clear();
--- a/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
+++ b/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
@@ -66,7 +66,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/about_signin_internals.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/accounts_cookie_mutator.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
@@ -273,11 +272,6 @@ void OnSyncSetupComplete(Profile* profil
     scoped_refptr<password_manager::PasswordStore> password_store =
         PasswordStoreFactory::GetForProfile(profile,
                                             ServiceAccessType::EXPLICIT_ACCESS);
-    password_store->SaveGaiaPasswordHash(
-        username, base::UTF8ToUTF16(password),
-        /*is_primary_account_=*/true,
-        password_manager::metrics_util::GaiaPasswordHashChange::
-            SAVED_ON_CHROME_SIGNIN);
 
     if (profiles::IsLockAvailable(profile))
       LocalAuth::SetLocalAuthCredentials(profile, password);
--- a/chrome/browser/ui/webui/signin/signin_error_ui.cc
+++ b/chrome/browser/ui/webui/signin/signin_error_ui.cc
@@ -22,7 +22,6 @@
 #include "chrome/grit/browser_resources.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/web_ui.h"
 #include "content/public/browser/web_ui_data_source.h"
@@ -108,9 +107,7 @@ void SigninErrorUI::Initialize(Browser*
   if (is_profile_blocked) {
     source->AddLocalizedString("profileBlockedMessage",
                                IDS_OLD_PROFILES_DISABLED_MESSAGE);
-    std::string allowed_domain = signin_ui_util::GetAllowedDomain(
-        g_browser_process->local_state()->GetString(
-            prefs::kGoogleServicesUsernamePattern));
+    std::string allowed_domain;
     if (allowed_domain.empty()) {
       source->AddLocalizedString(
           "profileBlockedAddPersonSuggestion",
--- a/chrome/browser/ui/webui/signin/signin_utils_desktop.cc
+++ b/chrome/browser/ui/webui/signin/signin_utils_desktop.cc
@@ -18,7 +18,6 @@
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/guest_view/browser/guest_view_manager.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_utils.h"
 #include "google_apis/gaia/gaia_auth_util.h"
@@ -35,7 +34,7 @@ bool CanOfferSignin(Profile* profile,
   if (!profile)
     return false;
 
-  if (!profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed))
+  if (true)
     return false;
 
   if (!ChromeSigninClient::ProfileAllowsSigninCookies(profile))
@@ -110,8 +109,7 @@ bool CanOfferSignin(Profile* profile,
     if (signin_util::IsForceSigninEnabled() &&
         IsCrossAccountError(profile, email, gaia_id)) {
       if (error_message) {
-        std::string last_email =
-            profile->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername);
+        std::string last_email;
         error_message->assign(l10n_util::GetStringFUTF8(
             IDS_SYNC_USED_PROFILE_ERROR, base::UTF8ToUTF16(last_email)));
       }
--- a/chrome/browser/ui/webui/welcome/welcome_ui.cc
+++ b/chrome/browser/ui/webui/welcome/welcome_ui.cc
@@ -23,7 +23,6 @@
 #include "chrome/grit/welcome_resources.h"
 #include "chrome/grit/welcome_resources_map.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/strings/grit/components_strings.h"
 #include "net/base/url_util.h"
 #include "ui/base/webui/web_ui_util.h"
@@ -189,7 +188,7 @@ WelcomeUI::WelcomeUI(content::WebUI* web
       "returningUserModules",
       welcome::GetModules(profile).FindKey("returning-user")->GetString());
   html_source->AddBoolean(
-      "signinAllowed", profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed));
+      "signinAllowed", false);
   html_source->SetRequestFilter(
       base::BindRepeating(&ShouldHandleRequestCallback,
                           weak_ptr_factory_.GetWeakPtr()),
--- a/chrome/browser/unified_consent/unified_consent_service_factory.cc
+++ b/chrome/browser/unified_consent/unified_consent_service_factory.cc
@@ -13,7 +13,6 @@
 #include "components/embedder_support/pref_names.h"
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
 #include "components/prefs/pref_registry_simple.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "components/unified_consent/unified_consent_metrics.h"
@@ -35,7 +34,6 @@ namespace {
 std::vector<std::string> GetSyncedServicePrefNames() {
   return {
     prefs::kSearchSuggestEnabled, embedder_support::kAlternateErrorPagesEnabled,
-        prefs::kSafeBrowsingEnabled, prefs::kSafeBrowsingScoutReportingEnabled,
         spellcheck::prefs::kSpellCheckUseSpellingService,
 #if defined(OS_ANDROID)
         prefs::kContextualSearchEnabled
--- a/chrome/common/extensions/api/privacy.json
+++ b/chrome/common/extensions/api/privacy.json
@@ -63,16 +63,6 @@
             "value": ["passwordSavingEnabled", {"type":"boolean"}],
             "description": "If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to <code>true</code>."
           },
-          "safeBrowsingEnabled": {
-            "$ref": "types.ChromeSetting",
-            "value": ["safeBrowsingEnabled", {"type":"boolean"}],
-            "description": "If enabled, Chrome does its best to protect you from phishing and malware. This preference's value is a boolean, defaulting to <code>true</code>."
-          },
-          "safeBrowsingExtendedReportingEnabled": {
-            "$ref": "types.ChromeSetting",
-            "value": ["safeBrowsingExtendedReportingEnabled", {"type":"boolean"}],
-            "description": "If enabled, Chrome will send additional information to Google when SafeBrowsing blocks a page, such as the content of the blocked page. This preference's value is a boolean, defaulting to <code>false</code>."
-          },
           "searchSuggestEnabled": {
             "$ref": "types.ChromeSetting",
             "value": ["searchSuggestEnabled", {"type":"boolean"}],
--- a/components/password_manager/core/browser/leak_detection_delegate.cc
+++ b/components/password_manager/core/browser/leak_detection_delegate.cc
@@ -22,7 +22,6 @@
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
 
 namespace password_manager {
@@ -166,28 +165,7 @@ void LeakDetectionDelegate::OnError(Leak
 
 bool CanStartLeakCheck(const PrefService& prefs,
                        const PasswordManagerClient* client) {
-  const bool is_leak_protection_on =
-      prefs.GetBoolean(password_manager::prefs::kPasswordLeakDetectionEnabled);
-
-  // Leak detection can only start if:
-  // 1. The user has not opted out and Safe Browsing is turned on, or
-  // 2. The user is an enhanced protection user
-  safe_browsing::SafeBrowsingState sb_state =
-      safe_browsing::GetSafeBrowsingState(prefs);
-  switch (sb_state) {
-    case safe_browsing::NO_SAFE_BROWSING:
-      LogString(client, Logger::STRING_LEAK_DETECTION_DISABLED_SAFE_BROWSING);
-      return false;
-    case safe_browsing::STANDARD_PROTECTION:
-      if (!is_leak_protection_on)
-        LogString(client, Logger::STRING_LEAK_DETECTION_DISABLED_FEATURE);
-      return is_leak_protection_on;
-    case safe_browsing::ENHANCED_PROTECTION:
-      // feature is on.
-      break;
-  }
-
-  return true;
+  return false;
 }
 
 }  // namespace password_manager
--- a/components/password_manager/core/browser/password_bubble_experiment.cc
+++ b/components/password_manager/core/browser/password_bubble_experiment.cc
@@ -17,7 +17,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync/driver/sync_service.h"
 #include "components/sync/driver/sync_user_settings.h"
 
@@ -72,9 +71,6 @@ bool ShouldShowChromeSignInPasswordPromo
     return false;
   }
 
-  if (!prefs->GetBoolean(prefs::kSigninAllowed))
-    return false;
-
   if (!sync_service ||
       sync_service->HasDisableReason(
           syncer::SyncService::DISABLE_REASON_PLATFORM_OVERRIDE) ||
--- a/components/password_manager/core/browser/password_reuse_detector.cc
+++ b/components/password_manager/core/browser/password_reuse_detector.cc
@@ -14,7 +14,6 @@
 #include "components/password_manager/core/browser/password_hash_data.h"
 #include "components/password_manager/core/browser/password_reuse_detector_consumer.h"
 #include "components/password_manager/core/browser/psl_matching_helper.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 #include "google_apis/gaia/gaia_urls.h"
 #include "url/origin.h"
@@ -178,9 +177,7 @@ PasswordReuseDetector::CheckNonGaiaEnter
   // Skips password reuse check if |domain| matches enterprise login URL or
   // enterprise change password URL.
   GURL page_url(domain);
-  if (enterprise_password_urls_.has_value() &&
-      safe_browsing::MatchesURLList(page_url,
-                                    enterprise_password_urls_.value())) {
+  if (enterprise_password_urls_.has_value()) {
     return base::nullopt;
   }
 
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -43,7 +43,6 @@
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/sync/model_impl/client_tag_based_model_type_processor.h"
 #include "components/sync/model_impl/proxy_model_type_controller_delegate.h"
 
@@ -660,15 +659,6 @@ void PasswordStore::SchedulePasswordHash
 }
 
 void PasswordStore::ScheduleEnterprisePasswordURLUpdate() {
-  std::vector<GURL> enterprise_login_urls;
-  safe_browsing::GetPasswordProtectionLoginURLsPref(*prefs_,
-                                                    &enterprise_login_urls);
-  GURL enterprise_change_password_url =
-      safe_browsing::GetPasswordProtectionChangePasswordURLPref(*prefs_);
-
-  ScheduleTask(base::BindOnce(&PasswordStore::SaveEnterprisePasswordURLs, this,
-                              std::move(enterprise_login_urls),
-                              std::move(enterprise_change_password_url)));
 }
 
 PasswordStore::~PasswordStore() {
--- a/components/password_manager/core/browser/password_sync_util.cc
+++ b/components/password_manager/core/browser/password_sync_util.cc
@@ -8,7 +8,6 @@
 #include "build/build_config.h"
 #include "components/password_manager/core/browser/password_form.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/sync/base/user_selectable_type.h"
 #include "components/sync/driver/sync_user_settings.h"
@@ -85,11 +84,6 @@ bool IsGaiaCredentialPage(const std::str
 
 bool ShouldSaveEnterprisePasswordHash(const PasswordForm& form,
                                       const PrefService& prefs) {
-  if (base::FeatureList::IsEnabled(features::kPasswordReuseDetectionEnabled)) {
-    return safe_browsing::MatchesPasswordProtectionLoginURL(form.url, prefs) ||
-           safe_browsing::MatchesPasswordProtectionChangePasswordURL(form.url,
-                                                                     prefs);
-  }
   return false;
 }
 
--- a/components/password_manager/core/browser/sync_credentials_filter_unittest.cc
+++ b/components/password_manager/core/browser/sync_credentials_filter_unittest.cc
@@ -30,7 +30,6 @@
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace password_manager {
--- a/components/safe_browsing/content/base_blocking_page.cc
+++ b/components/safe_browsing/content/base_blocking_page.cc
@@ -12,7 +12,6 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
 #include "components/safe_browsing/content/safe_browsing_controller_client.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/settings_page_helper.h"
--- a/components/safe_browsing/content/browser/client_side_detection_service.cc
+++ b/components/safe_browsing/content/browser/client_side_detection_service.cc
@@ -21,7 +21,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/client_side_detection_host.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/proto/client_model.pb.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
--- a/components/safe_browsing/content/password_protection/password_protection_service.cc
+++ b/components/safe_browsing/content/password_protection/password_protection_service.cc
@@ -383,8 +383,7 @@ void PasswordProtectionServiceBase::Hist
 
 bool PasswordProtectionServiceBase::IsWarningEnabled(
     ReusedPasswordAccountType password_type) {
-  return GetPasswordProtectionWarningTriggerPref(password_type) ==
-         PHISHING_REUSE;
+  return false;
 }
 
 // static
--- a/components/safe_browsing/content/password_protection/password_protection_service.h
+++ b/components/safe_browsing/content/password_protection/password_protection_service.h
@@ -25,7 +25,6 @@
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "components/safe_browsing/core/browser/referrer_chain_provider.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/core/password_protection/metrics_util.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
@@ -189,10 +188,6 @@ class PasswordProtectionServiceBase : pu
   // Returns if the warning UI is enabled.
   bool IsWarningEnabled(ReusedPasswordAccountType password_type);
 
-  // Returns the pref value of password protection warning trigger.
-  virtual PasswordProtectionTrigger GetPasswordProtectionWarningTriggerPref(
-      ReusedPasswordAccountType password_type) const = 0;
-
   // If |url| matches Safe Browsing whitelist domains, password protection
   // change password URL, or password protection login URLs in the enterprise
   // policy.
--- a/components/safe_browsing/content/triggers/suspicious_site_trigger_unittest.cc
+++ b/components/safe_browsing/content/triggers/suspicious_site_trigger_unittest.cc
@@ -11,7 +11,6 @@
 #include "build/build_config.h"
 #include "components/prefs/testing_pref_service.h"
 #include "components/safe_browsing/content/triggers/mock_trigger_manager.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_task_environment.h"
 #include "content/public/test/navigation_simulator.h"
 #include "content/public/test/test_renderer_host.h"
--- a/components/safe_browsing/content/web_ui/safe_browsing_ui.cc
+++ b/components/safe_browsing/content/web_ui/safe_browsing_ui.cc
@@ -29,7 +29,6 @@
 #include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/core/browser/referrer_chain_provider.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "services/network/public/mojom/cookie_manager.mojom.h"
@@ -1580,9 +1579,7 @@ void SafeBrowsingUIHandler::GetPrefs(con
   AllowJavascript();
   std::string callback_id;
   args->GetString(0, &callback_id);
-  ResolveJavascriptCallback(base::Value(callback_id),
-                            safe_browsing::GetSafeBrowsingPreferencesList(
-                                user_prefs::UserPrefs::Get(browser_context_)));
+  ResolveJavascriptCallback(base::Value(callback_id), base::ListValue());
 }
 
 void SafeBrowsingUIHandler::GetCookie(const base::ListValue* args) {
--- a/components/safe_browsing/core/common/BUILD.gn
+++ b/components/safe_browsing/core/common/BUILD.gn
@@ -6,21 +6,8 @@ import("//build/config/features.gni")
 import("//components/safe_browsing/buildflags.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 
-static_library("safe_browsing_prefs") {
-  sources = [
-    "safe_browsing_prefs.cc",
-    "safe_browsing_prefs.h",
-  ]
-
-  deps = [
-    "//components/pref_registry:pref_registry",
-    "//components/prefs",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:thread_utils",
-    "//net:net",
-  ]
-
-  public_deps = [ "//base" ]
+group("safe_browsing_prefs") {
+  # SafeBrowsing prefs are disabled
 }
 
 source_set("safe_browsing_policy_handler") {
--- a/components/safe_browsing/core/common/safe_browsing_policy_handler.cc
+++ b/components/safe_browsing/core/common/safe_browsing_policy_handler.cc
@@ -12,7 +12,6 @@
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 
 namespace safe_browsing {
@@ -172,34 +171,14 @@ void SafeBrowsingPolicyHandler::ApplyPol
 
   if (!value.has_value())
     return;
-
-  switch (value.value()) {
-    case ProtectionLevel::kNoProtection:
-      prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-      prefs->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
-      return;
-    case ProtectionLevel::kStandardProtection:
-      prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-      prefs->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
-      return;
-    case ProtectionLevel::kEnhancedProtection:
-      // |kSafeBrowsingEnhanced| is enabled, but so is
-      // |kSafeBrowsingEnabled| because the extensions API should see Safe
-      // Browsing as enabled. See https://crbug.com/1064722 for more background.
-      prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-      prefs->SetBoolean(prefs::kSafeBrowsingEnhanced, true);
-      return;
-  }
 }
 
 // static
 SafeBrowsingPolicyHandler::ProtectionLevel
 SafeBrowsingPolicyHandler::GetSafeBrowsingProtectionLevel(
     const PrefService* pref_sevice) {
-  bool safe_browsing_enhanced =
-      pref_sevice->GetBoolean(prefs::kSafeBrowsingEnhanced);
-  bool safe_browsing_enabled =
-      pref_sevice->GetBoolean(prefs::kSafeBrowsingEnabled);
+  bool safe_browsing_enhanced = false;
+  bool safe_browsing_enabled = false;
 
   if (safe_browsing_enhanced)
     return ProtectionLevel::kEnhancedProtection;
@@ -213,10 +192,8 @@ SafeBrowsingPolicyHandler::GetSafeBrowsi
 // static
 bool SafeBrowsingPolicyHandler::IsSafeBrowsingProtectionLevelSetByPolicy(
     const PrefService* pref_service) {
-  bool is_safe_browsing_enabled_managed =
-      pref_service->IsManagedPreference(prefs::kSafeBrowsingEnabled);
-  bool is_safe_browsing_enhanced_managed =
-      pref_service->IsManagedPreference(prefs::kSafeBrowsingEnhanced);
+  bool is_safe_browsing_enabled_managed = false;
+  bool is_safe_browsing_enhanced_managed = false;
   DCHECK_EQ(is_safe_browsing_enabled_managed,
             is_safe_browsing_enhanced_managed);
   return is_safe_browsing_enabled_managed && is_safe_browsing_enhanced_managed;
--- a/components/safe_browsing/core/common/safe_browsing_prefs_unittest.cc
+++ b/components/safe_browsing/core/common/safe_browsing_prefs_unittest.cc
@@ -12,7 +12,6 @@
 #include "build/build_config.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/test_task_environment.h"
 #include "components/safe_browsing/core/features.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/safe_browsing/core/db/hit_report.h
+++ b/components/safe_browsing/core/db/hit_report.h
@@ -7,7 +7,6 @@
 #ifndef COMPONENTS_SAFE_BROWSING_CORE_DB_HIT_REPORT_H_
 #define COMPONENTS_SAFE_BROWSING_CORE_DB_HIT_REPORT_H_
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "url/gurl.h"
 
@@ -45,7 +44,6 @@ struct HitReport {
   // NOTE(vakh): Unused at the moment, but may be used later.
   std::string population_id;
 
-  ExtendedReportingLevel extended_reporting_level;
   bool is_enhanced_protection = false;
   bool is_metrics_reporting_active;
 
--- a/components/safe_browsing/core/db/util.h
+++ b/components/safe_browsing/core/db/util.h
@@ -18,7 +18,6 @@
 #include "base/strings/string_piece.h"
 #include "base/time/time.h"
 #include "base/trace_event/traced_value.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 
 namespace safe_browsing {
--- a/components/safe_browsing/core/db/v4_local_database_manager.cc
+++ b/components/safe_browsing/core/db/v4_local_database_manager.cc
@@ -256,10 +256,9 @@ const V4LocalDatabaseManager*
 
 // static
 scoped_refptr<V4LocalDatabaseManager> V4LocalDatabaseManager::Create(
-    const base::FilePath& base_path,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    const base::FilePath& base_path) {
   return base::WrapRefCounted(new V4LocalDatabaseManager(
-      base_path, extended_reporting_level_callback, nullptr));
+      base_path, nullptr));
 }
 
 void V4LocalDatabaseManager::CollectDatabaseManagerInfo(
@@ -281,10 +280,8 @@ void V4LocalDatabaseManager::CollectData
 
 V4LocalDatabaseManager::V4LocalDatabaseManager(
     const base::FilePath& base_path,
-    ExtendedReportingLevelCallback extended_reporting_level_callback,
     scoped_refptr<base::SequencedTaskRunner> task_runner_for_tests)
     : base_path_(base_path),
-      extended_reporting_level_callback_(extended_reporting_level_callback),
       list_infos_(GetListInfos()),
       task_runner_(task_runner_for_tests
                        ? task_runner_for_tests
@@ -1014,8 +1011,7 @@ void V4LocalDatabaseManager::SetupUpdate
                           weak_factory_.GetWeakPtr());
 
   v4_update_protocol_manager_ = V4UpdateProtocolManager::Create(
-      url_loader_factory, config, update_callback,
-      extended_reporting_level_callback_);
+      url_loader_factory, config, update_callback);
 }
 
 void V4LocalDatabaseManager::UpdateRequestCompleted(
--- a/components/safe_browsing/core/db/v4_local_database_manager.h
+++ b/components/safe_browsing/core/db/v4_local_database_manager.h
@@ -33,8 +33,7 @@ class V4LocalDatabaseManager : public Sa
   // Create and return an instance of V4LocalDatabaseManager, if Finch trial
   // allows it; nullptr otherwise.
   static scoped_refptr<V4LocalDatabaseManager> Create(
-      const base::FilePath& base_path,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      const base::FilePath& base_path);
 
   // Populates the protobuf with the database data.
   void CollectDatabaseManagerInfo(
@@ -100,7 +99,6 @@ class V4LocalDatabaseManager : public Sa
   // Must be initialized by calling StartOnIOThread() before using.
   V4LocalDatabaseManager(
       const base::FilePath& base_path,
-      ExtendedReportingLevelCallback extended_reporting_level_callback,
       scoped_refptr<base::SequencedTaskRunner> task_runner_for_tests);
 
   ~V4LocalDatabaseManager() override;
@@ -356,10 +354,6 @@ class V4LocalDatabaseManager : public Sa
   // ready to process next update.
   DatabaseUpdatedCallback db_updated_callback_;
 
-  // Callback to get the current extended reporting level. Needed by the update
-  // manager.
-  ExtendedReportingLevelCallback extended_reporting_level_callback_;
-
   // The client_state of each list currently being synced. This is updated each
   // time a database update completes, and used to send list client_state
   // information in the full hash request.
--- a/components/safe_browsing/core/db/v4_protocol_manager_util.cc
+++ b/components/safe_browsing/core/db/v4_protocol_manager_util.cc
@@ -89,7 +89,6 @@ void SetSbV4UrlPrefixForTesting(const ch
 
 std::string GetReportUrl(const V4ProtocolConfig& config,
                          const std::string& method,
-                         const ExtendedReportingLevel* reporting_level,
                          const bool is_enhanced_protection) {
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=4.0", kSbReportsURLPrefix, method.c_str(),
@@ -99,8 +98,6 @@ std::string GetReportUrl(const V4Protoco
     base::StringAppendF(&url, "&key=%s",
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
-  if (reporting_level)
-    url.append(base::StringPrintf("&ext=%d", *reporting_level));
   if (is_enhanced_protection)
     url.append(base::StringPrintf("&enh=%d", is_enhanced_protection));
   return url;
--- a/components/safe_browsing/core/db/v4_protocol_manager_util.h
+++ b/components/safe_browsing/core/db/v4_protocol_manager_util.h
@@ -18,9 +18,10 @@
 #include <vector>
 
 #include "base/containers/flat_set.h"
+#include "base/files/file_path.h"
 #include "base/gtest_prod_util.h"
 #include "base/strings/string_piece.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
+#include "base/time/time.h"
 #include "components/safe_browsing/core/db/safebrowsing.pb.h"
 #include "url/gurl.h"
 
@@ -89,7 +90,6 @@ V4ProtocolConfig GetV4ProtocolConfig(con
 std::string GetReportUrl(
     const V4ProtocolConfig& config,
     const std::string& method,
-    const ExtendedReportingLevel* reporting_level = nullptr,
     const bool is_enhanced_protection = false);
 
 // Different types of threats that SafeBrowsing protects against. This is the
--- a/components/safe_browsing/core/db/v4_update_protocol_manager.cc
+++ b/components/safe_browsing/core/db/v4_update_protocol_manager.cc
@@ -88,19 +88,8 @@ static const int kMaximumEntriesPerLimit
 static const int kMaximumEntriesPerList = 1 << 20;
 #endif
 
-ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue(
-    ExtendedReportingLevel reporting_level) {
-  switch (reporting_level) {
-    case SBER_LEVEL_OFF:
-      return ChromeClientInfo::OPT_OUT;
-    case SBER_LEVEL_LEGACY:
-      return ChromeClientInfo::EXTENDED;
-    case SBER_LEVEL_SCOUT:
-      return ChromeClientInfo::SCOUT;
-    default:
-      NOTREACHED() << "Unexpected reporting_level!";
-      return ChromeClientInfo::UNSPECIFIED;
-  }
+ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue() {
+  return ChromeClientInfo::OPT_OUT;
 }
 
 // The default V4UpdateProtocolManagerFactory.
@@ -112,12 +101,10 @@ class V4UpdateProtocolManagerFactoryImpl
   std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback)
+      V4UpdateCallback update_callback)
       override {
     return base::WrapUnique(
-        new V4UpdateProtocolManager(url_loader_factory, config, update_callback,
-                                    extended_reporting_level_callback));
+        new V4UpdateProtocolManager(url_loader_factory, config, update_callback));
   }
 
  private:
@@ -133,14 +120,12 @@ V4UpdateProtocolManagerFactory* V4Update
 std::unique_ptr<V4UpdateProtocolManager> V4UpdateProtocolManager::Create(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    V4UpdateCallback update_callback) {
   if (!factory_) {
     factory_ = new V4UpdateProtocolManagerFactoryImpl();
   }
   return factory_->CreateProtocolManager(url_loader_factory, config,
-                                         update_callback,
-                                         extended_reporting_level_callback);
+                                         update_callback);
 }
 
 void V4UpdateProtocolManager::ResetUpdateErrors() {
@@ -151,8 +136,7 @@ void V4UpdateProtocolManager::ResetUpdat
 V4UpdateProtocolManager::V4UpdateProtocolManager(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback)
+    V4UpdateCallback update_callback)
     : update_error_count_(0),
       update_back_off_mult_(1),
       next_update_interval_(base::TimeDelta::FromSeconds(
@@ -160,8 +144,7 @@ V4UpdateProtocolManager::V4UpdateProtoco
                         kV4TimerStartIntervalSecMax))),
       config_(config),
       url_loader_factory_(url_loader_factory),
-      update_callback_(update_callback),
-      extended_reporting_level_callback_(extended_reporting_level_callback) {
+      update_callback_(update_callback) {
   // Do not auto-schedule updates. Let the owner (V4LocalDatabaseManager) do it
   // when it is ready to process updates.
 }
@@ -263,11 +246,6 @@ std::string V4UpdateProtocolManager::Get
 #endif
   }
 
-  if (!extended_reporting_level_callback_.is_null()) {
-    request.mutable_chrome_client_info()->set_reporting_population(
-        GetReportingLevelProtoValue(extended_reporting_level_callback_.Run()));
-  }
-
   V4ProtocolManagerUtil::SetClientInfoFromConfig(request.mutable_client(),
                                                  config_);
 
--- a/components/safe_browsing/core/db/v4_update_protocol_manager.h
+++ b/components/safe_browsing/core/db/v4_update_protocol_manager.h
@@ -22,7 +22,6 @@
 #include "base/sequence_checker.h"
 #include "base/time/time.h"
 #include "base/timer/timer.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/safebrowsing.pb.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
@@ -46,9 +45,6 @@ class V4UpdateProtocolManagerFactory;
 using V4UpdateCallback =
     base::RepeatingCallback<void(std::unique_ptr<ParsedServerResponse>)>;
 
-using ExtendedReportingLevelCallback =
-    base::RepeatingCallback<ExtendedReportingLevel()>;
-
 class V4UpdateProtocolManager {
  public:
   ~V4UpdateProtocolManager();
@@ -63,8 +59,7 @@ class V4UpdateProtocolManager {
   static std::unique_ptr<V4UpdateProtocolManager> Create(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      V4UpdateCallback update_callback);
 
   void OnURLLoaderComplete(std::unique_ptr<std::string> response_body);
 
@@ -86,8 +81,7 @@ class V4UpdateProtocolManager {
   V4UpdateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      V4UpdateCallback update_callback);
 
  private:
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
@@ -102,8 +96,6 @@ class V4UpdateProtocolManager {
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest, TestDisableAutoUpdates);
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
                            TestGetUpdatesHasTimeout);
-  FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
-                           TestExtendedReportingLevelIncluded);
   friend class V4UpdateProtocolManagerFactoryImpl;
 
   void OnURLLoaderCompleteInternal(int net_error,
@@ -205,8 +197,6 @@ class V4UpdateProtocolManager {
   // complete.
   base::OneShotTimer timeout_timer_;
 
-  ExtendedReportingLevelCallback extended_reporting_level_callback_;
-
   SEQUENCE_CHECKER(sequence_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(V4UpdateProtocolManager);
@@ -220,8 +210,7 @@ class V4UpdateProtocolManagerFactory {
   virtual std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback) = 0;
+      V4UpdateCallback update_callback) = 0;
 
  private:
   DISALLOW_COPY_AND_ASSIGN(V4UpdateProtocolManagerFactory);
--- a/components/safe_browsing/core/ping_manager.cc
+++ b/components/safe_browsing/core/ping_manager.cc
@@ -140,7 +140,7 @@ GURL PingManager::SafeBrowsingHitUrl(
          hit_report.threat_type == SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING ||
          hit_report.threat_type == SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE);
   std::string url =
-      GetReportUrl(config_, "report", &hit_report.extended_reporting_level,
+      GetReportUrl(config_, "report",
                    hit_report.is_enhanced_protection);
   std::string threat_list = "none";
   switch (hit_report.threat_type) {
--- a/components/safe_browsing/core/realtime/policy_engine.cc
+++ b/components/safe_browsing/core/realtime/policy_engine.cc
@@ -9,7 +9,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/unified_consent/pref_names.h"
@@ -42,7 +41,7 @@ bool RealTimePolicyEngine::IsUserMbbOpte
 
 // static
 bool RealTimePolicyEngine::IsUserEpOptedIn(PrefService* pref_service) {
-  return IsEnhancedProtectionEnabled(*pref_service);
+  return false;
 }
 
 // static
@@ -103,9 +102,7 @@ bool RealTimePolicyEngine::CanPerformEnt
     return false;
   }
 
-  return pref_service->GetInteger(
-             prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckMode) ==
-         REAL_TIME_CHECK_FOR_MAINFRAME_ENABLED;
+  return false;
 }
 
 // static
--- a/components/safe_browsing/core/realtime/url_lookup_service.cc
+++ b/components/safe_browsing/core/realtime/url_lookup_service.cc
@@ -14,7 +14,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/core/browser/safe_browsing_token_fetcher.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/core/realtime/policy_engine.h"
@@ -92,7 +91,7 @@ bool RealTimeUrlLookupService::CanPerfor
 }
 
 bool RealTimeUrlLookupService::CanCheckSubresourceURL() const {
-  return IsEnhancedProtectionEnabled(*pref_service_);
+  return false;
 }
 
 bool RealTimeUrlLookupService::CanCheckSafeBrowsingDb() const {
--- a/components/safe_browsing/core/realtime/url_lookup_service_base.cc
+++ b/components/safe_browsing/core/realtime/url_lookup_service_base.cc
@@ -14,7 +14,6 @@
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/verdict_cache_manager.h"
@@ -440,11 +439,7 @@ std::unique_ptr<RTLookupRequest> RealTim
 
   ChromeUserPopulation* user_population = request->mutable_population();
   user_population->set_user_population(
-      IsEnhancedProtectionEnabled(*pref_service_)
-          ? ChromeUserPopulation::ENHANCED_PROTECTION
-          : IsExtendedReportingEnabled(*pref_service_)
-                ? ChromeUserPopulation::EXTENDED_REPORTING
-                : ChromeUserPopulation::SAFE_BROWSING);
+      ChromeUserPopulation::UNKNOWN_USER_POPULATION);
 
   user_population->set_profile_management_status(profile_management_status_);
   user_population->set_is_history_sync_enabled(
--- a/components/safe_browsing/core/triggers/trigger_manager.cc
+++ b/components/safe_browsing/core/triggers/trigger_manager.cc
@@ -10,7 +10,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/base_ui_manager.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/security_interstitials/core/unsafe_resource.h"
@@ -83,16 +82,16 @@ SBErrorOptions TriggerManager::GetSBErro
     const PrefService& pref_service,
     content::WebContents* web_contents) {
   return SBErrorOptions(/*is_main_frame_load_blocked=*/false,
-                        IsExtendedReportingOptInAllowed(pref_service),
+                        /*IsExtendedReportingOptInAllowed(pref_service)*/false,
                         web_contents->GetBrowserContext()->IsOffTheRecord(),
-                        IsExtendedReportingEnabled(pref_service),
-                        IsExtendedReportingPolicyManaged(pref_service),
-                        IsEnhancedProtectionEnabled(pref_service),
+                        /*IsExtendedReportingEnabled(pref_service)*/false,
+                        /*IsExtendedReportingPolicyManaged(pref_service)*/false,
+                        /*IsEnhancedProtectionEnabled(pref_service)*/false,
                         /*is_proceed_anyway_disabled=*/false,
                         /*should_open_links_in_new_tab=*/false,
                         /*show_back_to_safety_button=*/true,
-                        IsEnhancedProtectionMessageInInterstitialsEnabled(),
-                        IsSafeBrowsingPolicyManaged(pref_service),
+                        /*IsEnhancedProtectionMessageInInterstitialsEnabled()*/false,
+                        /*IsSafeBrowsingPolicyManaged(pref_service)*/false,
                         /*help_center_article_link=*/std::string());
 }
 
--- a/components/safe_browsing/core/triggers/trigger_throttler.cc
+++ b/components/safe_browsing/core/triggers/trigger_throttler.cc
@@ -11,7 +11,6 @@
 #include "base/time/default_clock.h"
 #include "base/time/time.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 
 namespace safe_browsing {
@@ -217,28 +216,6 @@ void TriggerThrottler::LoadTriggerEvents
   trigger_events_.clear();
   if (!local_state_prefs_)
     return;
-
-  const base::DictionaryValue* event_dict = local_state_prefs_->GetDictionary(
-      prefs::kSafeBrowsingTriggerEventTimestamps);
-  for (const auto& trigger_pair : event_dict->DictItems()) {
-    // Check that the first item in the pair is convertible to a trigger type
-    // and that the second item is a list.
-    int trigger_type_int;
-    if (!base::StringToInt(trigger_pair.first, &trigger_type_int) ||
-        trigger_type_int < static_cast<int>(TriggerType::kMinTriggerType) ||
-        trigger_type_int > static_cast<int>(TriggerType::kMaxTriggerType)) {
-      continue;
-    }
-    if (!trigger_pair.second.is_list())
-      continue;
-
-    const TriggerType trigger_type = static_cast<TriggerType>(trigger_type_int);
-    for (const auto& timestamp : trigger_pair.second.GetList()) {
-      if (timestamp.is_double())
-        trigger_events_[trigger_type].push_back(
-            base::Time::FromDoubleT(timestamp.GetDouble()));
-    }
-  }
 }
 
 void TriggerThrottler::WriteTriggerEventsToPref() {
@@ -254,9 +231,6 @@ void TriggerThrottler::WriteTriggerEvent
       pref_timestamps->Append(base::Value(timestamp.ToDoubleT()));
     }
   }
-
-  local_state_prefs_->Set(prefs::kSafeBrowsingTriggerEventTimestamps,
-                          trigger_dict);
 }
 
 size_t TriggerThrottler::GetDailyQuotaForTrigger(
--- a/components/safe_browsing/core/triggers/trigger_throttler_unittest.cc
+++ b/components/safe_browsing/core/triggers/trigger_throttler_unittest.cc
@@ -8,7 +8,6 @@
 #include "base/test/scoped_feature_list.h"
 #include "base/test/simple_test_clock.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/safety_check/safety_check.cc
+++ b/components/safety_check/safety_check.cc
@@ -4,8 +4,6 @@
 
 #include "components/safety_check/safety_check.h"
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
-
 namespace safety_check {
 
 SafetyCheck::SafetyCheck(SafetyCheckHandlerInterface* handler)
@@ -16,26 +14,7 @@ SafetyCheck::SafetyCheck(SafetyCheckHand
 SafetyCheck::~SafetyCheck() = default;
 
 void SafetyCheck::CheckSafeBrowsing(PrefService* pref_service) {
-  const PrefService::Preference* enabled_pref =
-      pref_service->FindPreference(prefs::kSafeBrowsingEnabled);
-  bool is_sb_enabled = pref_service->GetBoolean(prefs::kSafeBrowsingEnabled);
-  bool is_sb_managed = enabled_pref->IsManaged();
-
-  SafeBrowsingStatus status;
-  if (is_sb_enabled && pref_service->GetBoolean(prefs::kSafeBrowsingEnhanced)) {
-    status = SafeBrowsingStatus::kEnabledEnhanced;
-  } else if (is_sb_enabled && is_sb_managed) {
-    status = SafeBrowsingStatus::kEnabledStandard;
-  } else if (is_sb_enabled && !is_sb_managed) {
-    status = SafeBrowsingStatus::kEnabledStandardAvailableEnhanced;
-  } else if (is_sb_managed) {
-    status = SafeBrowsingStatus::kDisabledByAdmin;
-  } else if (enabled_pref->IsExtensionControlled()) {
-    status = SafeBrowsingStatus::kDisabledByExtension;
-  } else {
-    status = SafeBrowsingStatus::kDisabled;
-  }
-  handler_->OnSafeBrowsingCheckResult(status);
+  handler_->OnSafeBrowsingCheckResult(SafeBrowsingStatus::kDisabled);
 }
 
 }  // namespace safety_check
--- a/components/security_interstitials/content/bad_clock_blocking_page.cc
+++ b/components/security_interstitials/content/bad_clock_blocking_page.cc
@@ -7,7 +7,6 @@
 #include <utility>
 
 #include "base/strings/string_number_conversions.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_page.h"
--- a/components/security_interstitials/content/captive_portal_blocking_page.cc
+++ b/components/security_interstitials/content/captive_portal_blocking_page.cc
@@ -15,7 +15,6 @@
 #include "build/build_config.h"
 #include "components/captive_portal/core/captive_portal_detector.h"
 #include "components/captive_portal/core/captive_portal_metrics.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
--- a/components/security_interstitials/content/cert_report_helper.cc
+++ b/components/security_interstitials/content/cert_report_helper.cc
@@ -15,7 +15,6 @@
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/controller_client.h"
 #include "components/security_interstitials/core/metrics_helper.h"
@@ -84,8 +83,7 @@ void CertReportHelper::PopulateExtendedR
     return;
 
   load_time_data->SetBoolean(
-      security_interstitials::kBoxChecked,
-      safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)));
+      security_interstitials::kBoxChecked, false);
 
   load_time_data->SetString(
       security_interstitials::kOptInLink,
@@ -122,14 +120,8 @@ void CertReportHelper::HandleReportingCo
     PrefService* pref_service) {
   switch (command) {
     case security_interstitials::CMD_DO_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, true, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_DONT_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, false, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_PROCEED:
       user_action_ = CertificateErrorReport::USER_PROCEEDED;
@@ -147,7 +139,7 @@ void CertReportHelper::FinishCertCollect
   if (!ShouldShowCertificateReporterCheckbox())
     return;
 
-  if (!safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)))
+  if (true)
     return;
 
   if (metrics_helper_) {
@@ -178,51 +170,11 @@ void CertReportHelper::FinishCertCollect
 }
 
 bool CertReportHelper::ShouldShowCertificateReporterCheckbox() {
-  // Only show the checkbox iff the user is part of the respective Finch group
-  // and the window is not incognito and the feature is not disabled by policy
-  // and enhanced protection is off.
-  const bool in_incognito =
-      web_contents_->GetBrowserContext()->IsOffTheRecord();
-  const PrefService* pref_service = GetPrefs(web_contents_);
-  bool can_show_checkbox =
-      safe_browsing::IsExtendedReportingOptInAllowed(*pref_service) &&
-      !safe_browsing::IsExtendedReportingPolicyManaged(*pref_service);
-  bool is_enhanced_protection_enabled =
-      safe_browsing::IsEnhancedProtectionEnabled(*pref_service);
-
-  return base::FieldTrialList::FindFullName(kFinchExperimentName) ==
-             kFinchGroupShowPossiblySend &&
-         !in_incognito && can_show_checkbox && !is_enhanced_protection_enabled;
+  return false;
 }
 
 bool CertReportHelper::ShouldShowEnhancedProtectionMessage() {
-  // Only show the enhanced protection message iff the user is part of the
-  // respective Finch group and the window is not incognito and Safe Browsing is
-  // not managed by policy and the user is not already in enhanced protection
-  // mode.
-  const bool in_incognito =
-      web_contents_->GetBrowserContext()->IsOffTheRecord();
-  const PrefService* pref_service = GetPrefs(web_contents_);
-  bool is_enhanced_protection_enabled =
-      safe_browsing::IsEnhancedProtectionEnabled(*pref_service);
-  bool is_safe_browsing_managed =
-      safe_browsing::IsSafeBrowsingPolicyManaged(*pref_service);
-  bool is_enhanced_protection_message_enabled =
-      safe_browsing::IsEnhancedProtectionMessageInInterstitialsEnabled();
-
-  if (in_incognito) {
-    return false;
-  }
-  if (is_enhanced_protection_enabled) {
-    return false;
-  }
-  if (is_safe_browsing_managed) {
-    return false;
-  }
-  if (!is_enhanced_protection_message_enabled) {
-    return false;
-  }
-  return true;
+  return false;
 }
 
 bool CertReportHelper::ShouldReportCertificateError() {
--- a/components/security_interstitials/content/mitm_software_blocking_page.cc
+++ b/components/security_interstitials/content/mitm_software_blocking_page.cc
@@ -6,7 +6,6 @@
 
 #include <utility>
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_page.h"
--- a/components/security_interstitials/content/security_interstitial_controller_client.cc
+++ b/components/security_interstitials/content/security_interstitial_controller_client.cc
@@ -7,7 +7,6 @@
 #include <utility>
 
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/settings_page_helper.h"
 #include "components/security_interstitials/core/metrics_helper.h"
 #include "content/public/browser/web_contents.h"
@@ -98,11 +97,6 @@ SecurityInterstitialControllerClient::Ge
   return prefs_;
 }
 
-const std::string
-SecurityInterstitialControllerClient::GetExtendedReportingPrefName() const {
-  return prefs::kSafeBrowsingScoutReportingEnabled;
-}
-
 bool SecurityInterstitialControllerClient::CanLaunchDateAndTimeSettings() {
   NOTREACHED();
   return false;
--- a/components/security_interstitials/content/security_interstitial_controller_client.h
+++ b/components/security_interstitials/content/security_interstitial_controller_client.h
@@ -49,8 +49,6 @@ class SecurityInterstitialControllerClie
   bool CanGoBackBeforeNavigation() override;
 
  protected:
-  // security_interstitials::ControllerClient overrides.
-  const std::string GetExtendedReportingPrefName() const override;
   content::WebContents* web_contents_;
 
  private:
--- a/components/security_interstitials/content/security_interstitial_page.cc
+++ b/components/security_interstitials/content/security_interstitial_page.cc
@@ -11,7 +11,6 @@
 #include "base/values.h"
 #include "components/grit/components_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/core/common_string_util.h"
 #include "content/public/browser/page_navigator.h"
@@ -32,13 +31,6 @@ SecurityInterstitialPage::SecurityInters
       on_show_extended_reporting_pref_exists_(false),
       on_show_extended_reporting_pref_value_(false),
       controller_(std::move(controller)) {
-  // Determine if any prefs need to be updated prior to showing the security
-  // interstitial. Note that some content embedders (such as Android WebView)
-  // uses security interstitials without a prefservice.
-  if (controller_->GetPrefService()) {
-    safe_browsing::UpdatePrefsBeforeSecurityInterstitial(
-        controller_->GetPrefService());
-  }
   SetUpMetrics();
 }
 
@@ -86,15 +78,8 @@ SecurityInterstitialControllerClient* Se
 }
 
 void SecurityInterstitialPage::SetUpMetrics() {
-  // Remember the initial state of the extended reporting pref, to be compared
-  // to the same data when the interstitial is closed.
-  PrefService* prefs = controller_->GetPrefService();
-  if (prefs) {
-    on_show_extended_reporting_pref_exists_ =
-        safe_browsing::ExtendedReportingPrefExists(*prefs);
-    on_show_extended_reporting_pref_value_ =
-        safe_browsing::IsExtendedReportingEnabled(*prefs);
-  }
+  on_show_extended_reporting_pref_exists_ = false;
+  on_show_extended_reporting_pref_value_ = false;
 }
 
 base::string16 SecurityInterstitialPage::GetFormattedHostName() const {
--- a/components/security_interstitials/content/ssl_blocking_page.cc
+++ b/components/security_interstitials/content/ssl_blocking_page.cc
@@ -12,7 +12,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_page.h"
--- a/components/security_interstitials/core/controller_client.cc
+++ b/components/security_interstitials/core/controller_client.cc
@@ -36,7 +36,6 @@ MetricsHelper* ControllerClient::metrics
 
 void ControllerClient::SetReportingPreference(bool report) {
   DCHECK(GetPrefService());
-  GetPrefService()->SetBoolean(GetExtendedReportingPrefName(), report);
   metrics_helper_->RecordUserInteraction(
       report ? MetricsHelper::SET_EXTENDED_REPORTING_ENABLED
              : MetricsHelper::SET_EXTENDED_REPORTING_DISABLED);
--- a/components/security_interstitials/core/controller_client.h
+++ b/components/security_interstitials/core/controller_client.h
@@ -118,9 +118,6 @@ class ControllerClient {
 
   void SetBaseHelpCenterUrlForTesting(const GURL& test_url);
 
- protected:
-  virtual const std::string GetExtendedReportingPrefName() const = 0;
-
  private:
   std::unique_ptr<MetricsHelper> metrics_helper_;
   // Link to the help center.
--- a/components/signin/core/browser/account_investigator.cc
+++ b/components/signin/core/browser/account_investigator.cc
@@ -13,7 +13,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 #include "google_apis/gaia/google_service_auth_error.h"
@@ -70,24 +69,11 @@ AccountInvestigator::~AccountInvestigato
 
 // static
 void AccountInvestigator::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGaiaCookieHash, std::string());
-  registry->RegisterDoublePref(prefs::kGaiaCookieChangedTime, 0);
-  registry->RegisterDoublePref(prefs::kGaiaCookiePeriodicReportTime, 0);
 }
 
 void AccountInvestigator::Initialize() {
   identity_manager_->AddObserver(this);
   previously_authenticated_ = identity_manager_->HasPrimaryAccount();
-
-  // TODO(crbug.com/1121923): Refactor to use signin::PersistentRepeatingTimer
-  // instead.
-  Time previous = Time::FromDoubleT(
-      pref_service_->GetDouble(prefs::kGaiaCookiePeriodicReportTime));
-  if (previous.is_null())
-    previous = Time::Now();
-  const TimeDelta delay =
-      CalculatePeriodicDelay(previous, Time::Now(), kPeriodicReportingInterval);
-  timer_.Start(FROM_HERE, delay, this, &AccountInvestigator::TryPeriodicReport);
 }
 
 void AccountInvestigator::Shutdown() {
@@ -114,16 +100,13 @@ void AccountInvestigator::OnAccountsInCo
   // a valid cached ListAccounts response ready for us. Or even both of these
   // could be simultaneously happening, although this should be extremely
   // infrequent.
-  const std::string old_hash(pref_service_->GetString(prefs::kGaiaCookieHash));
+  const std::string old_hash;
   const std::string new_hash(
       HashAccounts(signed_in_accounts, signed_out_accounts));
   const bool currently_authenticated = identity_manager_->HasPrimaryAccount();
   if (old_hash != new_hash) {
     SharedCookieJarReport(signed_in_accounts, signed_out_accounts, Time::Now(),
                           ReportingType::ON_CHANGE);
-    pref_service_->SetString(prefs::kGaiaCookieHash, new_hash);
-    pref_service_->SetDouble(prefs::kGaiaCookieChangedTime,
-                             Time::Now().ToDoubleT());
   } else if (currently_authenticated && !previously_authenticated_) {
     SignedInAccountRelationReport(signed_in_accounts, signed_out_accounts,
                                   ReportingType::ON_CHANGE);
@@ -250,10 +233,6 @@ void AccountInvestigator::DoPeriodicRepo
   }
 
   periodic_pending_ = false;
-  pref_service_->SetDouble(prefs::kGaiaCookiePeriodicReportTime,
-                           Time::Now().ToDoubleT());
-  timer_.Start(FROM_HERE, kPeriodicReportingInterval, this,
-               &AccountInvestigator::TryPeriodicReport);
 }
 
 void AccountInvestigator::SharedCookieJarReport(
@@ -261,8 +240,7 @@ void AccountInvestigator::SharedCookieJa
     const std::vector<ListedAccount>& signed_out_accounts,
     const Time now,
     const ReportingType type) {
-  const Time last_changed = Time::FromDoubleT(
-      pref_service_->GetDouble(prefs::kGaiaCookieChangedTime));
+  const Time last_changed = Time::Now();
   TimeDelta stable_age;
   if (!last_changed.is_null())
     stable_age = std::max(now - last_changed, TimeDelta());
--- a/components/signin/core/browser/account_investigator_unittest.cc
+++ b/components/signin/core/browser/account_investigator_unittest.cc
@@ -12,7 +12,6 @@
 #include "build/build_config.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/components/signin/core/browser/account_reconcilor_unittest.cc
+++ b/components/signin/core/browser/account_reconcilor_unittest.cc
@@ -27,7 +27,6 @@
 #include "components/signin/public/base/list_accounts_test_utils.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
--- a/components/signin/core/browser/dice_account_reconcilor_delegate.cc
+++ b/components/signin/core/browser/dice_account_reconcilor_delegate.cc
@@ -12,7 +12,6 @@
 #include "base/ranges/algorithm.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_client.h"
-#include "components/signin/public/base/signin_pref_names.h"
 
 const base::Feature kUseMultiloginEndpoint{"UseMultiloginEndpoint",
                                            base::FEATURE_DISABLED_BY_DEFAULT};
--- a/components/signin/core/browser/dice_account_reconcilor_delegate_unittest.cc
+++ b/components/signin/core/browser/dice_account_reconcilor_delegate_unittest.cc
@@ -8,7 +8,6 @@
 
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/public/base/account_consistency_method.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "google_apis/gaia/gaia_auth_util.h"
--- a/components/signin/core/browser/signin_investigator.cc
+++ b/components/signin/core/browser/signin_investigator.cc
@@ -7,7 +7,6 @@
 #include "base/check.h"
 #include "base/metrics/histogram_macros.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 
 using signin_metrics::AccountEquality;
@@ -26,13 +25,9 @@ SigninInvestigator::SigninInvestigator(c
 SigninInvestigator::~SigninInvestigator() {}
 
 bool SigninInvestigator::AreAccountsEqualWithFallback() {
-  const std::string last_id =
-      provider_->GetPrefs()->GetString(prefs::kGoogleServicesLastAccountId);
-  bool same_email = gaia::AreEmailsSame(
-      current_email_,
-      provider_->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername));
-  if (!current_id_.empty() && !last_id.empty()) {
-    bool same_id = current_id_ == last_id;
+  bool same_email = false;
+  if (false) {
+    bool same_id = false;
     if (same_email && same_id) {
       LogAccountEquality(AccountEquality::BOTH_EQUAL);
     } else if (same_email) {
@@ -51,9 +46,7 @@ bool SigninInvestigator::AreAccountsEqua
 
 InvestigatedScenario SigninInvestigator::Investigate() {
   InvestigatedScenario scenario;
-  if (provider_->GetPrefs()
-          ->GetString(prefs::kGoogleServicesLastUsername)
-          .empty()) {
+  if (true) {
     scenario = InvestigatedScenario::kFirstSignIn;
   } else if (AreAccountsEqualWithFallback()) {
     scenario = InvestigatedScenario::kSameAccount;
--- a/components/signin/core/browser/signin_investigator_unittest.cc
+++ b/components/signin/core/browser/signin_investigator_unittest.cc
@@ -9,7 +9,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/core/browser/signin_investigator.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/signin/internal/identity_manager/account_tracker_service.cc
+++ b/components/signin/internal/identity_manager/account_tracker_service.cc
@@ -27,7 +27,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/signin/internal/identity_manager/account_info_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "ui/gfx/image/image.h"
 
@@ -116,9 +115,6 @@ AccountTrackerService::~AccountTrackerSe
 
 // static
 void AccountTrackerService::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterListPref(prefs::kAccountInfo);
-  registry->RegisterIntegerPref(prefs::kAccountIdMigrationState,
-                                AccountTrackerService::MIGRATION_NOT_STARTED);
 }
 
 void AccountTrackerService::Initialize(PrefService* pref_service,
@@ -401,14 +397,12 @@ AccountTrackerService::ComputeNewMigrati
 
 void AccountTrackerService::SetMigrationState(AccountIdMigrationState state) {
   DCHECK(state != MIGRATION_DONE || AreAllAccountsMigrated());
-  pref_service_->SetInteger(prefs::kAccountIdMigrationState, state);
 }
 
 // static
 AccountTrackerService::AccountIdMigrationState
 AccountTrackerService::GetMigrationState(const PrefService* pref_service) {
-  return static_cast<AccountTrackerService::AccountIdMigrationState>(
-      pref_service->GetInteger(prefs::kAccountIdMigrationState));
+  return MIGRATION_NOT_STARTED;
 }
 
 base::FilePath AccountTrackerService::GetImagePathFor(
@@ -466,24 +460,7 @@ void AccountTrackerService::OnAccountIma
     const CoreAccountId& account_id,
     const std::string& image_url_with_size,
     bool success) {
-  if (!success || !pref_service_)
-    return;
-
-  base::DictionaryValue* dict = nullptr;
-  ListPrefUpdate update(pref_service_, prefs::kAccountInfo);
-  for (size_t i = 0; i < update->GetSize(); ++i, dict = nullptr) {
-    if (update->GetDictionary(i, &dict)) {
-      std::string value;
-      if (dict->GetString(kAccountKeyPath, &value) &&
-          value == account_id.ToString())
-        break;
-    }
-  }
-
-  if (!dict) {
-    return;
-  }
-  dict->SetString(kLastDownloadedImageURLWithSizePath, image_url_with_size);
+  return;
 }
 
 void AccountTrackerService::RemoveAccountImageFromDisk(
@@ -495,11 +472,10 @@ void AccountTrackerService::RemoveAccoun
 }
 
 void AccountTrackerService::LoadFromPrefs() {
-  const base::ListValue* list = pref_service_->GetList(prefs::kAccountInfo);
   std::set<CoreAccountId> to_remove;
-  for (size_t i = 0; i < list->GetSize(); ++i) {
+  if (false) {
     const base::DictionaryValue* dict;
-    if (list->GetDictionary(i, &dict)) {
+    while (false) {
       std::string value;
       if (dict->GetString(kAccountKeyPath, &value)) {
         // Ignore incorrectly persisted non-canonical account ids.
@@ -573,13 +549,11 @@ void AccountTrackerService::LoadFromPref
 }
 
 void AccountTrackerService::SaveToPrefs(const AccountInfo& account_info) {
-  if (!pref_service_)
-    return;
+  return;
 
   base::DictionaryValue* dict = nullptr;
-  ListPrefUpdate update(pref_service_, prefs::kAccountInfo);
-  for (size_t i = 0; i < update->GetSize(); ++i, dict = nullptr) {
-    if (update->GetDictionary(i, &dict)) {
+  if (false) {
+    while (false) {
       std::string value;
       if (dict->GetString(kAccountKeyPath, &value) &&
           value == account_info.account_id.ToString())
@@ -589,9 +563,6 @@ void AccountTrackerService::SaveToPrefs(
 
   if (!dict) {
     dict = new base::DictionaryValue();
-    update->Append(base::WrapUnique(dict));
-    // |dict| is invalidated at this point, so it needs to be reset.
-    update->GetDictionary(update->GetSize() - 1, &dict);
     dict->SetString(kAccountKeyPath, account_info.account_id.ToString());
   }
 
@@ -615,14 +586,12 @@ void AccountTrackerService::RemoveFromPr
   if (!pref_service_)
     return;
 
-  ListPrefUpdate update(pref_service_, prefs::kAccountInfo);
-  for (size_t i = 0; i < update->GetSize(); ++i) {
+  if (false) {
     base::DictionaryValue* dict = nullptr;
-    if (update->GetDictionary(i, &dict)) {
+    while (false) {
       std::string value;
       if (dict->GetString(kAccountKeyPath, &value) &&
           value == account_info.account_id.ToString()) {
-        update->Remove(i, nullptr);
         break;
       }
     }
--- a/components/signin/internal/identity_manager/account_tracker_service.h
+++ b/components/signin/internal/identity_manager/account_tracker_service.h
@@ -230,6 +230,8 @@ class AccountTrackerService {
   AccountInfoCallback on_account_updated_callback_;
   AccountInfoCallback on_account_removed_callback_;
 
+  AccountIdMigrationState migration_state_;
+
   // Task runner used for file operations on avatar images.
   scoped_refptr<base::SequencedTaskRunner> image_storage_task_runner_;
 
--- a/components/signin/internal/identity_manager/account_tracker_service_unittest.cc
+++ b/components/signin/internal/identity_manager/account_tracker_service_unittest.cc
@@ -24,7 +24,6 @@
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/fake_profile_oauth2_token_service.h"
 #include "components/signin/public/base/avatar_icon_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/account_info.h"
--- a/components/signin/internal/identity_manager/gaia_cookie_manager_service.cc
+++ b/components/signin/internal/identity_manager/gaia_cookie_manager_service.cc
@@ -28,7 +28,6 @@
 #include "components/signin/internal/identity_manager/ubertoken_fetcher_impl.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/set_accounts_in_cookie_result.h"
 #include "google_apis/gaia/gaia_constants.h"
 #include "google_apis/gaia/gaia_urls.h"
@@ -440,9 +439,7 @@ GaiaCookieManagerService::GaiaCookieMana
       listAccountsUnexpectedServerResponseRetried_(false),
       external_cc_result_fetched_(false),
       list_accounts_stale_(true) {
-  std::string gaia_cookie_last_list_accounts_data =
-      signin_client_->GetPrefs()->GetString(
-          prefs::kGaiaCookieLastListAccountsData);
+  std::string gaia_cookie_last_list_accounts_data;
 
   if (!gaia_cookie_last_list_accounts_data.empty()) {
     if (!gaia::ParseListAccountsData(gaia_cookie_last_list_accounts_data,
@@ -465,8 +462,6 @@ GaiaCookieManagerService::~GaiaCookieMan
 
 // static
 void GaiaCookieManagerService::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGaiaCookieLastListAccountsData,
-                               std::string());
 }
 
 void GaiaCookieManagerService::InitCookieListener() {
@@ -862,16 +857,12 @@ void GaiaCookieManagerService::OnListAcc
                                    &signed_out_accounts_)) {
     listed_accounts_.clear();
     signed_out_accounts_.clear();
-    signin_client_->GetPrefs()->ClearPref(
-        prefs::kGaiaCookieLastListAccountsData);
     GoogleServiceAuthError error(
         GoogleServiceAuthError::UNEXPECTED_SERVICE_RESPONSE);
     OnListAccountsFailure(error);
     return;
   }
 
-  signin_client_->GetPrefs()->SetString(prefs::kGaiaCookieLastListAccountsData,
-                                        data);
   RecordListAccountsFailure(GoogleServiceAuthError::NONE);
 
   InitializeListedAccountsIds();
--- a/components/signin/internal/identity_manager/gaia_cookie_manager_service_unittest.cc
+++ b/components/signin/internal/identity_manager/gaia_cookie_manager_service_unittest.cc
@@ -25,7 +25,6 @@
 #include "components/prefs/testing_pref_service.h"
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/fake_profile_oauth2_token_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "google_apis/gaia/gaia_constants.h"
 #include "google_apis/gaia/gaia_urls.h"
--- a/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate.cc
+++ b/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate.cc
@@ -17,7 +17,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/webdata/token_web_data.h"
 #include "components/webdata/common/web_data_service_base.h"
@@ -118,7 +117,7 @@ signin::LoadCredentialsState LoadCredent
 bool ShouldMigrateToDice(signin::AccountConsistencyMethod account_consistency,
                          PrefService* prefs) {
   return account_consistency == signin::AccountConsistencyMethod::kDice &&
-         !prefs->GetBoolean(prefs::kTokenServiceDiceCompatible);
+         true;
 }
 
 }  // namespace
@@ -276,7 +275,6 @@ MutableProfileOAuth2TokenServiceDelegate
 // static
 void MutableProfileOAuth2TokenServiceDelegate::RegisterProfilePrefs(
     PrefRegistrySimple* registry) {
-  registry->RegisterBooleanPref(prefs::kTokenServiceDiceCompatible, false);
 }
 
 std::unique_ptr<OAuth2AccessTokenFetcher>
@@ -635,9 +633,6 @@ void MutableProfileOAuth2TokenServiceDel
         UpdateCredentials(loading_primary_account_id_, old_login_token);
     }
   }
-
-  if (migrate_to_dice)
-    client_->GetPrefs()->SetBoolean(prefs::kTokenServiceDiceCompatible, true);
 }
 
 void MutableProfileOAuth2TokenServiceDelegate::UpdateCredentials(
@@ -831,8 +826,6 @@ void MutableProfileOAuth2TokenServiceDel
 }
 
 void MutableProfileOAuth2TokenServiceDelegate::FinishLoadingCredentials() {
-  if (account_consistency_ == signin::AccountConsistencyMethod::kDice)
-    DCHECK(client_->GetPrefs()->GetBoolean(prefs::kTokenServiceDiceCompatible));
   FireRefreshTokensLoaded();
 }
 
@@ -863,8 +856,7 @@ void MutableProfileOAuth2TokenServiceDel
                  LOAD_CREDENTIALS_FINISHED_WITH_DB_CANNOT_BE_OPENED);
 
   if (account_consistency_ == signin::AccountConsistencyMethod::kDice &&
-      !client_->GetPrefs()->GetBoolean(prefs::kTokenServiceDiceCompatible)) {
+      true) {
     RevokeAllCredentials();
-    client_->GetPrefs()->SetBoolean(prefs::kTokenServiceDiceCompatible, true);
   }
 }
--- a/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate_unittest.cc
+++ b/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate_unittest.cc
@@ -24,7 +24,6 @@
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/device_id_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/webdata/token_web_data.h"
--- a/components/signin/internal/identity_manager/primary_account_manager.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager.cc
@@ -22,7 +22,6 @@
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 
 using signin::PrimaryAccountChangeEvent;
@@ -47,22 +46,10 @@ PrimaryAccountManager::~PrimaryAccountMa
 
 // static
 void PrimaryAccountManager::RegisterProfilePrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGoogleServicesLastAccountId,
-                               std::string());
-  registry->RegisterStringPref(prefs::kGoogleServicesLastUsername,
-                               std::string());
-  registry->RegisterStringPref(prefs::kGoogleServicesAccountId, std::string());
-  registry->RegisterBooleanPref(prefs::kGoogleServicesConsentedToSync, false);
-  registry->RegisterBooleanPref(prefs::kAutologinEnabled, true);
-  registry->RegisterListPref(prefs::kReverseAutologinRejectedEmailList);
-  registry->RegisterBooleanPref(prefs::kSigninAllowed, true);
-  registry->RegisterBooleanPref(prefs::kSignedInWithCredentialProvider, false);
 }
 
 // static
 void PrimaryAccountManager::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGoogleServicesUsernamePattern,
-                               std::string());
 }
 
 void PrimaryAccountManager::Initialize(PrefService* local_state) {
@@ -70,25 +57,7 @@ void PrimaryAccountManager::Initialize(P
   DCHECK(!IsInitialized());
   initialized_ = true;
 
-  // If the user is clearing the token service from the command line, then
-  // clear their login info also (not valid to be logged in without any
-  // tokens).
-  base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
-  if (cmd_line->HasSwitch(switches::kClearTokenService))
-    SetPrimaryAccountInternal(CoreAccountInfo(), false);
-
-  std::string pref_account_id =
-      client_->GetPrefs()->GetString(prefs::kGoogleServicesAccountId);
-
-  // Initial value for the kGoogleServicesConsentedToSync preference if it is
-  // missing.
-  const PrefService::Preference* consented_pref =
-      client_->GetPrefs()->FindPreference(
-          prefs::kGoogleServicesConsentedToSync);
-  if (consented_pref->IsDefaultValue()) {
-    client_->GetPrefs()->SetBoolean(prefs::kGoogleServicesConsentedToSync,
-                                    !pref_account_id.empty());
-  }
+  std::string pref_account_id;
 
   if (!pref_account_id.empty()) {
     if (account_tracker_service_->GetMigrationState() ==
@@ -98,14 +67,11 @@ void PrimaryAccountManager::Initialize(P
       // |account_info.gaia| could be empty if |account_id| is already gaia id.
       if (!account_info.gaia.empty()) {
         pref_account_id = account_info.gaia;
-        client_->GetPrefs()->SetString(prefs::kGoogleServicesAccountId,
-                                       account_info.gaia);
       }
     }
   }
 
-  bool consented =
-      client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
+  bool consented = false;
   CoreAccountId account_id = CoreAccountId::FromString(pref_account_id);
   CoreAccountInfo account_info =
       account_tracker_service_->GetAccountInfo(account_id);
@@ -166,8 +132,7 @@ void PrimaryAccountManager::SetSyncPrima
 
 #if DCHECK_IS_ON()
   {
-    std::string pref_account_id =
-        client_->GetPrefs()->GetString(prefs::kGoogleServicesAccountId);
+    std::string pref_account_id;
     bool consented_to_sync =
         client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
 
@@ -183,10 +148,6 @@ void PrimaryAccountManager::SetSyncPrima
   // Go ahead and update the last signed in account info here as well. Once a
   // user is signed in the corresponding preferences should match. Doing it here
   // as opposed to on signin allows us to catch the upgrade scenario.
-  client_->GetPrefs()->SetString(prefs::kGoogleServicesLastAccountId,
-                                 account_info.account_id.ToString());
-  client_->GetPrefs()->SetString(prefs::kGoogleServicesLastUsername,
-                                 account_info.email);
 
   // Commit primary sync account info immediately so that it does not get lost
   // if Chrome crashes before the next commit interval.
@@ -200,20 +161,11 @@ void PrimaryAccountManager::SetPrimaryAc
 
   PrefService* prefs = client_->GetPrefs();
   const std::string& account_id = primary_account_info_.account_id.ToString();
-  if (account_id.empty()) {
-    DCHECK(!consented_to_sync);
-    prefs->ClearPref(prefs::kGoogleServicesAccountId);
-    prefs->ClearPref(prefs::kGoogleServicesConsentedToSync);
-  } else {
-    prefs->SetString(prefs::kGoogleServicesAccountId, account_id);
-    prefs->SetBoolean(prefs::kGoogleServicesConsentedToSync, consented_to_sync);
-  }
 }
 
 bool PrimaryAccountManager::HasPrimaryAccount(
     signin::ConsentLevel consent_level) const {
-  bool consented_pref =
-      client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
+  bool consented_pref = false;
   if (primary_account_info().account_id.empty()) {
     DCHECK(!consented_pref);
     return false;
--- a/components/signin/internal/identity_manager/primary_account_manager_unittest.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager_unittest.cc
@@ -24,7 +24,6 @@
 #include "components/signin/internal/identity_manager/fake_profile_oauth2_token_service_delegate.h"
 #include "components/signin/internal/identity_manager/primary_account_policy_manager.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/components/signin/internal/identity_manager/primary_account_mutator_impl.cc
+++ b/components/signin/internal/identity_manager/primary_account_mutator_impl.cc
@@ -14,7 +14,6 @@
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/core_account_id.h"
 
 namespace signin {
@@ -50,7 +49,7 @@ bool PrimaryAccountMutatorImpl::SetPrima
   AccountInfo account_info = account_tracker_->GetAccountInfo(account_id);
 
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!pref_service_->GetBoolean(prefs::kSigninAllowed))
+  if (true)
     return false;
 
   if (primary_account_manager_->HasPrimaryAccount(ConsentLevel::kSync))
--- a/components/signin/internal/identity_manager/primary_account_policy_manager_impl.cc
+++ b/components/signin/internal/identity_manager/primary_account_policy_manager_impl.cc
@@ -10,7 +10,6 @@
 #include "components/signin/internal/identity_manager/primary_account_manager.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/identity_utils.h"
 
@@ -28,18 +27,7 @@ void PrimaryAccountPolicyManagerImpl::In
   // local_state can be null during unit tests.
   if (local_state) {
     local_state_pref_registrar_.Init(local_state);
-    local_state_pref_registrar_.Add(
-        prefs::kGoogleServicesUsernamePattern,
-        base::BindRepeating(&PrimaryAccountPolicyManagerImpl::
-                                OnGoogleServicesUsernamePatternChanged,
-                            weak_pointer_factory_.GetWeakPtr(),
-                            primary_account_manager));
   }
-  signin_allowed_.Init(
-      prefs::kSigninAllowed, client_->GetPrefs(),
-      base::BindRepeating(
-          &PrimaryAccountPolicyManagerImpl::OnSigninAllowedPrefChanged,
-          base::Unretained(this), primary_account_manager));
 
   CoreAccountInfo account_info = primary_account_manager->GetPrimaryAccountInfo(
       signin::ConsentLevel::kSync);
--- a/components/signin/internal/identity_manager/primary_account_policy_manager_impl.h
+++ b/components/signin/internal/identity_manager/primary_account_policy_manager_impl.h
@@ -50,9 +50,6 @@ class PrimaryAccountPolicyManagerImpl :
   // profile-specific local prefs (like kGoogleServicesUsernamePattern).
   PrefChangeRegistrar local_state_pref_registrar_;
 
-  // Helper object to listen for changes to the signin allowed preference.
-  BooleanPrefMember signin_allowed_;
-
   base::WeakPtrFactory<PrimaryAccountPolicyManagerImpl> weak_pointer_factory_{
       this};
 
--- a/components/signin/internal/identity_manager/primary_account_policy_manager_impl_unittest.cc
+++ b/components/signin/internal/identity_manager/primary_account_policy_manager_impl_unittest.cc
@@ -15,7 +15,6 @@
 #include "components/signin/internal/identity_manager/primary_account_policy_manager_impl.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/account_consistency_method.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service.cc
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service.cc
@@ -12,7 +12,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service_delegate.h"
 #include "components/signin/public/base/device_id_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/gaia_constants.h"
 #include "google_apis/gaia/google_service_auth_error.h"
 #include "google_apis/gaia/oauth2_access_token_consumer.h"
@@ -135,8 +134,6 @@ bool ProfileOAuth2TokenService::HasRefre
 // static
 void ProfileOAuth2TokenService::RegisterProfilePrefs(
     PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGoogleServicesSigninScopedDeviceId,
-                               std::string());
 }
 
 ProfileOAuth2TokenServiceDelegate* ProfileOAuth2TokenService::GetDelegate() {
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_chromeos_unittest.cc
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_chromeos_unittest.cc
@@ -19,7 +19,6 @@
 #include "components/account_manager_core/account.h"
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service_observer.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/components/signin/public/base/BUILD.gn
+++ b/components/signin/public/base/BUILD.gn
@@ -34,8 +34,6 @@ static_library("base") {
     "signin_client.h",
     "signin_metrics.cc",
     "signin_metrics.h",
-    "signin_pref_names.cc",
-    "signin_pref_names.h",
     "signin_switches.cc",
     "signin_switches.h",
   ]
--- a/components/signin/public/base/device_id_helper.cc
+++ b/components/signin/public/base/device_id_helper.cc
@@ -9,7 +9,6 @@
 #include "base/guid.h"
 #include "build/chromeos_buildflags.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 
 namespace signin {
@@ -17,19 +16,12 @@ namespace signin {
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
 
 std::string GetSigninScopedDeviceId(PrefService* prefs) {
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kDisableSigninScopedDeviceId)) {
-    return std::string();
-  }
-
-  return GetOrCreateScopedDeviceId(prefs);
+  return std::string();
 }
 
 std::string RecreateSigninScopedDeviceId(PrefService* prefs) {
   std::string signin_scoped_device_id = GenerateSigninScopedDeviceId();
   DCHECK(!signin_scoped_device_id.empty());
-  prefs->SetString(prefs::kGoogleServicesSigninScopedDeviceId,
-                   signin_scoped_device_id);
   return signin_scoped_device_id;
 }
 
@@ -38,13 +30,7 @@ std::string GenerateSigninScopedDeviceId
 }
 
 std::string GetOrCreateScopedDeviceId(PrefService* prefs) {
-  std::string signin_scoped_device_id =
-      prefs->GetString(prefs::kGoogleServicesSigninScopedDeviceId);
-  if (signin_scoped_device_id.empty()) {
-    // If device_id doesn't exist then generate new and save in prefs.
-    signin_scoped_device_id = RecreateSigninScopedDeviceId(prefs);
-  }
-  return signin_scoped_device_id;
+  return RecreateSigninScopedDeviceId(prefs);
 }
 
 #endif
--- a/components/signin/public/base/device_id_helper_unittest.cc
+++ b/components/signin/public/base/device_id_helper_unittest.cc
@@ -8,7 +8,6 @@
 
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -24,40 +23,23 @@ TEST(DeviceIdHelper, GenerateSigninScope
 
 TEST(DeviceIdHelper, RecreateSigninScopedDeviceId) {
   sync_preferences::TestingPrefServiceSyncable prefs;
-  prefs.registry()->RegisterStringPref(
-      prefs::kGoogleServicesSigninScopedDeviceId, std::string());
-  ASSERT_TRUE(
-      prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId).empty());
 
   std::string device_id_1 = RecreateSigninScopedDeviceId(&prefs);
   EXPECT_FALSE(device_id_1.empty());
-  EXPECT_EQ(device_id_1,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 
   std::string device_id_2 = RecreateSigninScopedDeviceId(&prefs);
   EXPECT_FALSE(device_id_2.empty());
   EXPECT_NE(device_id_1, device_id_2);
-  EXPECT_EQ(device_id_2,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 }
 
 TEST(DeviceIdHelper, GetOrCreateScopedDeviceId) {
   sync_preferences::TestingPrefServiceSyncable prefs;
-  prefs.registry()->RegisterStringPref(
-      prefs::kGoogleServicesSigninScopedDeviceId, std::string());
-
-  ASSERT_TRUE(
-      prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId).empty());
 
   std::string device_id_1 = GetOrCreateScopedDeviceId(&prefs);
   EXPECT_FALSE(device_id_1.empty());
-  EXPECT_EQ(device_id_1,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 
   std::string device_id_2 = GetOrCreateScopedDeviceId(&prefs);
   EXPECT_EQ(device_id_1, device_id_2);
-  EXPECT_EQ(device_id_2,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 }
 
 #endif
--- a/components/signin/public/identity_manager/identity_utils.cc
+++ b/components/signin/public/identity_manager/identity_utils.cc
@@ -11,7 +11,6 @@
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "third_party/icu/source/i18n/unicode/regex.h"
 
 namespace signin {
@@ -56,8 +55,7 @@ bool IsUsernameAllowedByPattern(base::St
 
 bool IsUsernameAllowedByPatternFromPrefs(const PrefService* prefs,
                                          const std::string& username) {
-  return IsUsernameAllowedByPattern(
-      username, prefs->GetString(prefs::kGoogleServicesUsernamePattern));
+  return true;
 }
 
 }  // namespace signin
--- a/components/signin/public/identity_manager/identity_utils_unittest.cc
+++ b/components/signin/public/identity_manager/identity_utils_unittest.cc
@@ -7,7 +7,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace {
--- a/components/signin/public/identity_manager/primary_account_mutator_unittest.cc
+++ b/components/signin/public/identity_manager/primary_account_mutator_unittest.cc
@@ -14,7 +14,6 @@
 #include "build/chromeos_buildflags.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/consent_level.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
--- a/tools/metrics/histograms/enums.xml
+++ b/tools/metrics/histograms/enums.xml
@@ -74646,7 +74646,6 @@ Full version information for the fingerp
   <int value="3" label="kRestoreOnStartup"/>
   <int value="4" label="kURLsToRestoreOnStartup"/>
   <int value="5" label="extensions::pref_names::kExtensions"/>
-  <int value="6" label="kGoogleServicesLastUsername"/>
   <int value="7" label="kSearchProviderOverrides"/>
   <int value="8" label="kDefaultSearchProviderSearchURL (Obsolete 12/2016)"/>
   <int value="9" label="kDefaultSearchProviderKeyword (Obsolete 12/2016)"/>
@@ -74661,10 +74660,7 @@ Full version information for the fingerp
   <int value="18" label="kSafeBrowsingIncidentsSent"/>
   <int value="19" label="kSwReporterPromptVersion"/>
   <int value="20" label="kSwReporterPromptReason"/>
-  <int value="21" label="kGoogleServicesUsername (Obsolete 9/2019)"/>
   <int value="22" label="kSwReporterPromptSeed"/>
-  <int value="23" label="kGoogleServicesAccountId"/>
-  <int value="24" label="kGoogleServicesLastAccountId"/>
   <int value="25" label="kSettingsResetPromptPromptWave"/>
   <int value="26" label="kSettingsResetPromptLastTriggeredForDefaultSearch"/>
   <int value="27" label="kSettingsResetPromptLastTriggeredForStartupUrls"/>
