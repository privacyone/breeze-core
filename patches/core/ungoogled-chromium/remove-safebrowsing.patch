--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -131,4 +131,3 @@
   X("renderer.scheduler")                                                \
-  X("RLZ")                                                               \
-  X("safe_browsing")                                                     \
+  X("RLZ")                                                   \
   X("screenlock_monitor")                                                \
--- a/base/trace_event/memory_infra_background_allowlist.cc
+++ b/base/trace_event/memory_infra_background_allowlist.cc
@@ -240,14 +240,4 @@ const char* const kAllocatorDumpNameAllowlist[] = {
     "net/url_request_context/proxy/0x?/http_network_session",
-    "net/url_request_context/safe_browsing",
-    "net/url_request_context/safe_browsing/0x?",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/cookies",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
     "tasks_pending_global",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
     "tasks_pending_for_key",
-    "net/url_request_context/safe_browsing/0x?/http_cache",
-    "net/url_request_context/safe_browsing/0x?/http_cache/memory_backend",
-    "net/url_request_context/safe_browsing/0x?/http_cache/simple_backend",
-    "net/url_request_context/safe_browsing/0x?/http_network_session",
     "net/url_request_context/system",
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -46,3 +46,2 @@ source_set("chrome_dll_resources") {
       "chrome_dll.rc",
-      "etw_events/chrome_events_win.rc",
     ]
--- a/chrome/app/chromium_strings.grd
+++ b/chrome/app/chromium_strings.grd
@@ -519,10 +519,2 @@ Chromium is unable to recover your settings.
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chromium has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chromium has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -1711,10 +1711,2 @@ are declared in tools/grit/grit_rule.gni.
       </if>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> is not commonly downloaded and may be dangerous.
-      </message>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing. This variant is shown when the user is enrolled in the Advanced Protection program.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> was blocked by Advanced Protection.
-      </message>
       <message name="IDS_PROMPT_DEEP_SCANNING_DOWNLOAD"
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -328,4 +328,2 @@ static_library("browser") {
     "component_updater/sth_set_component_remover.h",
-    "component_updater/subresource_filter_component_installer.cc",
-    "component_updater/subresource_filter_component_installer.h",
     "component_updater/tls_deprecation_config_component_installer.cc",
@@ -1877,3 +1875,2 @@ static_library("browser") {
     "//chrome/browser/ui/webui/bluetooth_internals",
-    "//chrome/browser/safe_browsing",
   ]
@@ -1952,4 +1949,2 @@ static_library("browser") {
     "//chrome/browser/resource_coordinator:tab_manager_features",
-    "//chrome/browser/safe_browsing",
-    "//chrome/browser/safe_browsing:advanced_protection",
     "//chrome/browser/search/task_module:mojo_bindings",
@@ -2132,15 +2126,2 @@ static_library("browser") {
     "//components/resources",
-    "//components/safe_browsing/content/browser",
-    "//components/safe_browsing/content/password_protection",
-    "//components/safe_browsing/core:download_file_types_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core:file_type_policies",
-    "//components/safe_browsing/core:public",
-    "//components/safe_browsing/core/browser",
-    "//components/safe_browsing/core/browser/sync",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_policy_handler",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/realtime:policy_engine",
-    "//components/safe_browsing/core/realtime:url_lookup_service",
     "//components/safe_search_api",
@@ -4559,4 +4541,2 @@ static_library("browser") {
       "component_updater/recovery_improved_component_installer_win.cc",
-      "component_updater/sw_reporter_installer_win.cc",
-      "component_updater/sw_reporter_installer_win.h",
       "download/download_status_updater_win.cc",
@@ -4693,4 +4673,2 @@ static_library("browser") {
       "//chrome/app/theme:chrome_unscaled_resources_grit",
-      "//chrome/browser/safe_browsing/chrome_cleaner",
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/web_applications/chrome_pwa_launcher:util",
@@ -4724,4 +4702,2 @@ static_library("browser") {
     ]
-    allow_circular_includes_from +=
-        [ "//chrome/browser/safe_browsing/chrome_cleaner" ]
 
@@ -6456,5 +6425,2 @@ grit("resources") {
 
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/browser/ui/webui/reset_password:mojo_bindings_js" ]
-  }
 }
@@ -6606,3 +6572,2 @@ static_library("test_support") {
     ":browser",
-    "//chrome/browser/safe_browsing:test_support",
     "//chrome/browser/ui:test_support",
@@ -6613,3 +6578,2 @@ static_library("test_support") {
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/consent_auditor:test_support",
@@ -6623,3 +6587,2 @@ static_library("test_support") {
     "//components/reputation/core:proto",
-    "//components/safe_browsing/core:csd_proto",
     "//components/search_engines:test_support",
@@ -6817,3 +6780,3 @@ static_library("test_support") {
 
-  if (safe_browsing_mode != 0) {
+  if (safe_browsing_mode != 0 && false) {
     # "Safe Browsing Basic" files used for safe browsing in full mode
@@ -6831,3 +6794,3 @@ static_library("test_support") {
 
-  if (safe_browsing_mode == 1) {
+  if (safe_browsing_mode == 1 && false) {
     sources += [
--- a/chrome/browser/DEPS
+++ b/chrome/browser/DEPS
@@ -242,3 +242,2 @@ include_rules = [
   "+components/rlz",
-  "+components/safe_browsing",
   "+components/safe_search_api",
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -115,3 +115,2 @@
 #include "components/reading_list/features/reading_list_switches.h"
-#include "components/safe_browsing/core/features.h"
 #include "components/search/ntp_features.h"
@@ -5786,44 +5786,12 @@ const FeatureEntry kFeatureEntries[] = {
 #endif
 
 #if defined(OS_ANDROID)
-    {"safe-browsing-client-side-detection-android",
-     flag_descriptions::kSafeBrowsingClientSideDetectionAndroidName,
-     flag_descriptions::kSafeBrowsingClientSideDetectionAndroidDescription,
-     kOsAndroid,
-     FEATURE_VALUE_TYPE(safe_browsing::kClientSideDetectionForAndroid)},
-
-    {"safe-browsing-enhanced-protection-android",
-     flag_descriptions::kSafeBrowsingEnhancedProtectionAndroidName,
-     flag_descriptions::kSafeBrowsingEnhancedProtectionAndroidDescription,
-     kOsAndroid, FEATURE_VALUE_TYPE(safe_browsing::kEnhancedProtection)},
-
     {"safe-browsing-enhanced-protection-promo-android",
      flag_descriptions::kEnhancedProtectionPromoAndroidName,
      flag_descriptions::kEnhancedProtectionPromoAndroidDescription, kOsAndroid,
      FEATURE_VALUE_TYPE(chrome::android::kEnhancedProtectionPromoCard)},
-
-    {"safe-browsing-security-section-ui-android",
-     flag_descriptions::kSafeBrowsingSectionUiAndroidName,
-     flag_descriptions::kSafeBrowsingSectionUiAndroidDescription, kOsAndroid,
-     FEATURE_VALUE_TYPE(safe_browsing::kSafeBrowsingSectionUIAndroid)},
 #endif
 
-    {"safe-browsing-enhanced-protection-message-in-interstitials",
-     flag_descriptions::
-         kSafeBrowsingEnhancedProtectionMessageInInterstitialsName,
-     flag_descriptions::
-         kSafeBrowsingEnhancedProtectionMessageInInterstitialsDescription,
-     kOsAll,
-     FEATURE_VALUE_TYPE(
-         safe_browsing::kEnhancedProtectionMessageInInterstitials)},
-
-    {"safe-browsing-real-time-url-lookup-enterprise-ga-endpoint",
-     flag_descriptions::kSafeBrowsingRealTimeUrlLookupEnterpriseGaEndpointName,
-     flag_descriptions::
-         kSafeBrowsingRealTimeUrlLookupEnterpriseGaEndpointDescription,
-     kOsAll,
-     FEATURE_VALUE_TYPE(safe_browsing::kRealTimeUrlLookupEnterpriseGaEndpoint)},
-
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     {"gesture-properties-dbus-service",
      flag_descriptions::kEnableGesturePropertiesDBusServiceName,
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -214,7 +214,2 @@ class BrowserProcess {
 
-  // Returns the service providing versioned storage for rules used by the Safe
-  // Browsing subresource filter.
-  virtual subresource_filter::RulesetService*
-  subresource_filter_ruleset_service() = 0;
-
   // Returns the service providing versioned storage for a list of limit values
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -108,3 +108,2 @@
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/core/safe_browsing_service_interface.h"
 #include "components/sessions/core/session_id_generator.h"
@@ -984,10 +983,2 @@ StatusTray* BrowserProcessImpl::status_tray() {
 
-subresource_filter::RulesetService*
-BrowserProcessImpl::subresource_filter_ruleset_service() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!created_subresource_filter_ruleset_service_)
-    CreateSubresourceFilterRulesetService();
-  return subresource_filter_ruleset_service_.get();
-}
-
 federated_learning::FlocSortingLshClustersService*
@@ -1242,12 +1233,2 @@ void BrowserProcessImpl::CreateBackgroundPrintingManager() {
 
-void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
-  DCHECK(!subresource_filter_ruleset_service_);
-  created_subresource_filter_ruleset_service_ = true;
-
-  base::FilePath user_data_dir;
-  base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
-  subresource_filter_ruleset_service_ =
-      subresource_filter::RulesetService::Create(local_state(), user_data_dir);
-}
-
 void BrowserProcessImpl::CreateFlocSortingLshClustersService() {
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -171,4 +171,2 @@ class BrowserProcessImpl : public BrowserProcess,
   StatusTray* status_tray() override;
-  subresource_filter::RulesetService* subresource_filter_ruleset_service()
-      override;
   federated_learning::FlocSortingLshClustersService*
@@ -221,4 +219,2 @@ class BrowserProcessImpl : public BrowserProcess,
   void CreateBackgroundPrintingManager();
-  void CreateSafeBrowsingService();
-  void CreateSubresourceFilterRulesetService();
   void CreateFlocBlocklistService();
--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -487,7 +487,2 @@
       </if>
-      <if expr="safe_browsing_mode == 1">
-        <include name="IDR_RESET_PASSWORD_HTML" file="resources\reset_password\reset_password.html" type="BINDATA" />
-        <include name="IDR_RESET_PASSWORD_JS" file="resources\reset_password\reset_password.js" type="BINDATA" />
-        <include name="IDR_RESET_PASSWORD_MOJOM_WEBUI_JS" file="${root_gen_dir}\mojom-webui\chrome\browser\ui\webui\reset_password\reset_password.mojom-webui.js" use_base_dir="false" type="BINDATA" />
-      </if>
       <if expr="not is_android">
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -1092,8 +1092,2 @@ void ChromeBrowserMainParts::PreBrowserStart() {
 #endif
-
-  // The RulesetService will make the filtering rules available to renderers
-  // immediately after its construction, provided that the rules are already
-  // available at no cost in an indexed format. This enables activating
-  // subresource filtering, if needed, also for page loads on start-up.
-  g_browser_process->subresource_filter_ruleset_service();
 }
--- a/chrome/browser/chrome_browser_main_win.cc
+++ b/chrome/browser/chrome_browser_main_win.cc
@@ -51,5 +51,2 @@
 #include "chrome/browser/profiles/profile_shortcut_manager.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_util_win.h"
 #include "chrome/browser/shell_integration_win.h"
@@ -450,11 +447,2 @@ void ShowCloseBrowserFirstMessageBox() {
 
-void MaybePostSettingsResetPrompt() {
-  if (base::FeatureList::IsEnabled(safe_browsing::kSettingsResetPrompt)) {
-    content::GetUIThreadTaskRunner({base::TaskPriority::BEST_EFFORT})
-        ->PostTask(FROM_HERE,
-                   base::BindOnce(
-                       safe_browsing::MaybeShowSettingsResetPromptWithDelay));
-  }
-}
-
 // Updates all Progressive Web App launchers in |profile_dir| to the latest
@@ -679,19 +667,2 @@ void ChromeBrowserMainPartsWin::PostBrowserStart() {
 
-  // Reset settings for the current profile if it's tagged to be reset after a
-  // complete run of the Chrome Cleanup tool. If post-cleanup settings reset is
-  // enabled, we delay checks for settings reset prompt until the scheduled
-  // reset is finished.
-  if (safe_browsing::PostCleanupSettingsResetter::IsEnabled() &&
-      !parsed_command_line().HasSwitch(switches::kAppId)) {
-    // Using last opened profiles, because we want to find reset the profile
-    // that was open in the last Chrome run, which may not be open yet in
-    // the current run.
-    safe_browsing::PostCleanupSettingsResetter().ResetTaggedProfiles(
-        g_browser_process->profile_manager()->GetLastOpenedProfiles(),
-        base::BindOnce(&MaybePostSettingsResetPrompt),
-        std::make_unique<
-            safe_browsing::PostCleanupSettingsResetter::Delegate>());
-  } else {
-    MaybePostSettingsResetPrompt();
-  }
   // Record UMA data about whether the fault-tolerant heap is enabled.
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -120,11 +120,2 @@
 #include "chrome/browser/resource_coordinator/background_tab_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
-#include "chrome/browser/safe_browsing/delayed_warning_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
-#include "chrome/browser/safe_browsing/url_checker_delegate_impl.h"
-#include "chrome/browser/safe_browsing/url_lookup_service_factory.h"
 #include "chrome/browser/search/search.h"
@@ -254,9 +245,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
-#include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
-#include "components/safe_browsing/core/browser/url_checker_delegate.h"
-#include "components/safe_browsing/core/db/database_manager.h"
-#include "components/safe_browsing/core/features.h"
-#include "components/safe_browsing/core/realtime/policy_engine.h"
-#include "components/safe_browsing/core/realtime/url_lookup_service.h"
 #include "components/security_interstitials/content/insecure_form_navigation_throttle.h"
@@ -5159,32 +5143,2 @@ const ui::NativeTheme* ChromeContentBrowserClient::GetWebTheme() const {
 
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-ChromeContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate(
-    bool safe_browsing_enabled_for_profile,
-    bool should_check_on_sb_disabled) {
-  DCHECK_CURRENTLY_ON(BrowserThread::IO);
-
-  return nullptr;
-}
-
-safe_browsing::RealTimeUrlLookupServiceBase*
-ChromeContentBrowserClient::GetUrlLookupService(
-    content::BrowserContext* browser_context,
-    bool is_enterprise_lookup_enabled,
-    bool is_consumer_lookup_enabled) {
-  // |safe_browsing_service_| may be unavailable in tests.
-  if (!safe_browsing_service_) {
-    return nullptr;
-  }
-
-  Profile* profile = Profile::FromBrowserContext(browser_context);
-
-#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
-  if (is_enterprise_lookup_enabled) {
-    return safe_browsing::ChromeEnterpriseRealTimeUrlLookupServiceFactory::
-        GetForProfile(profile);
-  }
-#endif
-  return nullptr;
-}
-
 base::Optional<std::string>
--- a/chrome/browser/enterprise/connectors/reporting_service_settings.cc
+++ b/chrome/browser/enterprise/connectors/reporting_service_settings.cc
@@ -35,17 +35,6 @@ ReportingServiceSettings::ReportingServiceSettings(
       else
         DVLOG(1) << "Enabled event name list contains a non string value!";
     }
-  } else {
-    // When the list of enabled event names is not set, we assume all events are
-    // enabled. This is to support the feature of selecting the "All always on"
-    // option in the policy UI, which means to always enable all events, even
-    // when new events may be added in the future. And this is also to support
-    // existing customer policies that were created before we introduced the
-    // concept of enabling/disabling events.
-    for (auto* event_name :
-         extensions::SafeBrowsingPrivateEventRouter::kAllEvents) {
-      enabled_event_names_.insert(event_name);
-    }
   }
 }
 
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -67,8 +67,2 @@ class PreviewsUserData;
 
-namespace safe_browsing {
-class RealTimeUrlLookupServiceBase;
-class SafeBrowsingService;
-class UrlCheckerDelegate;
-}  // namespace safe_browsing
-
 namespace sandbox {
@@ -756,22 +750,2 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
 
-  // Returns the existing UrlCheckerDelegate object if it is already created.
-  // Otherwise, creates a new one and returns it. It returns nullptr if
-  // |safe_browsing_enabled_for_profile| is false, because it should bypass safe
-  // browsing check when safe browsing is disabled. Set
-  // |should_check_on_sb_disabled| to true if you still want to perform safe
-  // browsing check when safe browsing is disabled(e.g. for enterprise real time
-  // URL check).
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-  GetSafeBrowsingUrlCheckerDelegate(bool safe_browsing_enabled_for_profile,
-                                    bool should_check_on_sb_disabled);
-
-  // Returns a RealTimeUrlLookupServiceBase object used for real time URL check.
-  // Returns an enterprise version if |is_enterprise_lookup_enabled| is true.
-  // Returns a consumer version if |is_enterprise_lookup_enabled| is false and
-  // |is_consumer_lookup_enabled| is true. Returns nullptr if both are false.
-  safe_browsing::RealTimeUrlLookupServiceBase* GetUrlLookupService(
-      content::BrowserContext* browser_context,
-      bool is_enterprise_lookup_enabled,
-      bool is_consumer_lookup_enabled);
-
   void OnKeepaliveTimerFired(
@@ -783,6 +757,2 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
 
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-      safe_browsing_url_checker_delegate_;
-
   StartupData startup_data_;
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -29,3 +29,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
@@ -75,33 +74,2 @@ namespace {
 
-// Helper method for ExposeInterfacesToRenderer() that checks the latest
-// SafeBrowsing pref value on the UI thread before hopping over to the IO
-// thread.
-void MaybeCreateSafeBrowsingForRenderer(
-    int process_id,
-    content::ResourceContext* resource_context,
-    base::RepeatingCallback<scoped_refptr<safe_browsing::UrlCheckerDelegate>(
-        bool safe_browsing_enabled,
-        bool should_check_on_sb_disabled)> get_checker_delegate,
-    mojo::PendingReceiver<safe_browsing::mojom::SafeBrowsing> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  content::RenderProcessHost* render_process_host =
-      content::RenderProcessHost::FromID(process_id);
-  if (!render_process_host)
-    return;
-
-  bool safe_browsing_enabled = false;
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(
-          &safe_browsing::MojoSafeBrowsingImpl::MaybeCreate, process_id,
-          resource_context,
-          base::BindRepeating(get_checker_delegate, safe_browsing_enabled,
-                              // Navigation initiated from renderer should never
-                              // check when safe browsing is disabled, because
-                              // enterprise check only supports mainframe URL.
-                              /*should_check_on_sb_disabled=*/false),
-          std::move(receiver)));
-}
-
 }  // namespace
--- a/chrome/browser/component_updater/file_type_policies_component_installer.cc
+++ b/chrome/browser/component_updater/file_type_policies_component_installer.cc
@@ -22,3 +22,2 @@
 #include "components/component_updater/component_updater_paths.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 
--- a/chrome/browser/ui/webui/new_tab_page/promo_browser_command/promo_browser_command_handler.cc
+++ b/chrome/browser/ui/webui/new_tab_page/promo_browser_command/promo_browser_command_handler.cc
@@ -18,4 +18,2 @@
 #include "chrome/common/webui_url_constants.h"
-#include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_policy_handler.h"
 #include "components/safe_browsing/core/common/safe_browsing_prefs.h"
--- a/components/safe_browsing/content/web_ui/safe_browsing_ui.h
+++ b/components/safe_browsing/content/web_ui/safe_browsing_ui.h
@@ -10,8 +10,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/browser/safe_browsing_network_context.h"
-#include "components/safe_browsing/core/proto/csd.pb.h"
-#include "components/safe_browsing/core/proto/realtimeapi.pb.h"
-#include "components/safe_browsing/core/proto/webui.pb.h"
-#include "components/safe_browsing/core/safe_browsing_service_interface.h"
-#include "components/sync/protocol/user_event_specifics.pb.h"
 #include "content/public/browser/web_ui_controller.h"
--- a/chrome/browser/component_updater/registration.cc
+++ b/chrome/browser/component_updater/registration.cc
@@ -121,3 +121,2 @@ void RegisterComponentsForUpdate(bool is_off_the_record_profile,
 
-  RegisterSubresourceFilterComponent(cus);
   RegisterFlocComponent(cus,
@@ -161,3 +160,2 @@ void RegisterComponentsForUpdate(bool is_off_the_record_profile,
   // builds or tests.
-  RegisterSwReporterComponent(cus);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -45,9 +45,4 @@
 #include "chrome/browser/enterprise/connectors/common.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ui/chrome_pages.h"
@@ -71,3 +66,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "components/services/quarantine/public/mojom/quarantine.mojom.h"
@@ -131,3 +125,2 @@ using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadProtectionService;
 
@@ -839,15 +832,2 @@ ChromeDownloadManagerDelegate::ApplicationClientIdForFileScanning() {
 
-DownloadProtectionService*
-    ChromeDownloadManagerDelegate::GetDownloadProtectionService() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && sb_service->download_protection_service()) {
-    return sb_service->download_protection_service();
-  }
-#endif
-  return nullptr;
-}
-
 void ChromeDownloadManagerDelegate::GetMixedContentStatus(
--- a/chrome/browser/download/chrome_download_manager_delegate.h
+++ b/chrome/browser/download/chrome_download_manager_delegate.h
@@ -24,4 +24,2 @@
 #include "chrome/browser/download/download_target_info.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "components/download/public/common/download_danger_type.h"
@@ -140,21 +138,4 @@ class ChromeDownloadManagerDelegate
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  // The state of a safebrowsing check.
-  class SafeBrowsingState : public DownloadCompletionBlocker {
-   public:
-    SafeBrowsingState() = default;
-    ~SafeBrowsingState() override;
-
-    // String pointer used for identifying safebrowing data associated with
-    // a download item.
-    static const char kSafeBrowsingUserDataKey[];
-
-   private:
-    DISALLOW_COPY_AND_ASSIGN(SafeBrowsingState);
-  };
-#endif  // FULL_SAFE_BROWSING
-
   // Callback function after the DownloadProtectionService completes.
-  void CheckClientDownloadDone(uint32_t download_id,
-                               safe_browsing::DownloadCheckResult result);
+  void CheckClientDownloadDone(uint32_t download_id);
 
@@ -166,5 +147,2 @@ class ChromeDownloadManagerDelegate
  protected:
-  virtual safe_browsing::DownloadProtectionService*
-      GetDownloadProtectionService();
-
   // Show file picker for |download|.
--- a/chrome/browser/download/chrome_download_manager_delegate_unittest.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate_unittest.cc
@@ -32,3 +32,2 @@
 #include "chrome/browser/download/mixed_content_download_blocking.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/common/buildflags.h"
@@ -81,3 +80,2 @@ using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadFileType;
 using ::testing::_;
@@ -211,5 +209,2 @@ class TestChromeDownloadManagerDelegate : public ChromeDownloadManagerDelegate {
 
-  MOCK_METHOD0(GetDownloadProtectionService,
-               safe_browsing::DownloadProtectionService*());
-
   // The concrete implementation on desktop just invokes a file picker. Android
@@ -679,4 +674,2 @@ TEST_F(ChromeDownloadManagerDelegateTest, MaybeDangerousContent) {
 
-    EXPECT_EQ(DownloadFileType::DANGEROUS,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
@@ -692,4 +685,2 @@ TEST_F(ChromeDownloadManagerDelegateTest, MaybeDangerousContent) {
     DetermineDownloadTarget(download_item.get(), &result);
-    EXPECT_EQ(DownloadFileType::NOT_DANGEROUS,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
@@ -705,4 +696,2 @@ TEST_F(ChromeDownloadManagerDelegateTest, MaybeDangerousContent) {
     DetermineDownloadTarget(download_item.get(), &result);
-    EXPECT_EQ(DownloadFileType::ALLOW_ON_USER_GESTURE,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
@@ -1326,3 +1315,2 @@ struct SafeBrowsingTestParameters {
   download::DownloadDangerType initial_danger_type;
-  DownloadFileType::DangerLevel initial_danger_level;
   safe_browsing::DownloadCheckResult verdict;
@@ -1378,3 +1366,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS, safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1386,4 +1373,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1395,4 +1380,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1404,4 +1387,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1413,4 +1394,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1422,4 +1401,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1431,4 +1408,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1440,4 +1415,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::DANGEROUS_FILES,
@@ -1449,4 +1422,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
@@ -1458,4 +1429,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1467,4 +1436,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
@@ -1476,4 +1443,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
@@ -1485,4 +1450,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
@@ -1494,4 +1457,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1503,4 +1464,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1513,4 +1472,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::POTENTIALLY_DANGEROUS_FILES,
@@ -1523,4 +1480,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::DANGEROUS_FILES,
@@ -1533,4 +1488,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
@@ -1542,3 +1495,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1550,3 +1502,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1558,3 +1509,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1566,3 +1516,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1574,4 +1523,2 @@ const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
@@ -1599,7 +1546,2 @@ TEST_P(ChromeDownloadManagerDelegateTestWithSafeBrowsing, CheckClientDownload) {
 
-  if (kParameters.initial_danger_level != DownloadFileType::NOT_DANGEROUS) {
-    DownloadItemModel(download_item.get())
-        .SetDangerLevel(kParameters.initial_danger_level);
-  }
-
   if (kParameters.blocked) {
--- a/chrome/browser/download/download_browsertest.cc
+++ b/chrome/browser/download/download_browsertest.cc
@@ -66,3 +66,2 @@
 #include "chrome/browser/renderer_context_menu/render_view_context_menu_test_util.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/browser/ui/browser.h"
@@ -98,5 +97,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/proto/csd.pb.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
-#include "components/safe_browsing/core/safe_browsing_service_interface.h"
 #include "components/security_state/core/features.h"
@@ -1249,6 +1245,7 @@ INSTANTIATE_TEST_SUITE_P(
 
 namespace {
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 class FakeDownloadProtectionService
     : public safe_browsing::DownloadProtectionService {
  public:
@@ -1321,6 +1318,7 @@ class DownloadTestWithFakeSafeBrowsing : public DownloadTest {
  protected:
   std::unique_ptr<TestSafeBrowsingServiceFactory> test_safe_browsing_factory_;
 };
+#endif // BUILDFLAG(FULL_SAFE_BROWSING)
 
 class DownloadWakeLockTest : public DownloadTest {
  public:
@@ -4431,4 +4429,2 @@ class DisableSafeBrowsingOnInProgressDownload
     EXPECT_FALSE(download->IsDangerous());
-    EXPECT_NE(safe_browsing::DownloadFileType::NOT_DANGEROUS,
-              DownloadItemModel(download).GetDangerLevel());
     return true;
@@ -4537,3 +4533,2 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceDiscardDownload) {
   prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-  safe_browsing::SetExtendedReportingPrefForTests(prefs, true);
 
@@ -4558,30 +4553,2 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceDiscardDownload) {
   EXPECT_TRUE(downloads[0]->IsDangerous());
-
-  // Save fake pings for the download.
-  safe_browsing::ClientDownloadReport fake_metadata;
-  fake_metadata.mutable_download_request()->set_url("http://test");
-  fake_metadata.mutable_download_request()->set_length(1);
-  fake_metadata.mutable_download_request()->mutable_digests()->set_sha1("hi");
-  fake_metadata.mutable_download_response()->set_verdict(
-      safe_browsing::ClientDownloadResponse::UNCOMMON);
-  std::string ping_request(
-      fake_metadata.download_request().SerializeAsString());
-  std::string ping_response(
-      fake_metadata.download_response().SerializeAsString());
-  safe_browsing::DownloadFeedbackService::MaybeStorePingsForDownload(
-      safe_browsing::DownloadCheckResult::UNCOMMON, true /* upload_requested */,
-      downloads[0], ping_request, ping_response);
-  ASSERT_TRUE(safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *(downloads[0])));
-
-  // Begin feedback and check that the file is "stolen".
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  safe_browsing::DownloadProtectionService* download_protection_service =
-      sb_service->download_protection_service();
-  download_protection_service->MaybeBeginFeedbackForDownload(
-      browser()->profile(), downloads[0], DownloadCommands::DISCARD);
-  std::vector<DownloadItem*> updated_downloads;
-  GetDownloads(browser(), &updated_downloads);
-  ASSERT_TRUE(updated_downloads.empty());
 }
@@ -4591,3 +4558,2 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceKeepDownload) {
   prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-  safe_browsing::SetExtendedReportingPrefForTests(prefs, true);
 
@@ -4618,26 +4584,3 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceKeepDownload) {
 
-  // Save fake pings for the download.
-  safe_browsing::ClientDownloadReport fake_metadata;
-  fake_metadata.mutable_download_request()->set_url("http://test");
-  fake_metadata.mutable_download_request()->set_length(1);
-  fake_metadata.mutable_download_request()->mutable_digests()->set_sha1("hi");
-  fake_metadata.mutable_download_response()->set_verdict(
-      safe_browsing::ClientDownloadResponse::UNCOMMON);
-  std::string ping_request(
-      fake_metadata.download_request().SerializeAsString());
-  std::string ping_response(
-      fake_metadata.download_response().SerializeAsString());
-  safe_browsing::DownloadFeedbackService::MaybeStorePingsForDownload(
-      safe_browsing::DownloadCheckResult::UNCOMMON, true /* upload_requested */,
-      downloads[0], ping_request, ping_response);
-  ASSERT_TRUE(safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *(downloads[0])));
-
   // Begin feedback and check that file is still there.
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  safe_browsing::DownloadProtectionService* download_protection_service =
-      sb_service->download_protection_service();
-  download_protection_service->MaybeBeginFeedbackForDownload(
-      browser()->profile(), downloads[0], DownloadCommands::KEEP);
   completion_observer->WaitForFinished();
@@ -4676,14 +4619,2 @@ IN_PROC_BROWSER_TEST_F(DownloadTestWithFakeSafeBrowsing,
 
-  safe_browsing::ClientSafeBrowsingReportRequest actual_report;
-  actual_report.ParseFromString(
-      test_safe_browsing_factory_->fake_safe_browsing_service()
-          ->serilized_download_report());
-  EXPECT_EQ(safe_browsing::ClientSafeBrowsingReportRequest::
-                DANGEROUS_DOWNLOAD_WARNING,
-            actual_report.type());
-  EXPECT_EQ(safe_browsing::ClientDownloadResponse::UNCOMMON,
-            actual_report.download_verdict());
-  EXPECT_EQ(download_url.spec(), actual_report.url());
-  EXPECT_TRUE(actual_report.did_proceed());
-
   download->Cancel(true);
@@ -4713,6 +4644,2 @@ IN_PROC_BROWSER_TEST_F(
   DownloadCommands(&model).ExecuteCommand(DownloadCommands::DISCARD);
-
-  EXPECT_TRUE(test_safe_browsing_factory_->fake_safe_browsing_service()
-                  ->serilized_download_report()
-                  .empty());
 }
--- a/chrome/browser/download/download_item_model_unittest.cc
+++ b/chrome/browser/download/download_item_model_unittest.cc
@@ -24,3 +24,2 @@
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 using ::testing::Mock;
@@ -361,8 +360,2 @@ TEST_F(DownloadItemModelTest, DangerLevel) {
   SetupDownloadItemDefaults();
-
-  // Default danger level is NOT_DANGEROUS.
-  EXPECT_EQ(DownloadFileType::NOT_DANGEROUS, model().GetDangerLevel());
-
-  model().SetDangerLevel(DownloadFileType::ALLOW_ON_USER_GESTURE);
-  EXPECT_EQ(DownloadFileType::ALLOW_ON_USER_GESTURE, model().GetDangerLevel());
 }
--- a/chrome/browser/download/download_prefs.cc
+++ b/chrome/browser/download/download_prefs.cc
@@ -43,3 +43,2 @@
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "content/public/browser/browser_thread.h"
@@ -62,3 +61,2 @@ using content::BrowserThread;
 using content::DownloadManager;
-using safe_browsing::FileTypePolicies;
 
@@ -222,4 +220,2 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
   save_file_type_.Init(prefs::kSaveFileType, prefs);
-  safebrowsing_for_trusted_sources_enabled_.Init(
-      prefs::kSafeBrowsingForTrustedSourcesEnabled, prefs);
   download_restriction_.Init(prefs::kDownloadRestrictions, prefs);
@@ -287,4 +283,2 @@ void DownloadPrefs::RegisterProfilePrefs(
   registry->RegisterIntegerPref(prefs::kDownloadRestrictions, 0);
-  registry->RegisterBooleanPref(prefs::kSafeBrowsingForTrustedSourcesEnabled,
-                                true);
 
--- a/chrome/browser/download/download_prefs.h
+++ b/chrome/browser/download/download_prefs.h
@@ -79,5 +79,2 @@ class DownloadPrefs {
   }
-  bool safebrowsing_for_trusted_sources_enabled() const {
-    return *safebrowsing_for_trusted_sources_enabled_;
-  }
 
@@ -159,3 +156,2 @@ class DownloadPrefs {
   IntegerPrefMember download_restriction_;
-  BooleanPrefMember safebrowsing_for_trusted_sources_enabled_;
 
--- a/chrome/browser/download/notification/download_item_notification.cc
+++ b/chrome/browser/download/notification/download_item_notification.cc
@@ -29,4 +29,2 @@
 #include "chrome/browser/notifications/notification_handler.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/chrome_pages.h"
@@ -842,10 +840,4 @@ base::string16 DownloadItemNotification::GetWarningStatusString() const {
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool requests_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->IsUnderAdvancedProtection();
       return l10n_util::GetStringFUTF16(
-          requests_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
+          IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
           elided_filename);
--- a/chrome/browser/download/notification/download_notification_browsertest.cc
+++ b/chrome/browser/download/notification/download_notification_browsertest.cc
@@ -92,9 +92,2 @@ class TestChromeDownloadManagerDelegate : public ChromeDownloadManagerDelegate {
 
- protected:
-  // Disable DownloadProtectionService in order to disable content checking.
-  safe_browsing::DownloadProtectionService* GetDownloadProtectionService()
-      override {
-    return nullptr;
-  }
-
  private:
--- a/chrome/browser/download/save_package_file_picker.cc
+++ b/chrome/browser/download/save_package_file_picker.cc
@@ -47,3 +47,2 @@ bool g_should_prompt_for_filename = true;
 void OnSavePackageDownloadCreated(download::DownloadItem* download) {
-  ChromeDownloadManagerDelegate::DisableSafeBrowsing(download);
 }
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -303,10 +303,2 @@ static_library("extensions") {
     "api/runtime/chrome_runtime_api_delegate.h",
-    "api/safe_browsing_private/safe_browsing_private_api.cc",
-    "api/safe_browsing_private/safe_browsing_private_api.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.h",
-    "api/safe_browsing_private/safe_browsing_util.cc",
-    "api/safe_browsing_private/safe_browsing_util.h",
     "api/scripting/scripting_api.cc",
@@ -738,5 +730,2 @@ static_library("extensions") {
     "//chrome/browser/web_applications/extensions",
-
-    # TODO(crbug/925153): Remove this circular dependency.
-    "//chrome/browser/safe_browsing",
   ]
@@ -753,4 +742,2 @@ static_library("extensions") {
     "//components/omnibox/browser",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core/db:util",
     "//components/signin/core/browser",
@@ -781,3 +768,2 @@ static_library("extensions") {
     "//chrome/browser/resource_coordinator:mojo_bindings",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/web_applications",
@@ -789,3 +775,2 @@ static_library("extensions") {
     "//chrome/common/extensions/api:extensions_features",
-    "//chrome/common/safe_browsing:proto",
     "//chrome/services/removable_storage_writer/public/mojom",
@@ -837,7 +822,2 @@ static_library("extensions") {
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/web_ui:web_ui",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/db:database_manager",
     "//components/search_engines",
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
@@ -31,4 +31,2 @@
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
@@ -66,4 +64,2 @@
 
-using safe_browsing::SafeBrowsingNavigationObserverManager;
-
 namespace extensions {
--- a/chrome/browser/extensions/blocklist.cc
+++ b/chrome/browser/extensions/blocklist.cc
@@ -20,6 +20,3 @@
 #include "chrome/browser/extensions/blocklist_state_fetcher.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/db/util.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -29,3 +26,3 @@
 using content::BrowserThread;
-using safe_browsing::SafeBrowsingDatabaseManager;
+ 
 
@@ -33,6 +30,7 @@
 
 namespace extensions {
 
+#if (false)
 namespace {
 
 // The safe browsing database manager to use. Make this a global/static variable
@@ -155,6 +153,7 @@ void GetMalwareFromBlocklistStateMap(
 
 }  // namespace
 
+#endif //false
 Blocklist::Observer::Observer(Blocklist* blocklist) : blocklist_(blocklist) {
   blocklist_->AddObserver(this);
 }
@@ -165,20 +164,3 @@ Blocklist::Observer::~Observer() {
 
-Blocklist::ScopedDatabaseManagerForTest::ScopedDatabaseManagerForTest(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager)
-    : original_(GetDatabaseManager()) {
-  SetDatabaseManager(database_manager);
-}
-
-Blocklist::ScopedDatabaseManagerForTest::~ScopedDatabaseManagerForTest() {
-  SetDatabaseManager(original_);
-}
-
 Blocklist::Blocklist(ExtensionPrefs* prefs) {
-  auto& lazy_database_manager = g_database_manager.Get();
-  // Using base::Unretained is safe because when this object goes away, the
-  // subscription will automatically be destroyed.
-  database_changed_subscription_ =
-      lazy_database_manager.RegisterDatabaseChangedCallback(base::BindRepeating(
-          &Blocklist::ObserveNewDatabase, base::Unretained(this)));
-
   ObserveNewDatabase();
@@ -197,3 +179,3 @@ void Blocklist::GetBlocklistedIDs(const std::set<std::string>& ids,
 
-  if (ids.empty() || !GetDatabaseManager().get()) {
+  if (ids.empty()) {
     base::ThreadTaskRunnerHandle::Get()->PostTask(
@@ -202,10 +184,2 @@ void Blocklist::GetBlocklistedIDs(const std::set<std::string>& ids,
   }
-
-  // Constructing the SafeBrowsingClientImpl begins the process of asking
-  // safebrowsing for the blocklisted extensions. The set of blocklisted
-  // extensions returned by SafeBrowsing will then be passed to
-  // GetBlocklistStateIDs to get the particular BlocklistState for each id.
-  SafeBrowsingClientImpl::Start(
-      ids, base::BindOnce(&Blocklist::GetBlocklistStateForIDs, AsWeakPtr(),
-                          std::move(callback)));
 }
@@ -214,4 +188,2 @@ void Blocklist::GetMalwareIDs(const std::set<std::string>& ids,
                               GetMalwareIDsCallback callback) {
-  GetBlocklistedIDs(ids, base::BindOnce(&GetMalwareFromBlocklistStateMap,
-                                        std::move(callback)));
 }
@@ -222,4 +194,2 @@ void Blocklist::IsBlocklisted(const std::string& extension_id,
   check.insert(extension_id);
-  GetBlocklistedIDs(
-      check, base::BindOnce(&CheckOneExtensionState, std::move(callback)));
 }
@@ -340,25 +310,4 @@ void Blocklist::RemoveObserver(Observer* observer) {
 
-// static
-void Blocklist::SetDatabaseManager(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager) {
-  g_database_manager.Get().set(database_manager);
-}
-
-// static
-scoped_refptr<SafeBrowsingDatabaseManager> Blocklist::GetDatabaseManager() {
-  return g_database_manager.Get().get();
-}
-
 void Blocklist::ObserveNewDatabase() {
-  auto database_manager = GetDatabaseManager();
-  if (database_manager.get()) {
-    // Using base::Unretained is safe because when this object goes away, the
-    // subscription from the callback list will automatically be destroyed.
-    database_updated_subscription_ =
-        database_manager.get()->RegisterDatabaseUpdatedCallback(
-            base::BindRepeating(&Blocklist::NotifyObservers,
-                                base::Unretained(this)));
-  } else {
-    database_updated_subscription_ = {};
-  }
+  database_updated_subscription_ = {};
 }
--- a/chrome/browser/extensions/blocklist.h
+++ b/chrome/browser/extensions/blocklist.h
@@ -20,3 +20,2 @@
 #include "components/keyed_service/core/keyed_service.h"
-#include "components/safe_browsing/core/db/database_manager.h"
 #include "extensions/browser/blocklist_state.h"
@@ -49,16 +48,2 @@ class Blocklist : public KeyedService, public base::SupportsWeakPtr<Blocklist> {
 
-  class ScopedDatabaseManagerForTest {
-   public:
-    explicit ScopedDatabaseManagerForTest(
-        scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-            database_manager);
-
-    ~ScopedDatabaseManagerForTest();
-
-   private:
-    scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager> original_;
-
-    DISALLOW_COPY_AND_ASSIGN(ScopedDatabaseManagerForTest);
-  };
-
   using BlocklistStateMap = std::map<std::string, BlocklistState>;
@@ -117,9 +102,2 @@ class Blocklist : public KeyedService, public base::SupportsWeakPtr<Blocklist> {
  private:
-  // Use via ScopedDatabaseManagerForTest.
-  static void SetDatabaseManager(
-      scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-          database_manager);
-  static scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-  GetDatabaseManager();
-
   void ObserveNewDatabase();
--- a/chrome/browser/extensions/blocklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blocklist_state_fetcher.cc
@@ -10,6 +10,2 @@
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
-#include "components/safe_browsing/core/features.h"
 #include "content/public/browser/browser_thread.h"
@@ -38,6 +34,8 @@ void BlocklistStateFetcher::Request(const std::string& id,
 
 void BlocklistStateFetcher::SendRequest(const std::string& id) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
+  return;
+#if (false)
 
   ClientCRXListInfoRequest request;
   request.set_id(id);
@@ -92,6 +90,7 @@ void BlocklistStateFetcher::SendRequest(const std::string& id) {
       url_loader_factory_.get(),
       base::BindOnce(&BlocklistStateFetcher::OnURLLoaderComplete,
                      base::Unretained(this), fetcher));
+#endif // false
 }
 
 void BlocklistStateFetcher::OnURLLoaderComplete(
@@ -131,8 +130,3 @@ void BlocklistStateFetcher::OnURLLoaderCompleteInternal(
   if (net_error == net::OK && response_code == 200) {
-    ClientCRXListInfoResponse response;
-    if (response.ParseFromString(response_body)) {
-      state = static_cast<BlocklistState>(response.verdict());
-    } else {
-      state = BLOCKLISTED_UNKNOWN;
-    }
+    state = BLOCKLISTED_UNKNOWN;
   } else {
@@ -145,3 +139,2 @@ void BlocklistStateFetcher::OnURLLoaderCompleteInternal(
     }
-
     state = BLOCKLISTED_UNKNOWN;
--- a/chrome/browser/extensions/blocklist_state_fetcher.h
+++ b/chrome/browser/extensions/blocklist_state_fetcher.h
@@ -15,4 +15,4 @@
 #include "base/memory/weak_ptr.h"
-#include "components/safe_browsing/core/db/util.h"
 #include "extensions/browser/blocklist_state.h"
+#include "url/gurl.h"
 
--- a/chrome/browser/extensions/blocklist_state_fetcher_unittest.cc
+++ b/chrome/browser/extensions/blocklist_state_fetcher_unittest.cc
@@ -9,3 +9,2 @@
 #include "chrome/browser/extensions/test_blocklist_state_fetcher.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/extensions/browser_context_keyed_service_factories.cc
+++ b/chrome/browser/extensions/browser_context_keyed_service_factories.cc
@@ -126,3 +126,2 @@ void EnsureBrowserContextKeyedServiceFactoriesBuilt() {
   extensions::ProcessesAPI::GetFactoryInstance();
-  extensions::SafeBrowsingPrivateEventRouterFactory::GetInstance();
   extensions::SessionsAPI::GetFactoryInstance();
--- a/chrome/browser/extensions/crx_installer.cc
+++ b/chrome/browser/extensions/crx_installer.cc
@@ -675,4 +675,2 @@ void CrxInstaller::CheckInstall() {
   requirements_check_ = std::make_unique<RequirementsChecker>(extension());
-  blocklist_check_ =
-      std::make_unique<BlocklistCheck>(Blocklist::Get(profile_), extension_);
 
@@ -680,3 +678,2 @@ void CrxInstaller::CheckInstall() {
   check_group_->AddCheck(requirements_check_.get());
-  check_group_->AddCheck(blocklist_check_.get());
 
--- a/chrome/browser/extensions/webstore_data_fetcher.cc
+++ b/chrome/browser/extensions/webstore_data_fetcher.cc
@@ -12,3 +12,2 @@
 #include "chrome/browser/extensions/webstore_data_fetcher_delegate.h"
-#include "components/safe_browsing/core/features.h"
 #include "content/public/browser/browser_context.h"
--- a/chrome/browser/interstitials/enterprise_util.cc
+++ b/chrome/browser/interstitials/enterprise_util.cc
@@ -6,4 +6,2 @@
 
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/profiles/profile.h"
@@ -12,22 +10,2 @@
 
-namespace {
-
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-extensions::SafeBrowsingPrivateEventRouter* GetEventRouter(
-    content::WebContents* web_contents) {
-  // |web_contents| can be null in tests.
-  if (!web_contents)
-    return nullptr;
-
-  content::BrowserContext* browser_context = web_contents->GetBrowserContext();
-  if (browser_context->IsOffTheRecord())
-    return nullptr;
-
-  return extensions::SafeBrowsingPrivateEventRouterFactory::GetForProfile(
-      browser_context);
-}
-#endif  // BUILDFLAG(ENABLE_EXTENSIONS)
-
-}  // namespace
-
 void MaybeTriggerSecurityInterstitialShownEvent(
@@ -37,9 +15,2 @@ void MaybeTriggerSecurityInterstitialShownEvent(
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialShown(page_url, reason, net_error_code);
-#endif
 }
@@ -49,6 +20,7 @@ void MaybeTriggerSecurityInterstitialProceededEvent(
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
+#if (false)
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   extensions::SafeBrowsingPrivateEventRouter* event_router =
       GetEventRouter(web_contents);
@@ -96,4 +68,5 @@ std::string GetThreatTypeStringForInterstitial(
       break;
   }
   return std::string();
+#endif // false
 }
--- a/chrome/browser/interstitials/enterprise_util.h
+++ b/chrome/browser/interstitials/enterprise_util.h
@@ -7,3 +7,4 @@
 
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
+#include <string>
+#include "url/gurl.h"
 
@@ -29,5 +30,2 @@ void MaybeTriggerSecurityInterstitialProceededEvent(
 
-std::string GetThreatTypeStringForInterstitial(
-    safe_browsing::SBThreatType threat_type);
-
 #endif  // CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
--- a/chrome/browser/metrics/chrome_metrics_service_accessor.h
+++ b/chrome/browser/metrics/chrome_metrics_service_accessor.h
@@ -60,14 +60,2 @@ void JoinOnboardingGroup(Profile* profile);
 
-namespace safe_browsing {
-class ChromeCleanerControllerDelegate;
-class DownloadUrlSBClient;
-class IncidentReportingService;
-class SafeBrowsingService;
-class SafeBrowsingUIManager;
-
-namespace internal {
-class ReporterRunner;
-}  // namespace internal
-}  // namespace safe_browsing
-
 namespace settings {
@@ -110,8 +98,2 @@ class ChromeMetricsServiceAccessor : public metrics::MetricsServiceAccessor {
   friend class UmaSessionStats;
-  friend class safe_browsing::ChromeCleanerControllerDelegate;
-  friend class safe_browsing::DownloadUrlSBClient;
-  friend class safe_browsing::IncidentReportingService;
-  friend class safe_browsing::internal::ReporterRunner;
-  friend class safe_browsing::SafeBrowsingService;
-  friend class safe_browsing::SafeBrowsingUIManager;
   friend class ChromeMetricsServiceClient;
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -55,3 +55,2 @@
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
--- a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -26,3 +26,2 @@
 #include "chrome/browser/net/chrome_mojo_proxy_resolver_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/sct_reporting_service.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
@@ -73,5 +73,2 @@ IN_PROC_BROWSER_TEST_F(TrialComparisonCertVerifierFeatureEnabledTest,
                        TrialEnabledPrefEnabled) {
-  safe_browsing::SetExtendedReportingPrefForTests(
-      browser()->profile()->GetPrefs(), true);
-
   ASSERT_TRUE(https_test_server_.Start());
@@ -122,5 +119,2 @@ IN_PROC_BROWSER_TEST_F(
     TrialEnabledPrefEnabledBuiltVerifierEnabled) {
-  safe_browsing::SetExtendedReportingPrefForTests(
-      browser()->profile()->GetPrefs(), true);
-
   ASSERT_TRUE(https_test_server_.Start());
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -18,4 +18,2 @@
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/common/channel_info.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
@@ -15,5 +15,2 @@
 #include "build/build_config.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_test_utils.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_service.h"
 #include "chrome/common/chrome_features.h"
@@ -133,8 +130,2 @@ class TrialComparisonCertVerifierControllerTest : public testing::Test {
 
-    sb_service_ =
-        base::MakeRefCounted<safe_browsing::TestSafeBrowsingService>();
-    TestingBrowserProcess::GetGlobal()->SetSafeBrowsingService(
-        sb_service_.get());
-    g_browser_process->safe_browsing_service()->Initialize();
-
     // SafeBrowsingService expects to be initialized before any profiles are
@@ -173,7 +164,2 @@ class TrialComparisonCertVerifierControllerTest : public testing::Test {
 
-    if (TestingBrowserProcess::GetGlobal()->safe_browsing_service()) {
-      TestingBrowserProcess::GetGlobal()->safe_browsing_service()->ShutDown();
-      TestingBrowserProcess::GetGlobal()->SetSafeBrowsingService(nullptr);
-    }
-
     TrialComparisonCertVerifierController::SetFakeOfficialBuildForTesting(
@@ -215,3 +201,2 @@ class TrialComparisonCertVerifierControllerTest : public testing::Test {
   content::BrowserTaskEnvironment task_environment_;
-  scoped_refptr<safe_browsing::SafeBrowsingService> sb_service_;
   std::unique_ptr<TestingProfileManager> profile_manager_;
@@ -232,6 +217,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest, NothingEnabled) {
 
-  // Enable the SBER pref, shouldn't matter since it's a non-official build and
-  // field trial isn't enabled.
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
-
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
@@ -257,3 +238,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest,
   EXPECT_FALSE(trial_controller().IsAllowed());
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
@@ -288,3 +268,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest,
 #endif
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
@@ -326,3 +305,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest, OfficialBuildTrialEnabled) {
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
@@ -378,3 +356,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest, OfficialBuildTrialEnabled) {
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(false)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), false);
 
@@ -422,3 +399,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest,
   EXPECT_CALL(mock_config_client_2, OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
@@ -482,3 +458,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest,
   EXPECT_CALL(mock_config_client_2, OnTrialConfigUpdated(false)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), false);
 
@@ -515,3 +490,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest,
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
@@ -548,5 +522,2 @@ TEST_F(TrialComparisonCertVerifierControllerTest,
 
-  // Enable the SBER pref, shouldn't matter since it's an incognito profile.
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
-
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -95,3 +95,2 @@
 #include "components/autofill/core/common/autofill_prefs.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/browsing_data/core/pref_names.h"
@@ -747,4 +746,2 @@ void RegisterLocalState(PrefRegistrySimple* registry) {
       policy::policy_prefs::kNativeWindowOcclusionEnabled, true);
-  component_updater::RegisterPrefsForSwReporter(registry);
-  safe_browsing::RegisterChromeCleanerScanCompletionTimePref(registry);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
@@ -828,4 +825,2 @@ void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry,
   RegisterBrowserUserPrefs(registry);
-  blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
-      registry);
   security_interstitials::InsecureFormBlockingPage::RegisterProfilePrefs(
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -65,3 +65,2 @@
 #include "chrome/browser/profiles/renderer_updater_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/browser/search/suggestions/suggestions_service_factory.h"
--- a/chrome/browser/profiles/pref_service_builder_utils.cc
+++ b/chrome/browser/profiles/pref_service_builder_utils.cc
@@ -14,2 +14,3 @@
 #include "base/sequenced_task_runner.h"
+#include "base/strings/stringprintf.h"
 #include "base/threading/scoped_blocking_call.h"
@@ -20,3 +21,2 @@
 #include "chrome/browser/prefs/profile_pref_store_manager.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/buildflags.h"
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -86,8 +86,2 @@ Polymer({
     /** @private */
-    enableSafeBrowsingSubresourceFilter_: {
-      type: Boolean,
-      value() {
-        return false;
-      }
-    },
 
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -73,3 +73,3 @@ static_library("safe_browsing") {
 
-  if (safe_browsing_mode != 0) {
+  if (false) {
     # "Safe Browsing Basic" files used for safe browsing in full mode
@@ -144,3 +144,3 @@ static_library("safe_browsing") {
     ]
-    if (safe_browsing_mode == 1) {
+    if (false) {
       # "Safe Browsing Full" files in addition to the "basic" ones to use for
@@ -274,3 +274,3 @@ static_library("safe_browsing") {
       }
-    } else if (safe_browsing_mode == 2) {
+    } else if (false) {
       if (is_android) {
@@ -402,3 +402,3 @@ source_set("metrics_collector") {
 source_set("test_support") {
-  if (safe_browsing_mode != 0) {
+  if (false) {
     sources = [
@@ -419,3 +419,3 @@ source_set("test_support") {
 
-  if (safe_browsing_mode == 1) {
+  if (false) {
     sources += [
--- a/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
+++ b/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
@@ -60,3 +60,2 @@ static_library("chrome_cleaner") {
     "//chrome/browser/extensions",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui",
@@ -70,3 +69,2 @@ static_library("chrome_cleaner") {
     "//components/prefs",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//content/public/browser",
--- a/chrome/browser/safe_browsing/cloud_content_scanning/binary_fcm_service.h
+++ b/chrome/browser/safe_browsing/cloud_content_scanning/binary_fcm_service.h
@@ -48,4 +48,2 @@ class BinaryFCMService : public gcm::GCMAppHandler {
       base::OnceCallback<void(const std::string& token)>;
-  using OnMessageCallback = base::RepeatingCallback<void(
-      enterprise_connectors::ContentAnalysisResponse)>;
   using UnregisterInstanceIDCallback = base::OnceCallback<void(bool)>;
@@ -61,4 +59,2 @@ class BinaryFCMService : public gcm::GCMAppHandler {
 
-  void SetCallbackForToken(const std::string& token,
-                           OnMessageCallback callback);
   void ClearCallbackForToken(const std::string& token);
@@ -124,3 +120,2 @@ class BinaryFCMService : public gcm::GCMAppHandler {
 
-  base::flat_map<std::string, OnMessageCallback> message_token_map_;
 
--- a/chrome/browser/ssl/security_state_tab_helper.cc
+++ b/chrome/browser/ssl/security_state_tab_helper.cc
@@ -18,4 +18,2 @@
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/known_interception_disclosure_infobar_delegate.h"
@@ -31,3 +29,2 @@
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/buildflags.h"
 #include "components/security_interstitials/core/features.h"
@@ -56,6 +53,2 @@
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
-#endif
-
 namespace {
@@ -123,3 +116,2 @@ bool IsLegacyTLS(GURL url, int connection_status) {
 using password_manager::metrics_util::PasswordType;
-using safe_browsing::SafeBrowsingUIManager;
 
--- a/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
+++ b/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
@@ -53,6 +53,4 @@ void ChromeSubresourceFilterClient::
         content::WebContents* web_contents) {
-  subresource_filter::RulesetService* ruleset_service =
-      g_browser_process->subresource_filter_ruleset_service();
   subresource_filter::VerifiedRulesetDealer::Handle* dealer =
-      ruleset_service ? ruleset_service->GetRulesetDealer() : nullptr;
+     nullptr;
   subresource_filter::ContentSubresourceFilterThrottleManager::
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -308,11 +308,4 @@ static_library("ui") {
 
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "webui/reset_password/reset_password_ui.cc",
-      "webui/reset_password/reset_password_ui.h",
-    ]
-  }
-
   # TODO(crbug/925153): Remove this circular dependency.
-  allow_circular_includes_from = [ "//chrome/browser/safe_browsing" ]
+  allow_circular_includes_from = []
   defines = []
@@ -369,3 +362,2 @@ static_library("ui") {
     "//chrome/browser/resources/usb_internals:resources",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui/webui/bluetooth_internals",
@@ -472,13 +464,2 @@ static_library("ui") {
     "//components/resources",
-    "//components/safe_browsing/content/password_protection",
-    "//components/safe_browsing/content/triggers:ad_popup_trigger",
-    "//components/safe_browsing/content/triggers:ad_redirect_trigger",
-    "//components/safe_browsing/content/web_ui",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:util",
-    "//components/safe_browsing/core/password_protection:password_protection_metrics_util",
     "//components/schema_org/common:improved_mojom",
@@ -1516,3 +1497,2 @@ static_library("ui") {
       "//chrome/browser/resource_coordinator/tab_ranker",
-      "//chrome/browser/safe_browsing:advanced_protection",
       "//chrome/browser/search/task_module:mojo_bindings",
@@ -3130,6 +3110,2 @@ static_library("ui") {
       "views/certificate_viewer_win.cc",
-      "views/chrome_cleaner_dialog_win.cc",
-      "views/chrome_cleaner_dialog_win.h",
-      "views/chrome_cleaner_reboot_dialog_win.cc",
-      "views/chrome_cleaner_reboot_dialog_win.h",
       "views/color_chooser_dialog.cc",
@@ -3156,4 +3132,2 @@ static_library("ui") {
       "views/network_profile_bubble_view.cc",
-      "views/settings_reset_prompt_dialog.cc",
-      "views/settings_reset_prompt_dialog.h",
       "views/status_icons/status_icon_win.cc",
@@ -3178,4 +3152,2 @@ static_library("ui") {
       "webui/conflicts/conflicts_ui.h",
-      "webui/settings/chrome_cleanup_handler_win.cc",
-      "webui/settings/chrome_cleanup_handler_win.h",
       "webui/settings_utils_win.cc",
@@ -3191,3 +3163,2 @@ static_library("ui") {
     deps += [
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/ui/startup:buildflags",
@@ -3908,10 +3879,2 @@ static_library("ui") {
       "views/sad_tab_view.h",
-      "views/safe_browsing/deep_scanning_failure_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_failure_modal_dialog.h",
-      "views/safe_browsing/deep_scanning_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_modal_dialog.h",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.cc",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.h",
-      "views/safe_browsing/prompt_for_scanning_modal_dialog.cc",
-      "views/safe_browsing/prompt_for_scanning_modal_dialog.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.cc",
@@ -4509,11 +4472,2 @@ static_library("ui") {
 
-  if (safe_browsing_mode == 1) {
-    deps += [
-      "//chrome/browser/ui/webui/reset_password:mojo_bindings",
-      "//chrome/common/safe_browsing:proto",
-      "//components/safe_browsing/core:csd_proto",
-      "//components/safe_browsing/core/password_protection:password_protection_metrics_util",
-    ]
-  }
-
   if (use_dbus) {
--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -175,3 +175,2 @@
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/content/triggers/ad_redirect_trigger.h"
 #include "components/search/search.h"
@@ -1440,6 +1439,2 @@ void Browser::OnDidBlockNavigation(
   }
-  if (auto* trigger =
-          safe_browsing::AdRedirectTrigger::FromWebContents(web_contents)) {
-    trigger->OnDidBlockNavigation(initiator_url);
-  }
 }
--- a/chrome/browser/ui/browser_dialogs.h
+++ b/chrome/browser/ui/browser_dialogs.h
@@ -55,5 +55,2 @@ enum class PermissionAction;
 namespace safe_browsing {
-class ChromeCleanerController;
-class ChromeCleanerDialogController;
-class ChromeCleanerRebootDialogController;
 class SettingsResetPromptController;
@@ -313,17 +310,2 @@ void ShowSettingsResetPrompt(
 
-// Shows the Chrome Cleanup dialog asking the user if they want to clean their
-// system from unwanted software. This is called when unwanted software has been
-// detected on the system.
-void ShowChromeCleanerPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerDialogController* dialog_controller,
-    safe_browsing::ChromeCleanerController* cleaner_controller);
-
-// Shows the Chrome Cleanup reboot dialog asking the user if they want to
-// restart their computer once a cleanup has finished. This is called when the
-// Chrome Cleanup ends in a reboot required state.
-void ShowChromeCleanerRebootPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerRebootDialogController* dialog_controller);
-
 #endif  // OS_WIN
--- a/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
+++ b/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
@@ -15,3 +15,2 @@
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
 #include "content/public/browser/web_contents.h"
@@ -22,55 +21,2 @@ namespace {
 
-void CompletionCallback(
-    content::WebContentsViewDelegate::DropCompletionCallback callback,
-    const enterprise_connectors::ContentAnalysisDelegate::Data& data,
-    const enterprise_connectors::ContentAnalysisDelegate::Result& result) {
-  // If any result is negative, block the drop.
-  const auto all_true_fn = [](const auto& vec) {
-    return std::all_of(vec.cbegin(), vec.cend(), [](bool b) { return b; });
-  };
-  bool all_true =
-      all_true_fn(result.text_results) && all_true_fn(result.paths_results);
-
-  std::move(callback).Run(
-      all_true
-          ? content::WebContentsViewDelegate::DropCompletionResult::kContinue
-          : content::WebContentsViewDelegate::DropCompletionResult::kAbort);
-}
-
-enterprise_connectors::ContentAnalysisDelegate::Data GetPathsToScan(
-    content::WebContents* web_contents,
-    const content::DropData& drop_data,
-    enterprise_connectors::ContentAnalysisDelegate::Data data) {
-  for (const auto& file : drop_data.filenames) {
-    base::File::Info info;
-
-    // Ignore the path if it's a symbolic link.
-    if (!base::GetFileInfo(file.path, &info) || info.is_symbolic_link)
-      continue;
-
-    // If the file is a directory, recursively add the files it holds to |data|.
-    if (info.is_directory) {
-      base::FileEnumerator file_enumerator(file.path, /*recursive=*/true,
-                                           base::FileEnumerator::FILES);
-      for (base::FilePath sub_path = file_enumerator.Next(); !sub_path.empty();
-           sub_path = file_enumerator.Next()) {
-        data.paths.push_back(sub_path);
-      }
-    } else {
-      data.paths.push_back(file.path);
-    }
-  }
-
-  return data;
-}
-
-void ScanData(content::WebContents* web_contents,
-              content::WebContentsViewDelegate::DropCompletionCallback callback,
-              enterprise_connectors::ContentAnalysisDelegate::Data data) {
-  enterprise_connectors::ContentAnalysisDelegate::CreateForWebContents(
-      web_contents, std::move(data),
-      base::BindOnce(&CompletionCallback, std::move(callback)),
-      safe_browsing::DeepScanAccessPoint::DRAG_AND_DROP);
-}
-
 }  // namespace
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -61,5 +61,2 @@
 #include "chrome/browser/resource_coordinator/tab_helper.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer.h"
-#include "chrome/browser/safe_browsing/safe_browsing_tab_observer.h"
-#include "chrome/browser/safe_browsing/trigger_creator.h"
 #include "chrome/browser/sessions/session_tab_helper_factory.h"
--- a/chrome/browser/ui/views/download/download_item_view.cc
+++ b/chrome/browser/ui/views/download/download_item_view.cc
@@ -38,6 +38,2 @@
 #include "chrome/browser/icon_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/themes/theme_properties.h"
@@ -48,4 +44,2 @@
 #include "chrome/browser/ui/views/download/download_shelf_view.h"
-#include "chrome/browser/ui/views/safe_browsing/deep_scanning_modal_dialog.h"
-#include "chrome/browser/ui/views/safe_browsing/prompt_for_scanning_modal_dialog.h"
 #include "chrome/grit/generated_resources.h"
@@ -54,3 +48,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/features.h"
 #include "components/url_formatter/elide_url.h"
@@ -188,3 +181,3 @@ END_METADATA
 bool UseNewWarnings() {
-  return base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings);
+  return false;
 }
@@ -192,6 +185,2 @@ bool UseNewWarnings() {
 int GetFilenameStyle(const views::StyledLabel& label) {
-#if !defined(OS_LINUX) && !defined(OS_CHROMEOS)
-  if (UseNewWarnings())
-    return STYLE_EMPHASIZED;
-#endif
   return label.GetDefaultTextStyle();
@@ -553,3 +542,3 @@ void DownloadItemView::OnPaint(gfx::Canvas* canvas) {
 
-  const bool use_new_warnings = UseNewWarnings();
+  const bool use_new_warnings = false;
 
@@ -976,7 +965,3 @@ ui::ImageModel DownloadItemView::GetIcon() const {
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT:
-      return safe_browsing::AdvancedProtectionStatusManagerFactory::
-                     GetForProfile(model_->profile())
-                         ->IsUnderAdvancedProtection()
-                 ? kWarning
-                 : kError;
+      return kWarning;
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
@@ -1153,19 +1138,2 @@ void DownloadItemView::DropdownButtonPressed(const ui::Event& event) {
 void DownloadItemView::ShowOpenDialog(content::WebContents* web_contents) {
-  if (mode_ == Mode::kDeepScanning) {
-    TabModalConfirmDialog::Create(
-        std::make_unique<safe_browsing::DeepScanningModalDialog>(
-            web_contents,
-            base::BindOnce(&DownloadItemView::OpenDownloadDuringAsyncScanning,
-                           weak_ptr_factory_.GetWeakPtr())),
-        web_contents);
-  } else {
-    safe_browsing::PromptForScanningModalDialog::ShowForWebContents(
-        web_contents, model_->GetFileNameToReportUser().LossyDisplayName(),
-        base::BindOnce(&DownloadItemView::ExecuteCommand,
-                       weak_ptr_factory_.GetWeakPtr(),
-                       DownloadCommands::DEEP_SCAN),
-        base::BindOnce(&DownloadItemView::ExecuteCommand,
-                       weak_ptr_factory_.GetWeakPtr(),
-                       DownloadCommands::BYPASS_DEEP_SCANNING));
-  }
 }
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -159,3 +159,2 @@
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/password_protection/metrics_util.h"
 #include "components/sessions/core/tab_restore_service.h"
--- a/chrome/browser/ui/views/frame/browser_window_factory.cc
+++ b/chrome/browser/ui/views/frame/browser_window_factory.cc
@@ -13,3 +13,2 @@
 #include "chrome/grit/chromium_strings.h"
-#include "components/safe_browsing/core/password_protection/metrics_util.h"
 #if defined(USE_AURA)
--- a/chrome/browser/ui/webui/downloads/downloads_ui.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_ui.cc
@@ -18,4 +18,2 @@
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/webui/downloads/downloads.mojom.h"
@@ -62,8 +60,3 @@ content::WebUIDataSource* CreateDownloadsUIHTMLSource(Profile* profile) {
 
-  bool requests_ap_verdicts =
-      safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-          profile)
-          ->IsUnderAdvancedProtection();
-  source->AddBoolean("requestsApVerdicts", requests_ap_verdicts);
-
+  source->AddBoolean("requestsApVerdicts", false);
   static constexpr webui::LocalizedString kStrings[] = {
@@ -123,7 +116,4 @@ content::WebUIDataSource* CreateDownloadsUIHTMLSource(Profile* profile) {
                              IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD);
-  source->AddLocalizedString(
-      "dangerUncommonDesc",
-      requests_ap_verdicts
-          ? IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD_IN_ADVANCED_PROTECTION
-          : IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
+  source->AddLocalizedString("dangerUncommonDesc",
+                             IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
   source->AddLocalizedString("dangerSettingsDesc",
--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -18,6 +18,2 @@
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_blocking_page.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_blocking_page_quiet.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
@@ -29,3 +25,2 @@
 #include "components/lookalikes/core/lookalike_url_util.h"
-#include "components/safe_browsing/core/db/database_manager.h"
 #include "components/security_interstitials/content/bad_clock_blocking_page.h"
@@ -68,4 +63,2 @@
 
-using security_interstitials::TestSafeBrowsingBlockingPageQuiet;
-
 namespace {
--- a/chrome/browser/ui/webui/management/management_ui.cc
+++ b/chrome/browser/ui/webui/management/management_ui.cc
@@ -18,3 +18,2 @@
 #include "chrome/grit/theme_resources.h"
-#include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/strings/grit/components_strings.h"
@@ -126,6 +125,2 @@ content::WebUIDataSource* CreateManagementUIHtmlSource(Profile* profile) {
 
-  source->AddString(kManagementExtensionReportSafeBrowsingWarnings,
-                    l10n_util::GetStringFUTF16(
-                        IDS_MANAGEMENT_EXTENSION_REPORT_SAFE_BROWSING_WARNINGS,
-                        base::UTF8ToUTF16(safe_browsing::kSafeBrowsingUrl)));
 #if defined(OS_CHROMEOS)
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -196,3 +196,2 @@ static_library("common") {
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/core/web_ui:constants",
     "//components/services/app_service/public/cpp:app_share_target",
@@ -478,5 +477,2 @@ static_library("common") {
 
-  if (safe_browsing_mode != 0) {
-    public_deps += [ "//chrome/common/safe_browsing" ]
-  }
 
@@ -757,6 +753,2 @@ mojom("mojo_bindings") {
 
-  if (safe_browsing_mode == 1) {
-    public_deps += [ "//chrome/services/file_util/public/mojom" ]
-  }
-
   overridden_deps = [
--- a/chrome/common/extensions/api/api_sources.gni
+++ b/chrome/common/extensions/api/api_sources.gni
@@ -50,3 +50,2 @@ schema_sources_ = [
   "resources_private.idl",
-  "safe_browsing_private.idl",
   "scripting.idl",
--- a/chrome/common/features.gni
+++ b/chrome/common/features.gni
@@ -86,3 +86,2 @@ chrome_grit_defines = [
   "enable_webui_tab_strip=$enable_webui_tab_strip",
-  "safe_browsing_mode=$safe_browsing_mode",
   "optimize_webui=$optimize_webui",
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -58,22 +58,2 @@ if (safe_browsing_mode == 1) {
     sources = [
-      "binary_feature_extractor.cc",
-      "binary_feature_extractor.h",
-    ]
-    if (is_mac) {
-      sources += [
-        "binary_feature_extractor_mac.cc",
-        "mach_o_image_reader_mac.cc",
-        "mach_o_image_reader_mac.h",
-      ]
-    } else if (is_win) {
-      sources += [ "binary_feature_extractor_win.cc" ]
-    }
-    if (is_posix) {
-      sources += [ "binary_feature_extractor_posix.cc" ]
-    }
-
-    public_deps = [
-      "//base",
-      "//components/safe_browsing/core:csd_proto",
-      "//crypto",
     ]
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -9,3 +9,2 @@
 #include "components/nacl/common/buildflags.h"
-#include "components/safe_browsing/core/web_ui/constants.h"
 #include "extensions/buildflags/buildflags.h"
@@ -488,3 +487,2 @@ const char* const kChromeHostURLs[] = {
     kChromeUINTPTilesInternalsHost,
-    safe_browsing::kChromeUISafeBrowsingHost,
     kChromeUISuggestionsHost,
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -170,5 +170,3 @@ static_library("renderer") {
     "//components/safe_browsing/content/renderer",
-    "//components/safe_browsing/content/renderer:throttles",
     "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:interfaces",
     "//components/security_interstitials/content/renderer:security_interstitial_page_controller",
@@ -262,3 +260,3 @@ static_library("renderer") {
 
-  if (safe_browsing_mode != 0) {
+  if (false) {
     deps +=
--- a/chrome/renderer/url_loader_throttle_provider_impl.cc
+++ b/chrome/renderer/url_loader_throttle_provider_impl.cc
@@ -22,4 +22,2 @@
 #include "components/no_state_prefetch/renderer/prerender_helper.h"
-#include "components/safe_browsing/content/renderer/renderer_url_loader_throttle.h"
-#include "components/safe_browsing/core/features.h"
 #include "content/public/common/content_features.h"
@@ -97,3 +95,2 @@ URLLoaderThrottleProviderImpl::URLLoaderThrottleProviderImpl(
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
@@ -109,6 +106,2 @@ URLLoaderThrottleProviderImpl::URLLoaderThrottleProviderImpl(
   DETACH_FROM_THREAD(thread_checker_);
-  if (other.safe_browsing_) {
-    other.safe_browsing_->Clone(
-        safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
-  }
   // An ad_delay_factory_ is created, rather than cloning the existing one.
@@ -119,4 +112,2 @@ URLLoaderThrottleProviderImpl::Clone() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_));
   return base::WrapUnique(new URLLoaderThrottleProviderImpl(*this));
@@ -143,10 +134,2 @@ URLLoaderThrottleProviderImpl::CreateThrottles(
 
-  if (!is_frame_resource) {
-    if (safe_browsing_remote_)
-      safe_browsing_.Bind(std::move(safe_browsing_remote_));
-    throttles.push_back(
-        std::make_unique<safe_browsing::RendererURLLoaderThrottle>(
-            safe_browsing_.get(), render_frame_id));
-  }
-
   if (type_ == content::URLLoaderThrottleProviderType::kFrame &&
--- a/chrome/renderer/url_loader_throttle_provider_impl.h
+++ b/chrome/renderer/url_loader_throttle_provider_impl.h
@@ -11,3 +11,2 @@
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "content/public/renderer/url_loader_throttle_provider.h"
@@ -51,5 +50,2 @@ class URLLoaderThrottleProviderImpl
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
 #if BUILDFLAG(ENABLE_EXTENSIONS)
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
@@ -9,3 +9,2 @@
 #include "base/memory/ptr_util.h"
-#include "components/safe_browsing/content/renderer/websocket_sb_handshake_throttle.h"
 #include "content/public/common/service_names.mojom.h"
@@ -17,3 +16,2 @@ WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
@@ -28,5 +26,2 @@ WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
   DETACH_FROM_THREAD(thread_checker_);
-  DCHECK(other.safe_browsing_);
-  other.safe_browsing_->Clone(
-      safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
@@ -37,5 +32,2 @@ WebSocketHandshakeThrottleProviderImpl::Clone(
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
   return base::WrapUnique(new WebSocketHandshakeThrottleProviderImpl(*this));
@@ -48,7 +40,3 @@ WebSocketHandshakeThrottleProviderImpl::CreateThrottle(
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
-  return std::make_unique<safe_browsing::WebSocketSBHandshakeThrottle>(
-      safe_browsing_.get(), render_frame_id);
+  return 0;
 }
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.h
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.h
@@ -11,3 +11,2 @@
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "content/public/renderer/websocket_handshake_throttle_provider.h"
@@ -39,5 +38,2 @@ class WebSocketHandshakeThrottleProviderImpl final
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
   THREAD_CHECKER(thread_checker_);
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -236,3 +236,2 @@ static_library("test_support") {
     "//components/rappor:test_support",
-    "//components/safe_browsing/core/db:v4_test_util",
     "//components/search_engines:test_support",
@@ -809,3 +808,2 @@ if (!is_android) {
       "//components/safe_browsing:buildflags",
-      "//components/safe_browsing/core/db:test_database_manager",
       "//components/services/language_detection/public/cpp",
@@ -1028,3 +1026,2 @@ if (!is_android) {
       "../browser/download/download_browsertest.h",
-      "../browser/download/download_danger_prompt_browsertest.cc",
       "../browser/download/download_frame_policy_browsertest.cc",
@@ -1290,12 +1287,2 @@ if (!is_android) {
       "../browser/resource_coordinator/tab_manager_browsertest.cc",
-      "../browser/safe_browsing/client_side_detection_host_browsertest.cc",
-      "../browser/safe_browsing/client_side_detection_service_browsertest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.h",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
-      "../browser/safe_browsing/download_protection/deep_scanning_browsertest.cc",
-      "../browser/safe_browsing/download_protection/download_protection_service_browsertest.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.h",
       "../browser/safe_xml_parser_browsertest.cc",
@@ -1377,3 +1364,2 @@ if (!is_android) {
       "../browser/ui/blocked_content/popup_tracker_browsertest.cc",
-      "../browser/ui/blocked_content/safe_browsing_triggered_popup_blocker_browsertest.cc",
       "../browser/ui/blocked_content/tab_under_blocker_browsertest.cc",
@@ -2104,9 +2090,2 @@ if (!is_android) {
         sources += [
-          "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_dialog_controller_impl_browsertest_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_reboot_dialog_controller_impl_browsertest_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.h",
-          "../browser/safe_browsing/chrome_cleaner/settings_resetter_browsertest_win.cc",
-          "../browser/safe_browsing/settings_reset_prompt/settings_reset_dependency_browsertest_win.cc",
-          "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_browsertest_win.cc",
         ]
@@ -2284,3 +2263,2 @@ if (!is_android) {
         "../browser/ui/views/read_later/read_later_button_browsertest.cc",
-        "../browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog_browsertest.cc",
         "../browser/ui/views/select_file_dialog_extension_browsertest.cc",
@@ -2881,3 +2859,3 @@ if (!is_android) {
     }
-    if (safe_browsing_mode == 1) {
+    if (false) {
       sources += [
@@ -2948,3 +2926,3 @@ if (!is_android) {
 
-      if (safe_browsing_mode == 1) {
+      if (false) {
         sources -= [
@@ -3108,3 +3086,3 @@ if (!is_android) {
     }
-    if (is_chrome_branded && safe_browsing_mode == 1 && !is_mac) {
+    if (false) {
       sources -= [
@@ -4003,3 +3981,2 @@ test("unit_tests") {
       "../browser/profiles/profile_destroyer_unittest.cc",
-      "../browser/safe_browsing/generated_safe_browsing_pref_unittest.cc",
       "../browser/speech/speech_recognition_service_factory_unittest.cc",
@@ -4158,6 +4135,2 @@ test("unit_tests") {
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/password_protection:mock_password_protection",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/db",
-    "//components/safe_browsing/core/db:test_database_manager",
     "//components/safe_search_api:test_support",
@@ -4692,11 +4665,2 @@ test("unit_tests") {
         "../browser/profile_resetter/triggered_profile_resetter_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_fetcher_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_runner_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_prompt_channel_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.h",
-        "../browser/safe_browsing/chrome_cleaner/reporter_runner_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/srt_delete_extension_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/srt_field_trial_win_unittest.cc",
         "../browser/task_manager/sampling/shared_sampler_win_unittest.cc",
@@ -5172,5 +5136,2 @@ test("unit_tests") {
       "../browser/extensions/api/runtime/chrome_runtime_api_delegate_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_api_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_util_unittest.cc",
       "../browser/extensions/api/search/search_api_unittest.cc",
@@ -5285,8 +5246,2 @@ test("unit_tests") {
       "../browser/renderer_context_menu/context_menu_content_type_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
-      "../browser/safe_browsing/test_extension_event_observer.cc",
-      "../browser/safe_browsing/test_extension_event_observer.h",
       "../browser/sync/glue/extensions_activity_monitor_unittest.cc",
@@ -5570,3 +5525,3 @@ test("unit_tests") {
 
-  if (safe_browsing_mode > 0) {
+  if (false) {
     sources += [
@@ -5588,3 +5543,3 @@ test("unit_tests") {
 
-  if (safe_browsing_mode == 1) {
+  if (false) {
     # TODO(sgurun): enable tests for safe_browsing==2.
@@ -5884,6 +5839,2 @@ test("unit_tests") {
     ]
-    data_deps += [
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_1",
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_2",
-    ]
 
@@ -6111,5 +6062,2 @@ test("unit_tests") {
   }
-  if (safe_browsing_mode == 1 && enable_extensions) {
-    sources += [ "../browser/extensions/blocklist_unittest.cc" ]
-  }
 
@@ -6279,5 +6227,2 @@ if (!is_android) {
 
-  proto_library("test_proto") {
-    sources = [ "../common/safe_browsing/ipc_protobuf_message_test.proto" ]
-  }
 
--- a/chrome/utility/BUILD.gn
+++ b/chrome/utility/BUILD.gn
@@ -225,9 +225,2 @@ static_library("utility") {
 
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/services/file_util" ]
-    if (is_mac) {
-      deps += [ "//chrome/utility/safe_browsing/mac" ]
-    }
-  }
-
   if (is_android || enable_extensions) {
--- a/components/blocked_content/BUILD.gn
+++ b/components/blocked_content/BUILD.gn
@@ -19,4 +19,2 @@ source_set("blocked_content") {
     "pref_names.h",
-    "safe_browsing_triggered_popup_blocker.cc",
-    "safe_browsing_triggered_popup_blocker.h",
     "url_list_manager.cc",
@@ -31,4 +29,2 @@ source_set("blocked_content") {
     "//components/prefs",
-    "//components/safe_browsing/content/triggers:ad_popup_trigger",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/browser",
--- a/components/blocked_content/popup_blocker.cc
+++ b/components/blocked_content/popup_blocker.cc
@@ -12,3 +12,2 @@
 #include "components/blocked_content/popup_navigation_delegate.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
@@ -16,3 +15,2 @@
 #include "components/embedder_support/switches.h"
-#include "components/safe_browsing/content/triggers/ad_popup_trigger.h"
 #include "content/public/browser/page_navigator.h"
@@ -64,9 +62,2 @@ PopupBlockType ShouldBlockPopup(content::WebContents* web_contents,
   }
-
-  auto* safe_browsing_blocker =
-      SafeBrowsingTriggeredPopupBlocker::FromWebContents(web_contents);
-  if (safe_browsing_blocker &&
-      safe_browsing_blocker->ShouldApplyAbusivePopupBlocker()) {
-    return PopupBlockType::kAbusive;
-  }
   return PopupBlockType::kNotBlocked;
@@ -134,6 +125,2 @@ std::unique_ptr<PopupNavigationDelegate> MaybeBlockPopup(
                                  block_type);
-  auto* trigger = safe_browsing::AdPopupTrigger::FromWebContents(web_contents);
-  if (trigger) {
-    trigger->PopupWasBlocked(source_frame);
-  }
   return nullptr;
--- a/components/blocked_content/popup_blocker_tab_helper.cc
+++ b/components/blocked_content/popup_blocker_tab_helper.cc
@@ -14,3 +14,2 @@
 #include "components/blocked_content/popup_tracker.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/browser/page_specific_content_settings.h"
@@ -43,3 +42,2 @@ PopupBlockerTabHelper::PopupBlockerTabHelper(content::WebContents* web_contents)
     : content::WebContentsObserver(web_contents) {
-  blocked_content::SafeBrowsingTriggeredPopupBlocker::MaybeCreate(web_contents);
 }
--- a/components/components_strings.grd
+++ b/components/components_strings.grd
@@ -310,3 +310,2 @@
       <part file="reset_password_strings.grdp" />
-      <part file="safe_browsing_strings.grdp" />
       <part file="security_interstitials_strings.grdp" />
--- a/components/password_manager/core/browser/BUILD.gn
+++ b/components/password_manager/core/browser/BUILD.gn
@@ -294,4 +294,2 @@ static_library("browser") {
     "//components/prefs",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//components/security_state/core",
@@ -330,8 +330,2 @@
 
-  if (!is_chromeos_ash && !is_android) {
-    sources += [
-      "password_store_signin_notifier_impl.cc",
-      "password_store_signin_notifier_impl.h",
-    ]
-  }
 
@@ -723,4 +721,2 @@ source_set("unit_tests") {
     "//components/prefs:test_support",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//components/security_state/core",
--- a/components/password_manager/core/browser/stub_password_manager_client.cc
+++ b/components/password_manager/core/browser/stub_password_manager_client.cc
@@ -100,21 +100,2 @@ StubPasswordManagerClient::GetPasswordFeatureManager() {
 
-safe_browsing::PasswordProtectionService*
-StubPasswordManagerClient::GetPasswordProtectionService() const {
-  return nullptr;
-}
-
-#if defined(ON_FOCUS_PING_ENABLED)
-void StubPasswordManagerClient::CheckSafeBrowsingReputation(
-    const GURL& form_action,
-    const GURL& frame_url) {}
-#endif
-
-void StubPasswordManagerClient::CheckProtectedPasswordEntry(
-    metrics_util::PasswordType reused_password_type,
-    const std::string& username,
-    const std::vector<MatchingReusedCredential>& matching_reused_credentials,
-    bool password_field_exists) {}
-
-void StubPasswordManagerClient::LogPasswordReuseDetectedEvent() {}
-
 ukm::SourceId StubPasswordManagerClient::GetUkmSourceId() {
--- a/components/password_manager/core/browser/stub_password_manager_client.h
+++ b/components/password_manager/core/browser/stub_password_manager_client.h
@@ -66,18 +66,2 @@ class StubPasswordManagerClient : public PasswordManagerClient {
 
-  safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
-      const override;
-
-#if defined(ON_FOCUS_PING_ENABLED)
-  void CheckSafeBrowsingReputation(const GURL& form_action,
-                                   const GURL& frame_url) override;
-#endif
-
-  void CheckProtectedPasswordEntry(
-      metrics_util::PasswordType reused_password_type,
-      const std::string& username,
-      const std::vector<MatchingReusedCredential>& matching_reused_credentials,
-      bool password_field_exists) override;
-
-  void LogPasswordReuseDetectedEvent() override;
-
   ukm::SourceId GetUkmSourceId() override;
--- a/components/password_manager/core/browser/password_reuse_detection_manager.cc
+++ b/components/password_manager/core/browser/password_reuse_detection_manager.cc
@@ -173,8 +173,4 @@ declare_args() {
                              : "";
 
-  client_->CheckProtectedPasswordEntry(
-      reused_password_type, username,
-      std::move(all_matching_reused_credentials_).extract(),
-      password_field_detected);
 
   all_matching_reused_credentials_.clear();
--- a/components/safe_browsing/buildflags.gni
+++ b/components/safe_browsing/buildflags.gni
@@ -17,5 +17,5 @@ declare_args() {
   } else if (is_android) {
-    safe_browsing_mode = 2
+    safe_browsing_mode = 0
   } else {
-    safe_browsing_mode = 1
+    safe_browsing_mode = 0
   }
--- a/components/safe_browsing/content/password_protection/password_protection_service.h
+++ b/components/safe_browsing/content/password_protection/password_protection_service.h
@@ -25,3 +25,2 @@
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "components/safe_browsing/content/password_protection/metrics_util.h"
--- a/components/search_engines/search_terms_data.cc
+++ b/components/search_engines/search_terms_data.cc
@@ -23,3 +23,3 @@ std::string SearchTermsData::GoogleBaseSuggestURLValue() const {
   const GURL base_url(GoogleBaseURLValue());
-  DCHECK(base_url.is_valid());
+  //DCHECK(base_url.is_valid());
 
--- a/components/subresource_filter/content/browser/BUILD.gn
+++ b/components/subresource_filter/content/browser/BUILD.gn
@@ -37,8 +37,2 @@ static_library("browser") {
     "subresource_filter_profile_context.h",
-    "subresource_filter_safe_browsing_activation_throttle.cc",
-    "subresource_filter_safe_browsing_activation_throttle.h",
-    "subresource_filter_safe_browsing_client.cc",
-    "subresource_filter_safe_browsing_client.h",
-    "subresource_filter_safe_browsing_client_request.cc",
-    "subresource_filter_safe_browsing_client_request.h",
     "unindexed_ruleset_stream_generator.cc",
@@ -54,4 +48,2 @@ static_library("browser") {
     "//components/prefs:prefs",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/common",
@@ -78,4 +70,2 @@ static_library("test_support") {
     "async_document_subresource_filter_test_utils.h",
-    "fake_safe_browsing_database_manager.cc",
-    "fake_safe_browsing_database_manager.h",
     "subframe_navigation_test_utils.cc",
@@ -99,4 +89,2 @@ static_library("test_support") {
   public_deps = [
-    "//components/safe_browsing/core/db:test_database_manager",
-    "//components/safe_browsing/core/db:util",
   ]
@@ -117,3 +105,2 @@ source_set("unit_tests") {
     "subresource_filter_content_settings_manager_unittest.cc",
-    "subresource_filter_safe_browsing_activation_throttle_unittest.cc",
     "verified_ruleset_dealer_unittest.cc",
@@ -128,3 +115,2 @@ source_set("unit_tests") {
     "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/common",
--- a/components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.cc
+++ b/components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.cc
@@ -462,11 +462,2 @@ void ContentSubresourceFilterThrottleManager::MaybeAppendNavigationThrottles(
 
-  if (navigation_handle->IsInMainFrame() &&
-      client_->GetSafeBrowsingDatabaseManager()) {
-    throttles->push_back(
-        std::make_unique<SubresourceFilterSafeBrowsingActivationThrottle>(
-            navigation_handle, client_->GetProfileInteractionManager(),
-            content::GetIOThreadTaskRunner({}),
-            client_->GetSafeBrowsingDatabaseManager()));
-  }
-
   if (!dealer_handle_)
--- a/testing/variations/fieldtrial_testing_config.json
+++ b/testing/variations/fieldtrial_testing_config.json
@@ -5945,175 +5945,2 @@
     ],
-    "SafeBrowsingDelayedWarnings": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingDelayedWarnings"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingEnhancedProtectionAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "PrivacyReorderedAndroid",
-                        "SafeBrowsingEnhancedProtection",
-                        "SafeBrowsingSecuritySectionUIAndroid"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingEnhancedProtectionMessageInInterstitials": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingEnhancedProtectionMessageInInterstitials"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionForSavedPasswords": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionForSavedPasswords"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionForSavedPasswordsAndroid": [
-        {
-            "platforms": [
-                "android",
-                "android_weblayer"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionForSavedPasswords",
-                        "SafeBrowsingPasswordProtectionShowDomainsForSavedPasswords"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionForSignedInUsers": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionForSignedInUsers"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionShowDomainsForSavedPasswords": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionShowDomainsForSavedPasswords"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPerProfileNetworkContexts": [
-        {
-            "platforms": [
-                "windows",
-                "linux",
-                "mac"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingRemoveCookies",
-                        "SafeBrowsingSeparateNetworkContexts"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingRealTimeUrlLookupEnabledWithToken": [
-        {
-            "platforms": [
-                "chromeos",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingRealTimeUrlLookupEnabledWithToken"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingRealTimeUrlLookupEnabledWithTokenAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingRealTimeUrlLookupEnabledWithToken"
-                    ]
-                }
-            ]
-        }
-    ],
     "SafetyAndPasswordCheckAndroid": [
--- a/tools/ipc_fuzzer/message_lib/BUILD.gn
+++ b/tools/ipc_fuzzer/message_lib/BUILD.gn
@@ -13,6 +13,4 @@ static_library("ipc_message_lib") {
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/guest_view/common",
     "//components/nacl/common:buildflags",
-    "//components/safe_browsing/core/common",
     "//components/spellcheck/common",
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -27,16 +27,12 @@
 #include "chrome/browser/enterprise/connectors/common.h"
 #include "chrome/browser/enterprise/connectors/connectors_manager.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/file_type_policies.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 #include "content/public/browser/download_item_utils.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/l10n/time_format.h"
@@ -49,7 +45,6 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using MixedContentStatus = download::DownloadItem::MixedContentStatus;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -79,10 +74,6 @@ class DownloadItemModelData : public bas
   // for the file type.
   bool should_prefer_opening_in_browser_;
 
-  // Danger level of the file determined based on the file type and whether
-  // there was a user action associated with the download.
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
-
   // Whether the download is currently being revived.
   bool is_being_revived_;
 
@@ -118,7 +109,6 @@ DownloadItemModelData::DownloadItemModel
     : should_show_in_shelf_(true),
       was_ui_notified_(false),
       should_prefer_opening_in_browser_(false),
-      danger_level_(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_being_revived_(false) {}
 
 } // namespace
@@ -268,14 +258,7 @@ bool DownloadItemModel::IsMixedContent()
 }
 
 bool DownloadItemModel::ShouldAllowDownloadFeedback() const {
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  if (!IsDangerous())
-    return false;
-  return safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *download_);
-#else
   return false;
-#endif
 }
 
 bool DownloadItemModel::ShouldRemoveFromShelfWhenComplete() const {
@@ -372,17 +355,6 @@ void DownloadItemModel::SetShouldPreferO
   data->should_prefer_opening_in_browser_ = preference;
 }
 
-safe_browsing::DownloadFileType::DangerLevel DownloadItemModel::GetDangerLevel() const {
-  const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
-  return data ? data->danger_level_ : safe_browsing::DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadItemModel::SetDangerLevel(
-    safe_browsing::DownloadFileType::DangerLevel danger_level) {
-  DownloadItemModelData* data = DownloadItemModelData::GetOrCreate(download_);
-  data->danger_level_ = danger_level;
-}
-
 download::DownloadItem::MixedContentStatus
 DownloadItemModel::GetMixedContentStatus() const {
   return download_->GetMixedContentStatus();
--- a/chrome/browser/download/download_item_model.h
+++ b/chrome/browser/download/download_item_model.h
@@ -13,7 +13,6 @@
 #include "chrome/browser/download/download_ui_model.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 // Implementation of DownloadUIModel that wrappers around a |DownloadItem*|. As
 // such, the caller is expected to ensure that the |download| passed into the
@@ -50,9 +49,6 @@ class DownloadItemModel : public Downloa
   void SetWasUINotified(bool should_notify) override;
   bool ShouldPreferOpeningInBrowser() const override;
   void SetShouldPreferOpeningInBrowser(bool preference) override;
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const override;
-  void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level) override;
   download::DownloadItem::MixedContentStatus GetMixedContentStatus()
       const override;
   void OpenUsingPlatformHandler() override;
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -30,3 +30,2 @@
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "content/public/browser/browser_context.h"
@@ -61,7 +61,6 @@
 using content::BrowserThread;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -101,8 +100,6 @@ DownloadTargetDeterminer::DownloadTarget
       should_notify_extensions_(false),
       create_target_directory_(false),
       conflict_action_(conflict_action),
-      danger_type_(download->GetDangerType()),
-      danger_level_(DownloadFileType::NOT_DANGEROUS),
       virtual_path_(initial_virtual_path),
       is_filetype_handled_safely_(false),
 #if defined(OS_ANDROID)
@@ -772,23 +769,12 @@ DownloadTargetDeterminer::Result
   DCHECK(!virtual_path_.empty());
   next_state_ = STATE_CHECK_VISITED_REFERRER_BEFORE;
 
-  // If user has validated a dangerous download, don't check.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_USER_VALIDATED)
-    return CONTINUE;
-
-  delegate_->CheckDownloadUrl(
-      download_, virtual_path_,
-      base::BindOnce(&DownloadTargetDeterminer::CheckDownloadUrlDone,
-                     weak_ptr_factory_.GetWeakPtr()));
-  return QUIT_DOLOOP;
+  return CONTINUE;
 }
 
-void DownloadTargetDeterminer::CheckDownloadUrlDone(
-    download::DownloadDangerType danger_type) {
+void DownloadTargetDeterminer::CheckDownloadUrlDone() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  DVLOG(20) << "URL Check Result:" << danger_type;
   DCHECK_EQ(STATE_CHECK_VISITED_REFERRER_BEFORE, next_state_);
-  danger_type_ = danger_type;
   DoLoop();
 }
 
@@ -798,50 +783,6 @@ DownloadTargetDeterminer::Result
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   next_state_ = STATE_DETERMINE_INTERMEDIATE_PATH;
 
-  // Checking if there are prior visits to the referrer is only necessary if the
-  // danger level of the download depends on the file type.
-  if (danger_type_ != download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS &&
-      danger_type_ != download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT &&
-      danger_type_ != download::DOWNLOAD_DANGER_TYPE_ALLOWLISTED_BY_POLICY) {
-    return CONTINUE;
-  }
-
-  // First determine the danger level assuming that the user doesn't have any
-  // prior visits to the referrer recoreded in history. The resulting danger
-  // level would be ALLOW_ON_USER_GESTURE if the level depends on the visit
-  // history. In the latter case, we can query the history DB to determine if
-  // there were prior requests and determine the danger level again once the
-  // result is available.
-  danger_level_ = GetDangerLevel(NO_VISITS_TO_REFERRER);
-
-  if (danger_level_ == DownloadFileType::NOT_DANGEROUS)
-    return CONTINUE;
-
-  if (danger_level_ == DownloadFileType::ALLOW_ON_USER_GESTURE) {
-    // HistoryServiceFactory redirects incognito profiles to on-record profiles.
-    // There's no history for on-record profiles in unit_tests.
-    history::HistoryService* history_service =
-        HistoryServiceFactory::GetForProfile(
-            GetProfile(), ServiceAccessType::EXPLICIT_ACCESS);
-
-    if (history_service && download_->GetReferrerUrl().is_valid()) {
-      history_service->GetVisibleVisitCountToHost(
-          download_->GetReferrerUrl(),
-          base::BindOnce(
-              &VisitCountsToVisitedBefore,
-              base::BindOnce(
-                  &DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone,
-                  weak_ptr_factory_.GetWeakPtr())),
-          &history_tracker_);
-      return QUIT_DOLOOP;
-    }
-  }
-
-  // If the danger level doesn't depend on having visited the refererrer URL or
-  // if original profile doesn't have a HistoryService or the referrer url is
-  // invalid, then assume the referrer has not been visited before.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
   return CONTINUE;
 }
 
@@ -849,11 +790,6 @@ void DownloadTargetDeterminer::CheckVisi
     bool visited_referrer_before) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK_EQ(STATE_DETERMINE_INTERMEDIATE_PATH, next_state_);
-  danger_level_ = GetDangerLevel(
-      visited_referrer_before ? VISITED_REFERRER : NO_VISITS_TO_REFERRER);
-  if (danger_level_ != DownloadFileType::NOT_DANGEROUS &&
-      danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
   DoLoop();
 }
 
@@ -895,58 +831,31 @@ DownloadTargetDeterminer::Result
   // target path. In practice the temporary download file that was created prior
   // to download filename determination is already named
   // download_->GetForcedFilePath().
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS &&
-      !download_->GetForcedFilePath().empty()) {
+  if(!download_->GetForcedFilePath().empty()) {
     DCHECK_EQ(download_->GetForcedFilePath().value(), local_path_.value());
     intermediate_path_ = local_path_;
     return COMPLETE;
   }
 
   // Transient downloads don't need to be renamed to intermediate file.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS &&
-      download_->IsTransient()) {
+  if(download_->IsTransient()) {
     intermediate_path_ = local_path_;
     return COMPLETE;
   }
 
-  // Other safe downloads get a .crdownload suffix for their intermediate name.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS) {
-    intermediate_path_ = GetCrDownloadPath(local_path_);
-    return COMPLETE;
-  }
-
   // If this is a resumed download, then re-use the existing intermediate path
   // if one is available. A resumed download shouldn't cause a non-dangerous
   // download to be considered dangerous upon resumption. Therefore the
   // intermediate file should already be in the correct form.
   if (is_resumption_ && !download_->GetFullPath().empty() &&
       local_path_.DirName() == download_->GetFullPath().DirName()) {
-    DCHECK_NE(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-              download_->GetDangerType());
     DCHECK_EQ(kCrdownloadSuffix, download_->GetFullPath().Extension());
     intermediate_path_ = download_->GetFullPath();
     return COMPLETE;
   }
 
-  // Dangerous downloads receive a random intermediate name that looks like:
-  // 'Unconfirmed <random>.crdownload'.
-  const base::FilePath::CharType kUnconfirmedFormatSuffix[] =
-      FILE_PATH_LITERAL(" %d.crdownload");
-  // Range of the <random> uniquifier.
-  const int kUnconfirmedUniquifierRange = 1000000;
-#if defined(OS_WIN)
-  base::string16 unconfirmed_format =
-      l10n_util::GetStringUTF16(IDS_DOWNLOAD_UNCONFIRMED_PREFIX);
-#else
-  std::string unconfirmed_format =
-      l10n_util::GetStringUTF8(IDS_DOWNLOAD_UNCONFIRMED_PREFIX);
-#endif
-  unconfirmed_format.append(kUnconfirmedFormatSuffix);
-
-  base::FilePath::StringType file_name = base::StringPrintf(
-      unconfirmed_format.c_str(),
-      base::RandInt(0, kUnconfirmedUniquifierRange));
-  intermediate_path_ = local_path_.DirName().Append(file_name);
+  // Other safe downloads get a .crdownload suffix for their intermediate name.
+  intermediate_path_ = GetCrDownloadPath(local_path_);
   return COMPLETE;
 }
 
@@ -957,8 +866,6 @@ void DownloadTargetDeterminer::ScheduleC
             << " Local:" << local_path_.AsUTF8Unsafe()
             << " Intermediate:" << intermediate_path_.AsUTF8Unsafe()
             << " Confirmation reason:" << static_cast<int>(confirmation_reason_)
-            << " Danger type:" << danger_type_
-            << " Danger level:" << danger_level_
             << " Result:" << static_cast<int>(result);
   std::unique_ptr<DownloadTargetInfo> target_info(new DownloadTargetInfo);
 
@@ -969,8 +876,6 @@ void DownloadTargetDeterminer::ScheduleC
                confirmation_reason_ != DownloadConfirmationReason::NONE
            ? DownloadItem::TARGET_DISPOSITION_PROMPT
            : DownloadItem::TARGET_DISPOSITION_OVERWRITE);
-  target_info->danger_type = danger_type_;
-  target_info->danger_level = danger_level_;
   target_info->intermediate_path = intermediate_path_;
   target_info->mime_type = mime_type_;
   target_info->is_filetype_handled_safely = is_filetype_handled_safely_;
@@ -1059,33 +964,6 @@ bool DownloadTargetDeterminer::HasPrompt
                                 DownloadItem::TARGET_DISPOSITION_PROMPT);
 }
 
-DownloadFileType::DangerLevel DownloadTargetDeterminer::GetDangerLevel(
-    PriorVisitsToReferrer visits) const {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  // If the user has has been prompted or will be, assume that the user has
-  // approved the download. A programmatic download is considered safe unless it
-  // contains malware.
-  if (HasPromptedForPath() ||
-      confirmation_reason_ != DownloadConfirmationReason::NONE ||
-      !download_->GetForcedFilePath().empty())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  // User-initiated extension downloads from pref-whitelisted sources are not
-  // considered dangerous.
-  if (download_->HasUserGesture() &&
-      download_crx_util::IsTrustedExtensionDownload(GetProfile(), *download_)) {
-    return DownloadFileType::NOT_DANGEROUS;
-  }
-
-  // Anything the user has marked auto-open is OK if it's user-initiated.
-  if (download_prefs_->IsAutoOpenEnabled(download_->GetURL(), virtual_path_) &&
-      download_->HasUserGesture())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
 void DownloadTargetDeterminer::OnDownloadDestroyed(
     DownloadItem* download) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
--- a/chrome/browser/download/download_target_determiner.h
+++ b/chrome/browser/download/download_target_determiner.h
@@ -19,7 +19,6 @@
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 #include "content/public/browser/download_manager_delegate.h"
 #include "ppapi/buildflags/buildflags.h"
 
@@ -267,7 +266,7 @@ class DownloadTargetDeterminer : public
 
   // Callback invoked after the delegate has checked the download URL. Sets the
   // danger type of the download to |danger_type|.
-  void CheckDownloadUrlDone(download::DownloadDangerType danger_type);
+  void CheckDownloadUrlDone();
 
   // Checks if the user has visited the referrer URL of the download prior to
   // today. The actual check is only performed if it would be needed to
@@ -316,16 +315,6 @@ class DownloadTargetDeterminer : public
   // operation.
   bool HasPromptedForPath() const;
 
-  // Returns true if this download should show the "dangerous file" warning.
-  // Various factors are considered, such as the type of the file, whether a
-  // user action initiated the download, and whether the user has explicitly
-  // marked the file type as "auto open". Protected virtual for testing.
-  //
-  // If |require_explicit_consent| is non-null then the pointed bool will be set
-  // to true if the download requires explicit user consent.
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel(
-      PriorVisitsToReferrer visits) const;
-
   // Generates the download file name based on information from URL, response
   // headers and sniffed mime type.
   base::FilePath GenerateFileName() const;
@@ -340,8 +329,6 @@ class DownloadTargetDeterminer : public
   bool create_target_directory_;
   download::DownloadPathReservationTracker::FilenameConflictAction
       conflict_action_;
-  download::DownloadDangerType danger_type_;
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
   base::FilePath virtual_path_;
   base::FilePath local_path_;
   base::FilePath intermediate_path_;
--- a/chrome/browser/download/download_target_info.cc
+++ b/chrome/browser/download/download_target_info.cc
@@ -4,8 +4,5 @@
 
-#include "components/safe_browsing/core/file_type_policies.h"
-
 DownloadTargetInfo::DownloadTargetInfo()
     : target_disposition(download::DownloadItem::TARGET_DISPOSITION_OVERWRITE),
       danger_type(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS),
-      danger_level(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_filetype_handled_safely(false),
--- a/chrome/browser/download/download_target_info.h
+++ b/chrome/browser/download/download_target_info.h
@@ -13,7 +13,6 @@
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_schedule.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 struct DownloadTargetInfo {
   DownloadTargetInfo();
@@ -58,7 +57,6 @@ struct DownloadTargetInfo {
   //       UNKONWN, the file will still be conisdered a DANGEROUS_FILE. However,
   //       SafeBrowsing may flag the file as being malicious, in which case the
   //       malicious classification should take precedence.
-  safe_browsing::DownloadFileType::DangerLevel danger_level;
 
   // Suggested intermediate path. The downloaded bytes should be written to this
   // path until all the bytes are available and the user has accepted a
--- a/chrome/browser/download/download_ui_model.cc
+++ b/chrome/browser/download/download_ui_model.cc
@@ -11,4 +11,2 @@
 #include "chrome/browser/download/offline_item_utils.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/common/url_constants.h"
@@ -32,7 +32,6 @@
 
 using base::TimeDelta;
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 using offline_items_collection::FailState;
 
 namespace {
@@ -241,3 +239,3 @@ base::string16 DownloadUIModel::GetWarningText(const base::string16& filename,
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
-      return l10n_util::GetStringUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_URL);
+      break;
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE:
@@ -250,17 +248,4 @@ base::string16 DownloadUIModel::GetWarningText(const base::string16& filename,
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST:
-      return l10n_util::GetStringFUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT,
-                                        filename, offset);
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool request_ap_verdicts = false;
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-      request_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->IsUnderAdvancedProtection();
-#endif
-      return l10n_util::GetStringFUTF16(
-          request_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
-          filename, offset);
+      break;
     }
@@ -395,13 +394,6 @@ bool DownloadUIModel::ShouldPreferOpenin
 
 void DownloadUIModel::SetShouldPreferOpeningInBrowser(bool preference) {}
 
-DownloadFileType::DangerLevel DownloadUIModel::GetDangerLevel() const {
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadUIModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {}
-
 download::DownloadItem::MixedContentStatus
 DownloadUIModel::GetMixedContentStatus() const {
   return download::DownloadItem::MixedContentStatus::UNKNOWN;
--- a/chrome/browser/download/download_ui_model.h
+++ b/chrome/browser/download/download_ui_model.h
@@ -17,7 +17,6 @@
 #include "components/download/public/common/download_item.h"
 #include "components/offline_items_collection/core/offline_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 #if !defined(OS_ANDROID)
 #include "chrome/browser/download/download_commands.h"
@@ -168,15 +167,6 @@ class DownloadUIModel {
   // Change what's returned by ShouldPreferOpeningInBrowser to |preference|.
   virtual void SetShouldPreferOpeningInBrowser(bool preference);
 
-  // Return the danger level determined during download target determination.
-  // The value returned here is independent of the danger level as determined by
-  // the Safe Browsing.
-  virtual safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const;
-
-  // Change what's returned by GetDangerLevel().
-  virtual void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level);
-
   // Return the mixed content status determined during download target
   // determination.
   virtual download::DownloadItem::MixedContentStatus GetMixedContentStatus()
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -632,3 +631,3 @@
   bool is_reset_shortcuts_feature_enabled = false;
-#if defined(OS_WIN)
+#if (false)
   is_reset_shortcuts_feature_enabled =
