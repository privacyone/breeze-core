# Disables IPv6 probing and adds an option to change the IPv6 probing result

--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -4,4 +4,8 @@
 
 #ifndef CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
 #define CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
+    {"set-ipv6-probe-false",
+     "SetIpv6ProbeFalse",
+     "Forces the result of the browser's IPv6 probing (i.e. IPv6 connectivity test) to be unsuccessful. This causes IPv4 addresses to be prioritized over IPv6 addresses. Without this flag, the probing result is set to be successful, which causes IPv6 to be used over IPv4 when possible.  ungoogled-chromium flag.",
+     kOsAll, FEATURE_VALUE_TYPE(net::features::kSetIpv6ProbeFalse)},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -266,5 +266,7 @@ const base::Feature kPartitionedCookies{
 const base::Feature kExtraCookieValidityChecks{
     "ExtraCookieValidityChecks", base::FEATURE_ENABLED_BY_DEFAULT};
 
+const base::Feature kSetIpv6ProbeFalse{"SetIpv6ProbeFalse", base::FEATURE_DISABLED_BY_DEFAULT};
+
 }  // namespace features
 }  // namespace net
--- a/net/base/features.h
+++ b/net/base/features.h
@@ -400,6 +400,8 @@ NET_EXPORT extern const base::Feature kP
 // feature flag, assuming no breakage occurs with it enabled.
 NET_EXPORT extern const base::Feature kExtraCookieValidityChecks;
 
+NET_EXPORT extern const base::Feature kSetIpv6ProbeFalse;
+
 }  // namespace features
 }  // namespace net
 
--- a/net/dns/host_resolver_manager.cc
+++ b/net/dns/host_resolver_manager.cc
@@ -138,11 +138,6 @@ const unsigned kMinimumTTLSeconds = kCac
 // cached.
 const int kIPv6ProbePeriodMs = 1000;
 
-// RIPE NCC k.root-servers.net. 2001:7fd::1 (anycasted), used for IPv6 probes.
-const uint8_t kIPv6ProbeAddress[] = {0x20, 0x01, 0x07, 0xfd, 0x00, 0x00,
-                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-                                     0x00, 0x00, 0x00, 0x01};
-
 enum DnsResolveStatus {
   RESOLVE_STATUS_DNS_SUCCESS = 0,
   RESOLVE_STATUS_PROC_SUCCESS,
@@ -3693,7 +3688,7 @@ bool HostResolverManager::IsIPv6Reachabl
       (tick_clock_->NowTicks() - last_ipv6_probe_time_).InMilliseconds() >
           kIPv6ProbePeriodMs) {
     SetLastIPv6ProbeResult(
-        IsGloballyReachable(IPAddress(kIPv6ProbeAddress), net_log));
+        !base::FeatureList::IsEnabled(features::kSetIpv6ProbeFalse));
     cached = false;
   }
   net_log.AddEvent(
