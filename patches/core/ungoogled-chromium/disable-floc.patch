--- a/chrome/browser/federated_learning/floc_id_provider_factory.cc
+++ b/chrome/browser/federated_learning/floc_id_provider_factory.cc
@@ -49,42 +49,7 @@ FlocIdProviderFactory::~FlocIdProviderFa
 
 KeyedService* FlocIdProviderFactory::BuildServiceInstanceFor(
     content::BrowserContext* context) const {
-  if (!base::FeatureList::IsEnabled(kFederatedLearningOfCohorts))
-    return nullptr;
-
-  Profile* profile = Profile::FromBrowserContext(context);
-
-  syncer::SyncService* sync_service =
-      SyncServiceFactory::GetForProfile(profile);
-  if (!sync_service)
-    return nullptr;
-
-  PrivacySandboxSettings* privacy_sandbox_settings =
-      PrivacySandboxSettingsFactory::GetForProfile(profile);
-  if (!privacy_sandbox_settings)
-    return nullptr;
-
-  FlocRemotePermissionService* floc_remote_permission_service =
-      FlocRemotePermissionServiceFactory::GetForProfile(profile);
-  if (!floc_remote_permission_service)
-    return nullptr;
-
-  history::HistoryService* history_service =
-      HistoryServiceFactory::GetForProfile(profile,
-                                           ServiceAccessType::IMPLICIT_ACCESS);
-  if (!history_service)
-    return nullptr;
-
-  syncer::UserEventService* user_event_service =
-      browser_sync::UserEventServiceFactory::GetForProfile(profile);
-  if (!user_event_service)
-    return nullptr;
-
-  auto floc_event_logger = std::make_unique<FlocEventLogger>(
-      sync_service, floc_remote_permission_service, user_event_service);
-
-  return new FlocIdProviderImpl(profile->GetPrefs(), privacy_sandbox_settings,
-                                history_service, std::move(floc_event_logger));
+  return nullptr;
 }
 
 }  // namespace federated_learning
--- a/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
+++ b/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
@@ -132,8 +132,7 @@ bool ShouldDisablePrivacySandbox(
 
 // Returns whether FLoC is allowable by the current state of |pref_service|.
 bool IsFlocAllowedByPrefs(PrefService* pref_service) {
-  return pref_service->GetBoolean(prefs::kPrivacySandboxFlocEnabled) &&
-         pref_service->GetBoolean(prefs::kPrivacySandboxApisEnabled);
+  return false;
 }
 
 // Returns the number of days in |time|, rounded to the closest day by hour if
@@ -208,7 +207,7 @@ PrivacySandboxSettings::PrivacySandboxSe
 PrivacySandboxSettings::~PrivacySandboxSettings() = default;
 
 bool PrivacySandboxSettings::IsFlocAllowed() const {
-  return IsFlocAllowedByPrefs(pref_service_);
+  return false;
 }
 
 bool PrivacySandboxSettings::IsFlocAllowedForContext(
--- a/components/privacy_sandbox/privacy_sandbox_prefs.cc
+++ b/components/privacy_sandbox/privacy_sandbox_prefs.cc
@@ -42,7 +42,7 @@ void RegisterProfilePrefs(PrefRegistrySi
   registry->RegisterTimePref(prefs::kPrivacySandboxFlocDataAccessibleSince,
                              base::Time());
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxFlocEnabled, true,
+      prefs::kPrivacySandboxFlocEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
 }
 
