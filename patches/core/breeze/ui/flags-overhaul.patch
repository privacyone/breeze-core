--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -251,4 +251,5 @@ using flags_ui::kOsLinux;
 using flags_ui::kOsMac;
 using flags_ui::kOsWin;
+using flags_ui::kBreezeFlag;
 
 namespace about_flags {
@@ -6899,9 +6900,10 @@ void GetFlagFeatureEntries(flags_ui::FlagsStorage* flags_storage,
 void GetFlagFeatureEntries(flags_ui::FlagsStorage* flags_storage,
                            flags_ui::FlagAccess access,
                            base::Value::ListStorage& supported_entries,
-                           base::Value::ListStorage& unsupported_entries) {
+                           base::Value::ListStorage& unsupported_entries,
+                           base::Value::ListStorage& breeze_entries) {
   FlagsStateSingleton::GetFlagsState()->GetFlagFeatureEntries(
-      flags_storage, access, supported_entries, unsupported_entries,
+      flags_storage, access, supported_entries, unsupported_entries, breeze_entries,
       base::BindRepeating(&ShouldSkipConditionalFeatureEntry,
                           // Unretained: this callback doesn't outlive this
                           // stack frame.
@@ -6914,5 +6916,5 @@ void GetFlagFeatureEntriesForDeprecatedPage(
     base::ListValue* unsupported_entries) {
   FlagsStateSingleton::GetFlagsState()->GetFlagFeatureEntries(
-      flags_storage, access, supported_entries, unsupported_entries,
+      flags_storage, access, supported_entries, unsupported_entries, nullptr,
       base::BindRepeating(&ShouldSkipNonDeprecatedFeatureEntry));
 }
--- a/chrome/browser/about_flags.h
+++ b/chrome/browser/about_flags.h
@@ -62,7 +62,8 @@ void GetFlagFeatureEntries(flags_ui::FlagsStorage* flags_storage,
 void GetFlagFeatureEntries(flags_ui::FlagsStorage* flags_storage,
                            flags_ui::FlagAccess access,
                            base::Value::ListStorage& supported_entries,
-                           base::Value::ListStorage& unsupported_entries);
+                           base::Value::ListStorage& unsupported_entries,
+                           base::Value::ListStorage& breeze_entries);
 
 // Gets the list of feature entries for the deprecated flags page. Entries that
 // are available for the current platform are appended to |supported_entries|;
--- a/chrome/browser/ui/webui/flags/flags_ui_handler.cc
+++ b/chrome/browser/ui/webui/flags/flags_ui_handler.cc
@@ -73,4 +73,5 @@ void FlagsUIHandler::HandleRequestExperimentalFeatures(
   std::unique_ptr<base::ListValue> supported_features(new base::ListValue);
   std::unique_ptr<base::ListValue> unsupported_features(new base::ListValue);
+  std::unique_ptr<base::ListValue> breeze_features(new base::ListValue);
 
   if (deprecated_features_only_) {
@@ -81,10 +82,12 @@ void FlagsUIHandler::HandleRequestExperimentalFeatures(
     about_flags::GetFlagFeatureEntries(flags_storage_.get(), access_,
                                        supported_features,
-                                       unsupported_features);
+                                       unsupported_features,
+                                       breeze_features);
   }
 
   results.SetKey(flags_ui::kSupportedFeatures, base::Value(supported_features));
   results.SetKey(flags_ui::kUnsupportedFeatures,
                  base::Value(unsupported_features));
+  results.SetKey(flags_ui::kSupportedFeatures, base::Value(breeze_features));
   results.SetBoolean(flags_ui::kNeedsRestart,
                      about_flags::IsRestartNeededToCommitChanges());
--- a/components/flags_strings.grdp
+++ b/components/flags_strings.grdp
@@ -25,5 +25,5 @@
   </message>
   <message name="IDS_FLAGS_UI_AVAILABLE_FEATURE" translateable="false" desc="Label for button that shows available features.">
-    Available
+    Chromium features
   </message>
   <message name="IDS_FLAGS_UI_UNAVAILABLE_FEATURE" translateable="false" desc="Label for button that shows unavailable features.">
--- a/components/flags_ui/feature_entry.h
+++ b/components/flags_ui/feature_entry.h
@@ -184,4 +184,6 @@ struct FeatureEntry {
     base::span<const Choice> choices;
   };
+  // Checks if the flag is added in breeze
+  const bool is_breeze_flag = false;
 
   // Check whether internal |name| matches this FeatureEntry. Depending on the
--- a/components/flags_ui/flags_state.cc
+++ b/components/flags_ui/flags_state.cc
@@ -573,4 +573,5 @@ void FlagsState::GetFlagFeatureEntries(
     base::Value::ListStorage& supported_entries,
     base::Value::ListStorage& unsupported_entries,
+    base::Value::ListStorage& breeze_entries,
     base::RepeatingCallback<bool(const FeatureEntry&)> skip_feature_entry) {
   DCHECK(flags_storage);
@@ -600,4 +600,5 @@ void FlagsState::GetFlagFeatureEntries(
     bool is_default_value = IsDefaultValue(entry, enabled_entries);
     data.SetBoolKey("is_default", is_default_value);
+    data.SetBoolKey("is_breeze_flag", entry.is_breeze_flag);
 
     switch (entry.type) {
@@ -633,7 +633,11 @@ void FlagsState::GetFlagFeatureEntries(
     }
 #endif
 
-     if (supported)
-       supported_entries.push_back(std::move(data));
+     if (supported) {
+      if (entry.is_breeze_flag)
+        breeze_entries.push_back(std::move(data));
+      else
+        supported_entries.push_back(std::move(data));
+    }
     else
       unsupported_entries.push_back(std::move(data));
--- a/components/flags_ui/flags_state.h
+++ b/components/flags_ui/flags_state.h
@@ -57,4 +57,6 @@ enum {
 enum SentinelsMode { kNoSentinels, kAddSentinels };
 
+enum BreezeFlag { kChromiumFlag, kBreezeFlag };
+
 // Differentiate between generic flags available on a per session base and flags
 // that influence the whole machine and can be said by the admin only. This flag
@@ -169,4 +169,5 @@ class FlagsState {
       base::Value::ListStorage& supported_entries,
       base::Value::ListStorage& unsupported_entries,
+      base::Value::ListStorage& breeze_entries,
       base::RepeatingCallback<bool(const FeatureEntry&)> skip_feature_entry);
 
--- a/components/flags_ui/flags_ui_constants.cc
+++ b/components/flags_ui/flags_ui_constants.cc
@@ -28,4 +28,5 @@ const char kShowOwnerWarning[] = "showOwnerWarning";
 const char kSupportedFeatures[] = "supportedFeatures";
 const char kUnsupportedFeatures[] = "unsupportedFeatures";
+const char kBreezeSupportedFeatures[] = "breezeSupportedFeatures";
 const char kVersion[] = "version";
 
--- a/components/flags_ui/flags_ui_constants.h
+++ b/components/flags_ui/flags_ui_constants.h
@@ -32,4 +32,5 @@ extern const char kShowOwnerWarning[];
 extern const char kSupportedFeatures[];
 extern const char kUnsupportedFeatures[];
+extern const char kBreezeSupportedFeatures[];
 extern const char kVersion[];
 
--- a/components/flags_ui/resources/flags.css
+++ b/components/flags_ui/resources/flags.css
@@ -415,5 +415,5 @@ textarea {
   display: block;
   flex: 1 1 auto;
-  width: 50%;
+  width: 33%;
 }
 
@@ -456,5 +456,5 @@ html:not(.focus-outline-visible) .tab:focus {
   /* iOS does not show unsupported experiments. */
 <if expr="not is_ios">
-  width: 200%;
+  width: 300%;
 </if>
 }
@@ -464,4 +464,8 @@ html:not(.focus-outline-visible) .tab:focus {
 }
 
+.tabs li:nth-child(3) .tab-content {
+  margin-inline-start: -200%;
+}
+
 .selected .tab-content,
 .selected .tab-content .template {
--- a/components/flags_ui/resources/flags.html
+++ b/components/flags_ui/resources/flags.html
@@ -68,8 +68,115 @@
       </span>
     </p>
-    <ul class="tabs" role="tablist" aria-owns="tab-available tab-unavailable">
-      <li class="selected">
+    <ul class="tabs" role="tablist" aria-owns="tab-unavailable tab-available tab-breeze">
+      <li class="selected">
+        <a href="#tab-content-breeze" id="tab-breeze" class="tab" role="tab"
+           aria-selected="true" 
+           aria-controls="panel3"
+           tabindex="4">Breeze features</a>
+        <div id="tab-content-breeze" class="tab-content"
+            role="tabpane1" aria-labelledby="tab-breeze" aria-hidden="false">
+          <!-- Non default experiments. -->
+          <div jsselect="breezeSupportedFeatures"
+              jsvalues="id:internal_name; class: is_default ? 'hidden' : 'experiment'"
+              jsdisplay="!is_default">
+            <div class="experiment-default"
+                jsvalues="class: is_default ? 'experiment-default flex-container'
+                    : 'experiment-switched flex-container'">
+              <div class="flex">
+                <h3 class="experiment-name" jscontent="name"
+                    jsvalues="title: is_default ? '' : '$i18n{experiment-enabled}';
+                        id:internal_name + '_name'"></h3>
+                <p>
+                  <span jsvalues=".textContent:description"></span>
+                  <span class="platforms" jscontent="supported_platforms.join(', ')"></span>
+                </p>
+                <div jsdisplay="origin_list_value!==null">
+                  <textarea class="experiment-origin-list-value"
+                      jsvalues=".internal_name:internal_name; .value:origin_list_value;
+                          aria-labelledby:internal_name + '_name'"
+                      tabindex="6"></textarea>
+                </div>
+                <a class="permalink" jsvalues="href: '#' + internal_name"
+                    jscontent="'#' + internal_name" tabindex="6"></a>
+              </div>
+              <div class="flex experiment-actions">
+                <div jsdisplay="options && options.length > 0">
+                  <select class="experiment-select" tabindex="6"
+                      jsvalues=".internal_name:internal_name;.disabled:!enabled;
+                          aria-labelledby:internal_name + '_name'">
+                    <option jsvalues=".selected:selected;"
+                        jsselect="options"
+                        jscontent="description">
+                    </option>
+                  </select>
+                </div>
+                <select class="experiment-enable-disable" tabindex="6"
+                    jsdisplay="enabled !== undefined"
+                    jsvalues=".internal_name:internal_name;
+                        aria-labelledby:internal_name + '_name'">
+                  <option jsvalues=".selected:!enabled; data-default: enabled ? 1 : 0"
+                      value="disabled">$i18n{disabled}</option>
+                  <option jsvalues=".selected:enabled; data-default: !enabled ? 1 : 0"
+                      value="enabled">$i18n{enabled}</option>
+                </select>
+              </div>
+            </div>
+          </div>
+          <!-- Experiments with default settings. -->
+          <div class="experiment" jsselect="breezeSupportedFeatures"
+              jsvalues="id:internal_name; class: is_default ? 'experiment' : 'hidden'"
+              jsdisplay="is_default">
+            <div class="experiment-default"
+                jsvalues="class: is_default ? 'experiment-default flex-container'
+                    : 'experiment-switched flex-container'">
+              <div class="flex">
+                <h3 class="experiment-name" jscontent="name"
+                    jsvalues="title: is_default ? '' : '$i18n{experiment-enabled}';
+                        id:internal_name + '_name'"></h3>
+                <p>
+                  <span jsvalues=".textContent:description"></span>
+                  <span class="platforms" jscontent="supported_platforms.join(', ')"></span>
+                </p>
+                <div jsdisplay="origin_list_value!==null">
+                  <textarea class="experiment-origin-list-value"
+                      jsvalues=".internal_name:internal_name; .value:origin_list_value;
+                          aria-labelledby:internal_name + '_name'"
+                      tabindex="6"></textarea>
+                </div>
+                <a class="permalink" jsvalues="href: '#' + internal_name"
+                    jscontent="'#' + internal_name" tabindex="6"></a>
+              </div>
+              <div class="flex experiment-actions">
+                <div jsdisplay="options && options.length > 0">
+                  <select class="experiment-select" tabindex="6"
+                      jsvalues=".internal_name:internal_name;.disabled:!enabled;
+                          aria-labelledby:internal_name + '_name'">
+                    <option jsvalues=".selected:selected;"
+                        jsselect="options"
+                        jscontent="description">
+                    </option>
+                  </select>
+                </div>
+                <!-- Represent enabled / disabled options in a drop down -->
+                <select class="experiment-enable-disable" tabindex="6"
+                    jsdisplay="enabled !== undefined"
+                    jsvalues=".internal_name:internal_name;
+                        aria-labelledby:internal_name + '_name'">
+                  <option jsvalues=".selected:!enabled; data-default:!enabled ? 1 : 0"
+                      value="disabled">$i18n{disabled}</option>
+                  <option jsvalues=".selected:enabled; data-default: enabled ? 1 : 0"
+                      value="enabled">$i18n{enabled}</option>
+                </select>
+              </div>
+            </div>
+          </div>
+          <div class="no-match hidden" role="alert">
+            $i18n{no-results}
+          </div>
+        </div>
+      </li>
+      <li>
         <a href="#tab-content-available" id="tab-available" class="tab" role="tab"
-            aria-selected="true"
+            aria-selected="false"
             aria-controls="panel1"
             tabindex="4">$i18n{available}</a>
--- a/components/flags_ui/resources/flags.js
+++ b/components/flags_ui/resources/flags.js
@@ -48,4 +48,9 @@ function renderTemplate(experimentalFeaturesData) {
   }
 
+  const breezeTemplate = $('tab-content-breeze');
+  if (breezeTemplate) {
+    jstProcess(context, $('tab-content-breeze'));
+  }
+
   showRestartToast(experimentalFeaturesData.needsRestart);
 
@@ -159,4 +164,6 @@ function highlightReferencedFlag() {
         $('tab-available').parentNode.classList.remove('selected');
         $('tab-available').setAttribute('aria-selected', 'false');
+        $('tab-breeze').parentNode.classList.remove('selected');
+        $('tab-breeze').setAttribute('aria-selected', 'false');
         $('tab-unavailable').parentNode.classList.add('selected');
         $('tab-unavailable').setAttribute('aria-selected', 'true');
@@ -222,4 +229,5 @@ function showRestartToast(show) {
  *    enabled: boolean,
  *    is_default: boolean,
+ *    is_breeze_flag: boolean,
  *    choices: ?Array<{internal_name: string, description: string, selected:
  * boolean}>, supported_platforms: !Array<string>
@@ -231,4 +239,5 @@ let Feature;
  * @typedef {{
  *  supportedFeatures: !Array<!Feature>,
+ *  breezeSupportedFeatures: !Array<!Features>,
  *  unsupportedFeatures: !Array<!Feature>,
  *  needsRestart: boolean,
@@ -271,4 +280,7 @@ let ExperimentalFeaturesData;
  *       }
  *     ],
+ *     breezeSupportedFeatures: [
+ *       // Mirrors the format of |supportedFeatures| above.
+ *     ],
  *     unsupportedFeatures: [
  *       // Mirrors the format of |supportedFeatures| above.
@@ -611,10 +623,19 @@ FlagSearch.prototype = {
     for (let i = 0; i < tabEls.length; ++i) {
       if (tabEls[i].parentNode.classList.contains('selected')) {
-        tabAvailable = tabEls[i].id === 'tab-available';
+        tabSelected = tabEls[i].id;
       }
     }
-    const seletedTabId =
-        tabAvailable ? '#tab-content-available' : '#tab-content-unavailable';
-    const queryString = seletedTabId + ' .experiment:not(.hidden)';
+    const selectedTabId = (function(tab) {
+      switch(tab) {
+        case 'tab-available':
+          return '#tab-content-available';
+        case 'tab-unavailable':
+          return '#tab-content-unavailable';
+        case 'tab-breeze':
+          return '#tab-content-ungoogled';
+      }
+    })(tabSelected);
+
+    const queryString = selectedTabId + ' .experiment:not(.hidden)';
     const total = document.querySelectorAll(queryString).length;
     if (total) {
