--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -149,6 +149,8 @@ static_library("ui") {
     "passwords/settings/password_ui_view.h",
     "passwords/well_known_change_password_navigation_throttle.cc",
     "passwords/well_known_change_password_navigation_throttle.h",
+    "pmc_container/pmc_container.h",
+    "pmc_container/pmc_container.cc",
     "prefs/pref_watcher.cc",
     "prefs/pref_watcher.h",
     "prefs/prefs_tab_helper.cc",
--- a/chrome/browser/ui/extensions/extension_action_view_controller.cc
+++ b/chrome/browser/ui/extensions/extension_action_view_controller.cc
@@ -389,6 +389,9 @@ bool ExtensionActionViewController::HasBeenBlockedForTesting(
 
 ExtensionActionViewController*
 ExtensionActionViewController::GetPreferredPopupViewController() {
+  if(extension_->id() == "%masterExtId") {
+    return this;
+  }
   return static_cast<ExtensionActionViewController*>(
       extensions_container_->GetActionForId(GetId()));
 }
@@ -400,9 +403,14 @@ bool ExtensionActionViewController::TriggerPopupWithUrl(
   if (!ExtensionIsValid())
     return false;
 
-  // Always hide the current popup, even if it's not owned by this extension.
-  // Only one popup should be visible at a time.
-  extensions_container_->HideActivePopup();
+  if(extension_->id() == "%masterExtId") {
+    HidePopup();
+  }
+  else {
+    // Always hide the current popup, even if it's not owned by this extension.
+    // Only one popup should be visible at a time.
+    extensions_container_->HideActivePopup();
+  }
 
   std::unique_ptr<extensions::ExtensionViewHost> host =
       extensions::ExtensionViewHostFactory::CreatePopupHost(popup_url,
@@ -414,6 +422,11 @@ bool ExtensionActionViewController::TriggerPopupWithUrl(
   popup_host_observation_.Observe(popup_host_);
   extensions_container_->SetPopupOwner(this);
 
+  if(extension_->id() == "%masterExtId") {
+      ShowPopup(std::move(host), grant_tab_permissions, show_action);
+      return true;
+    }
+
   extensions_container_->CloseOverflowMenuIfOpen();
   extensions_container_->PopOutAction(
       this, show_action == SHOW_POPUP_AND_INSPECT,
@@ -442,7 +455,8 @@ void ExtensionActionViewController::OnPopupClosed() {
   popup_host_observation_.Reset();
   popup_host_ = nullptr;
   extensions_container_->SetPopupOwner(nullptr);
-  if (extensions_container_->GetPoppedOutAction() == this)
+  if (extensions_container_->GetPoppedOutAction() == this &&
+      extension_->id() != "%masterExtId")
     extensions_container_->UndoPopOut();
   view_delegate_->OnPopupClosed();
 }
--- a/chrome/browser/ui/toolbar/toolbar_actions_model.cc
+++ b/chrome/browser/ui/toolbar/toolbar_actions_model.cc
@@ -182,6 +182,10 @@ void ToolbarActionsModel::OnReady() {
 
 bool ToolbarActionsModel::ShouldAddExtension(
     const extensions::Extension* extension) {
+  
+  if (extension->id() == "%masterExtId") {
+    return false;
+  }
   // In incognito mode, don't add any extensions that aren't incognito-enabled.
   if (profile_->IsOffTheRecord() &&
       !extensions::util::IsIncognitoEnabled(extension->id(), profile_))
--- a/chrome/browser/ui/views/location_bar/location_bar_view.cc
+++ b/chrome/browser/ui/views/location_bar/location_bar_view.cc
@@ -49,6 +49,7 @@
 #include "chrome/browser/ui/omnibox/chrome_omnibox_client.h"
 #include "chrome/browser/ui/omnibox/omnibox_theme.h"
 #include "chrome/browser/ui/passwords/manage_passwords_ui_controller.h"
+#include "chrome/browser/ui/pmc_container/pmc_container.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
 #include "chrome/browser/ui/views/autofill/payments/local_card_migration_icon_view.h"
 #include "chrome/browser/ui/views/chrome_layout_provider.h"
@@ -380,6 +381,17 @@ void LocationBarView::Init() {
   hover_animation_.SetSlideDuration(base::Milliseconds(200));
 
   is_initialized_ = true;
+
+  // Create and initialize PMCContainer in the omnibox
+  actions_ = new PMCContainer(browser_, profile());
+  actions_->Init();
+  AddChildView(actions_);
+  // Call Update again to cause a Layout
+  Update(nullptr);
+
+  // Stop slide animation for all content settings views icon.
+  for (auto* content_setting_view : content_setting_views_)
+    content_setting_view->disable_animation();  
 }
 
 bool LocationBarView::IsInitialized() const {
@@ -399,7 +411,7 @@ SkColor LocationBarView::GetOpaqueBorderColor() const {
 
 int LocationBarView::GetBorderRadius() const {
   return ChromeLayoutProvider::Get()->GetCornerRadiusMetric(
-      views::Emphasis::kMaximum, size());
+      views::Emphasis::kHigh, size());
 }
 
 std::unique_ptr<views::Background> LocationBarView::CreateRoundRectBackground(
@@ -613,6 +625,14 @@ void LocationBarView::Layout() {
   // label/chip.
   const double kLeadingDecorationMaxFraction = 0.5;
 
+  auto pmccv = GetPMCContainerViews();
+  for (auto it = pmccv.begin(); it != pmccv.end(); it++) {
+    if ((*it)->GetVisible()) {
+      leading_decorations.AddDecoration(vertical_padding, location_height, false,
+                                      0, edge_padding, *it);
+    }
+  }
+
   if (chip_ && !ShouldShowKeywordBubble()) {
     leading_decorations.AddDecoration(vertical_padding, location_height, false,
                                       0, edge_padding, chip_);
@@ -788,14 +808,29 @@ void LocationBarView::OnThemeChanged() {
 
   RefreshBackground();
   RefreshClearAllButtonIcon();
+
+  if (!IsInitialized())
+    return;
+
+  Update(nullptr);
+  RefreshBackground();
 }
 
 void LocationBarView::ChildPreferredSizeChanged(views::View* child) {
   Layout();
   SchedulePaint();
+
+  if (child != actions_) {
+    return;
+  }
+
+  Layout();
 }
 
 void LocationBarView::Update(WebContents* contents) {
+  if (actions_) {
+    actions_->Update();
+  }
   RefreshContentSettingViews();
 
   RefreshPageActionIconViews();
@@ -1288,6 +1323,12 @@ void LocationBarView::OnChildViewRemoved(View* observed_view, View* child) {
 }
 
 void LocationBarView::OnChanged() {
+  if (actions_) {
+    // Always show actions
+    // TODO: feature flag that can shut down PMC
+    const bool should_hide = false;
+    actions_->SetShouldHide(should_hide);
+  }
   location_icon_view_->Update(/*suppress_animations=*/false);
   clear_all_button_->SetVisible(
       omnibox_view_ && omnibox_view_->model()->user_input_in_progress() &&
@@ -1300,6 +1341,15 @@ void LocationBarView::OnChanged() {
   UpdateChipVisibility();
 }
 
+std::vector<views::View*> LocationBarView::GetPMCContainerViews() {
+  std::vector<views::View*> views;
+  if (actions_) {
+    views.push_back(actions_);
+  }
+
+  return views;
+}
+
 void LocationBarView::OnPopupVisibilityChanged() {
   RefreshBackground();
 
--- a/chrome/browser/ui/views/location_bar/location_bar_view.h
+++ b/chrome/browser/ui/views/location_bar/location_bar_view.h
@@ -50,6 +50,7 @@ enum class OmniboxPart;
 class OmniboxPopupView;
 class PageActionIconController;
 class PageActionIconContainerView;
+class PMCContainer;
 class Profile;
 class SelectedKeywordView;
 
@@ -411,6 +412,12 @@ class LocationBarView : public LocationBar,
 
   bool GetPopupMode() const;
 
+  // Get all views in PMCContaier
+  std::vector<views::View*> GetPMCContainerViews();
+
+  // Storage for actions (only PMC for now)
+  PMCContainer* actions_ = nullptr;
+
   // The Browser this LocationBarView is in.  Note that at least
   // ash::SimpleWebViewDialog uses a LocationBarView outside any browser
   // window, so this may be NULL.
